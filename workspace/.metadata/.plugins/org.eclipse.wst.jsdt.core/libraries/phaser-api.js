var PIXI_Texture = function (baseTexture, frame, crop, trim) {};

var PIXI_FilterTexture = function (gl, width, height, scaleMode) {};

var PIXI_CanvasBuffer = function (width, height) {};

var PIXI_Graphics = function () {};
PIXI_Graphics.prototype = new DisplayObjectContainer();

var PIXI_Rope = function (texture, points) {};
PIXI_Rope.prototype = new Strip();

var PIXI_Sprite = function (texture) {};
PIXI_Sprite.prototype = new DisplayObjectContainer();
PIXI_Sprite.prototype.shader = new PIXI_AbstractFilter();
PIXI_Sprite.prototype.tintedTexture = new Phaser_Canvas();
PIXI_Sprite.prototype.blendMode = new Number();
PIXI_Sprite.prototype.texture = new PIXI_Texture();
PIXI_Sprite.prototype.anchor = new Phaser_Point();
PIXI_Sprite.prototype._width = new Number();
PIXI_Sprite.prototype.tint = new Number();
PIXI_Sprite.prototype._height = new Number();
PIXI_Sprite.prototype.cachedTint = new Number();

var PIXI_PixiShader = function (gl) {};

var PIXI_WebGLMaskManager = function () {};

var PIXI_Event = function (target, name, data) {};
PIXI_Event.prototype = new Object();

var PIXI_WebGLSpriteBatch = function () {};

var PIXI_ComplexPrimitiveShader = function (gl) {};

var PIXI_CanvasMaskManager = function () {};

var PIXI_WebGLFastSpriteBatch = function () {};

var PIXI_WebGLShaderManager = function () {};

var PIXI_SpriteBatch = function (texture) {};

var PIXI_Stage = function (backgroundColor) {};
PIXI_Stage.prototype = new DisplayObjectContainer();
PIXI_Stage.prototype.worldTransform = new Phaser_Matrix();

var PIXI_BaseTexture = function (source, scaleMode) {};

var PIXI_WebGLRenderer = function (width, height, options, options_view, options_transparent, options_autoResize, options_antialias, options_preserveDrawingBuffer, options_resolution) {};

var PIXI_Strip = function (texture, width, height) {};
PIXI_Strip.prototype = new DisplayObjectContainer();
PIXI_Strip.prototype.dirty = new Boolean();
PIXI_Strip.prototype.canvasPadding = new Number();
PIXI_Strip.prototype.blendMode = new Number();
PIXI_Strip.prototype.texture = new PIXI_Texture();
PIXI_Strip.prototype.DrawModes = new Object();

var PIXI_CanvasRenderer = function (width, height, options, options_view, options_transparent, options_autoResize, options_resolution, options_clearBeforeRender) {};

var PIXI_WebGLBlendModeManager = function (gl) {};

var PIXI_StripShader = function (gl) {};

var PIXI_WebGLFilterManager = function () {};

var PIXI_GraphicsData = function (lineWidth, lineColor, lineAlpha, fillColor, fillAlpha, fill, shape) {};

var PIXI_PrimitiveShader = function (gl) {};

var PIXI_DisplayObject = function () {};
PIXI_DisplayObject.prototype.worldRotation = new Number();
PIXI_DisplayObject.prototype.filterArea = new Phaser_Rectangle();
PIXI_DisplayObject.prototype.parent = new PIXI_DisplayObjectContainer();
PIXI_DisplayObject.prototype.renderable = new Boolean();
PIXI_DisplayObject.prototype.worldScale = new Phaser_Point();
PIXI_DisplayObject.prototype.transformCallbackContext = new Object();
PIXI_DisplayObject.prototype.scale = new Phaser_Point();
PIXI_DisplayObject.prototype.transformCallback = new Function();
PIXI_DisplayObject.prototype.worldAlpha = new Number();
PIXI_DisplayObject.prototype._cr = new Number();
PIXI_DisplayObject.prototype.alpha = new Number();
PIXI_DisplayObject.prototype.pivot = new Phaser_Point();
PIXI_DisplayObject.prototype.worldTransform = new Phaser_Matrix();
PIXI_DisplayObject.prototype._cacheIsDirty = new Boolean();
PIXI_DisplayObject.prototype._cacheAsBitmap = new Boolean();
PIXI_DisplayObject.prototype.visible = new Boolean();
PIXI_DisplayObject.prototype._mask = new Phaser_Rectangle();
PIXI_DisplayObject.prototype.rotation = new Number();
PIXI_DisplayObject.prototype._bounds = new Phaser_Rectangle();
PIXI_DisplayObject.prototype.worldPosition = new Phaser_Point();
PIXI_DisplayObject.prototype._currentBounds = new Phaser_Rectangle();
PIXI_DisplayObject.prototype.stage = new Phaser_Stage();
PIXI_DisplayObject.prototype.hitArea = new Phaser_Rectangle();
PIXI_DisplayObject.prototype.position = new Phaser_Point();
PIXI_DisplayObject.prototype._sr = new Number();

var PIXI_AbstractFilter = function (fragmentSrc, uniforms) {};
PIXI_AbstractFilter.prototype.dirty = new Boolean();
PIXI_AbstractFilter.prototype.padding = new Number();
PIXI_AbstractFilter.prototype.passes = new Array_Filter_();
PIXI_AbstractFilter.prototype.shaders = new Array_Shader_();
PIXI_AbstractFilter.prototype.uniforms = new Object();
PIXI_AbstractFilter.prototype.fragmentSrc = new Array();

var PIXI_TilingSprite = function (texture, width, height) {};
PIXI_TilingSprite.prototype = new Sprite();
PIXI_TilingSprite.prototype.renderable = new Boolean();
PIXI_TilingSprite.prototype.tileScaleOffset = new Phaser_Point();
PIXI_TilingSprite.prototype.tilePosition = new Phaser_Point();
PIXI_TilingSprite.prototype.tileScale = new Phaser_Point();
PIXI_TilingSprite.prototype.tilePattern = new PIXI_Texture();
PIXI_TilingSprite.prototype.textureDebug = new Boolean();
PIXI_TilingSprite.prototype.canvasBuffer = new PIXI_CanvasBuffer();
PIXI_TilingSprite.prototype.tint = new Number();
PIXI_TilingSprite.prototype.blendMode = new Number();
PIXI_TilingSprite.prototype.width = new Number();
PIXI_TilingSprite.prototype.refreshTexture = new Boolean();
PIXI_TilingSprite.prototype.tilingTexture = new PIXI_Texture();
PIXI_TilingSprite.prototype.height = new Number();

var PIXI_RenderTexture = function (width, height, renderer, scaleMode, resolution) {};
PIXI_RenderTexture.prototype = new Texture();

var PIXI_PixiFastShader = function (gl) {};

var PIXI_DisplayObjectContainer = function () {};
PIXI_DisplayObjectContainer.prototype = new DisplayObject();
PIXI_DisplayObjectContainer.prototype.children = new Array_DisplayObject_();

var PIXI_WebGLStencilManager = function () {};

var Phaser_Signal = function () {};
Phaser_Signal.prototype._bindings = new Array__Phaser_SignalBinding_();
Phaser_Signal.prototype._prevParams = new Object();
Phaser_Signal.prototype.active = new Boolean();
Phaser_Signal.prototype._shouldPropagate = new Boolean();
Phaser_Signal.prototype._boundDispatch = new Function();
Phaser_Signal.prototype.memorize = new Boolean();
Phaser_Signal.prototype.add = function (listener, listenerContext, priority, args) { return new Phaser_SignalBinding(); };
Phaser_Signal.prototype.dispatch = function (params) {};
Phaser_Signal.prototype.addOnce = function (listener, listenerContext, priority, args) { return new Phaser_SignalBinding(); };
Phaser_Signal.prototype._addBinding = function (binding) {};
Phaser_Signal.prototype.remove = function (listener, context) { return new Function(); };
Phaser_Signal.prototype.getNumListeners = function () { return new Number(); };
Phaser_Signal.prototype.halt = function () {};
Phaser_Signal.prototype.validateListener = function (listener, fnName) {};
Phaser_Signal.prototype.removeAll = function (context) {};
Phaser_Signal.prototype.forget = function () {};
Phaser_Signal.prototype._indexOfListener = function (listener, context) { return new Number(); };
Phaser_Signal.prototype._registerListener = function (listener, isOnce, listenerContext, priority) { return new Phaser_SignalBinding(); };
Phaser_Signal.prototype.dispose = function () {};
Phaser_Signal.prototype.toString = function () { return new String(); };
Phaser_Signal.prototype.has = function (listener, context) { return new Boolean(); };

var Phaser_Events = function (sprite) {};
Phaser_Events.prototype.parent = new Phaser_Sprite();
Phaser_Events.prototype.onDestroy = new Phaser_Signal();
Phaser_Events.prototype.onAnimationComplete = new Phaser_Signal();
Phaser_Events.prototype.onAddedToGroup = new Phaser_Signal();
Phaser_Events.prototype.onDragUpdate = new Phaser_Signal();
Phaser_Events.prototype.onRemovedFromWorld = new Phaser_Signal();
Phaser_Events.prototype.onRevived = new Phaser_Signal();
Phaser_Events.prototype.onEnterBounds = new Phaser_Signal();
Phaser_Events.prototype.onInputOut = new Phaser_Signal();
Phaser_Events.prototype.onInputDown = new Phaser_Signal();
Phaser_Events.prototype.onInputUp = new Phaser_Signal();
Phaser_Events.prototype.onOutOfBounds = new Phaser_Signal();
Phaser_Events.prototype.onAnimationLoop = new Phaser_Signal();
Phaser_Events.prototype.onRemovedFromGroup = new Phaser_Signal();
Phaser_Events.prototype.onKilled = new Phaser_Signal();
Phaser_Events.prototype.onInputOver = new Phaser_Signal();
Phaser_Events.prototype.onDragStop = new Phaser_Signal();
Phaser_Events.prototype.onDragStart = new Phaser_Signal();
Phaser_Events.prototype.onAnimationStart = new Phaser_Signal();
Phaser_Events.prototype.destroy = function () {};

var Phaser_Net = function (game) {};
Phaser_Net.prototype.getHostName = function () { return new String(); };
Phaser_Net.prototype.updateQueryString = function (key, value, redirect, url) { return new String(); };
Phaser_Net.prototype.getQueryString = function (parameter) { return new String(); };
Phaser_Net.prototype.decodeURI = function (value) { return new String(); };
Phaser_Net.prototype.checkDomainName = function (domain) { return new Boolean(); };

var Phaser_Easing_Exponential = function () {};
Phaser_Easing_Exponential.prototype.In = function (k) { return new Number(); };
Phaser_Easing_Exponential.prototype.InOut = function (k) { return new Number(); };
Phaser_Easing_Exponential.prototype.Out = function (k) { return new Number(); };

var Phaser_Tileset = function (name, firstgid, width, height, margin, spacing, properties) {};
Phaser_Tileset.prototype.image = new Object();
Phaser_Tileset.prototype.drawCoords = new Array__integer_();
Phaser_Tileset.prototype.columns = new Number();
Phaser_Tileset.prototype.tileSpacing = new Number();
Phaser_Tileset.prototype.firstgid = new Number();
Phaser_Tileset.prototype.tileWidth = new Number();
Phaser_Tileset.prototype.rows = new Number();
Phaser_Tileset.prototype.tileMarge = new Number();
Phaser_Tileset.prototype.total = new Number();
Phaser_Tileset.prototype.name = new String();
Phaser_Tileset.prototype.properties = new Object();
Phaser_Tileset.prototype.tileHeight = new Number();
Phaser_Tileset.prototype.draw = function (context, x, y, index) {};
Phaser_Tileset.prototype.setSpacing = function (margin, spacing) {};
Phaser_Tileset.prototype.updateTileData = function (imageWidth, imageHeight) {};
Phaser_Tileset.prototype.containsTileIndex = function () { return new Boolean(); };
Phaser_Tileset.prototype.setImage = function (image) {};

var Phaser_Particles = function (game) {};
Phaser_Particles.prototype.game = new Phaser_Game();
Phaser_Particles.prototype.emitters = new Object();
Phaser_Particles.prototype.ID = new Number();
Phaser_Particles.prototype.add = function (emitter) { return new Phaser_Emitter(); };
Phaser_Particles.prototype.update = function () {};
Phaser_Particles.prototype.remove = function (emitter) {};

var Phaser_Component_Reset = function () {};
Phaser_Component_Reset.prototype.reset = function (x, y, health) { return new PIXI_DisplayObject(); };

var Phaser_Stage = function (game) {};
Phaser_Stage.prototype = new PIXI.Stage();
Phaser_Stage.prototype.game = new Phaser_Game();
Phaser_Stage.prototype.backgroundColor = new Number();
Phaser_Stage.prototype.hiddenVar = new String();
Phaser_Stage.prototype.smoothed = new Boolean();
Phaser_Stage.prototype.currentRenderOrderID = new Number();
Phaser_Stage.prototype._backgroundColor = new Number();
Phaser_Stage.prototype.disableVisibilityChange = new Boolean();
Phaser_Stage.prototype.name = new String();
Phaser_Stage.prototype.exists = new Boolean();
Phaser_Stage.prototype.worldTransform = new Phaser_Matrix();
Phaser_Stage.prototype._onChange = new Function();
Phaser_Stage.prototype.setBackgroundColor = function (backgroundColor) {};
Phaser_Stage.prototype.postUpdate = function () {};
Phaser_Stage.prototype.parseConfig = function (config) {};
Phaser_Stage.prototype.update = function () {};
Phaser_Stage.prototype.destroy = function () {};
Phaser_Stage.prototype.checkVisibility = function () {};
Phaser_Stage.prototype.visibilityChange = function (event) {};
Phaser_Stage.prototype.updateTransform = function () {};
Phaser_Stage.prototype.boot = function () {};
Phaser_Stage.prototype.preUpdate = function () {};

var Phaser_Math = function () {};
Phaser_Math.prototype.Phaser_Math_PI2 = new Number();
Phaser_Math.prototype.smoothstep = function (x, min, max) { return new Number(); };
Phaser_Math.prototype.sinCosGenerator = function (length, sinAmplitude, cosAmplitude, frequency) { return new Object(); };
Phaser_Math.prototype.sign = function (x) { return new Number(); };
Phaser_Math.prototype.radToDeg = function (radians) { return new Number(); };
Phaser_Math.prototype.snapToCeil = function (input, gap, start) { return new Number(); };
Phaser_Math.prototype.angleBetween = function (x1, y1, x2, y2) { return new Number(); };
Phaser_Math.prototype.angleBetweenPointsY = function (point1, point2) { return new Number(); };
Phaser_Math.prototype.wrapAngle = function (angle, radians) { return new Number(); };
Phaser_Math.prototype.reverseAngle = function (angleRad) { return new Number(); };
Phaser_Math.prototype.maxAdd = function (value, amount, max) { return new Number(); };
Phaser_Math.prototype.snapToFloor = function (input, gap, start) { return new Number(); };
Phaser_Math.prototype.snapTo = function (input, gap, start) { return new Number(); };
Phaser_Math.prototype.wrapValue = function (value, amount, max) { return new Number(); };
Phaser_Math.prototype.clamp = function (x, a, b) { return new Number(); };
Phaser_Math.prototype.clampBottom = function (x, a) { return new Number(); };
Phaser_Math.prototype.bernstein = function (n, i) { return new Number(); };
Phaser_Math.prototype.fuzzyLessThan = function (a, b, epsilon) { return new Boolean(); };
Phaser_Math.prototype.maxProperty = function () { return new Number(); };
Phaser_Math.prototype.smootherstep = function (x, min, max) { return new Number(); };
Phaser_Math.prototype.catmullRomInterpolation = function (v, k) { return new Number(); };
Phaser_Math.prototype.normalizeAngle = function (angleRad) { return new Number(); };
Phaser_Math.prototype.difference = function (a, b) { return new Number(); };
Phaser_Math.prototype.fuzzyFloor = function (val, epsilon) { return new Boolean(); };
Phaser_Math.prototype.roundTo = function (value, place, base) { return new Number(); };
Phaser_Math.prototype.average = function () { return new Number(); };
Phaser_Math.prototype.roundAwayFromZero = function (value) { return new Number(); };
Phaser_Math.prototype.distance = function (x1, y1, x2, y2) { return new Number(); };
Phaser_Math.prototype.angleBetweenPoints = function (point1, point2) { return new Number(); };
Phaser_Math.prototype.isEven = function (n) { return new Boolean(); };
Phaser_Math.prototype.fuzzyEqual = function (a, b, epsilon) { return new Boolean(); };
Phaser_Math.prototype.factorial = function (value) { return new Number(); };
Phaser_Math.prototype.minProperty = function () { return new Number(); };
Phaser_Math.prototype.chanceRoll = function (chance) { return new Boolean(); };
Phaser_Math.prototype.distanceSq = function (x1, y1, x2, y2) { return new Number(); };
Phaser_Math.prototype.percent = function (a, b, base) { return new Number(); };
Phaser_Math.prototype.angleBetweenY = function (x1, y1, x2, y2) { return new Number(); };
Phaser_Math.prototype.ceilTo = function (value, place, base) { return new Number(); };
Phaser_Math.prototype.min = function () { return new Number(); };
Phaser_Math.prototype.degToRad = function (degrees) { return new Number(); };
Phaser_Math.prototype.isOdd = function (n) { return new Boolean(); };
Phaser_Math.prototype.catmullRom = function (p0, p1, p2, p3, t) { return new Number(); };
Phaser_Math.prototype.fuzzyGreaterThan = function (a, b, epsilon) { return new Boolean(); };
Phaser_Math.prototype.bezierInterpolation = function (v, k) { return new Number(); };
Phaser_Math.prototype.linearInterpolation = function (v, k) { return new Number(); };
Phaser_Math.prototype.linear = function (p0, p1, t) { return new Number(); };
Phaser_Math.prototype.shear = function (n) { return new Number(); };
Phaser_Math.prototype.max = function () { return new Number(); };
Phaser_Math.prototype.within = function (a, b, tolerance) { return new Boolean(); };
Phaser_Math.prototype.distancePow = function (x1, y1, x2, y2, pow) { return new Number(); };
Phaser_Math.prototype.floorTo = function (value, place, base) { return new Number(); };
Phaser_Math.prototype.fuzzyCeil = function (val, epsilon) { return new Boolean(); };
Phaser_Math.prototype.minSub = function (value, amount, min) { return new Number(); };
Phaser_Math.prototype.mapLinear = function (x, a1, a2, b1, b2) { return new Number(); };
Phaser_Math.prototype.wrap = function (value, min, max) { return new Number(); };

var Phaser_Easing_Quartic = function () {};
Phaser_Easing_Quartic.prototype.In = function (k) { return new Number(); };
Phaser_Easing_Quartic.prototype.InOut = function (k) { return new Number(); };
Phaser_Easing_Quartic.prototype.Out = function (k) { return new Number(); };

var Phaser_Utils = function () {};
Phaser_Utils.prototype.extend = function (deep, target) { return new Object(); };
Phaser_Utils.prototype.mixin = function (from, to) { return new Object(); };
Phaser_Utils.prototype.pad = function (str, len, pad, dir) { return new String(); };
Phaser_Utils.prototype.getProperty = function (obj, prop) { return new _(); };
Phaser_Utils.prototype.isPlainObject = function (obj) { return new Boolean(); };
Phaser_Utils.prototype.setProperty = function (obj, prop) { return new Object(); };
Phaser_Utils.prototype.randomChoice = function (choice1, choice2) { return new Object(); };
Phaser_Utils.prototype.Debug = function (game) {};
Phaser_Utils.prototype.mixinPrototype = function (target, mixin, replace) {};
Phaser_Utils.prototype.parseDimension = function (size, dimension) { return new Number(); };

var Phaser_RandomDataGenerator = function (seeds) {};
Phaser_RandomDataGenerator.prototype.c = new Number();
Phaser_RandomDataGenerator.prototype.s0 = new Number();
Phaser_RandomDataGenerator.prototype.s1 = new Number();
Phaser_RandomDataGenerator.prototype.s2 = new Number();
Phaser_RandomDataGenerator.prototype.normal = function () { return new Number(); };
Phaser_RandomDataGenerator.prototype.integerInRange = function (min, max) { return new Number(); };
Phaser_RandomDataGenerator.prototype.rnd = function () { return new Number(); };
Phaser_RandomDataGenerator.prototype.integer = function () { return new Number(); };
Phaser_RandomDataGenerator.prototype.real = function () { return new Number(); };
Phaser_RandomDataGenerator.prototype.uuid = function () { return new String(); };
Phaser_RandomDataGenerator.prototype.realInRange = function (min, max) { return new Number(); };
Phaser_RandomDataGenerator.prototype.pick = function (ary) { return new Object(); };
Phaser_RandomDataGenerator.prototype.angle = function () { return new Number(); };
Phaser_RandomDataGenerator.prototype.sow = function (seeds) {};
Phaser_RandomDataGenerator.prototype.weightedPick = function (ary) { return new Object(); };
Phaser_RandomDataGenerator.prototype.hash = function (data) { return new Number(); };
Phaser_RandomDataGenerator.prototype.frac = function () { return new Number(); };
Phaser_RandomDataGenerator.prototype.between = function (min, max) { return new Number(); };
Phaser_RandomDataGenerator.prototype.timestamp = function (min, max) { return new Number(); };

var Phaser_Point = function (x, y) {};
Phaser_Point.prototype.type = new Number();
Phaser_Point.prototype.x = new Number();
Phaser_Point.prototype.y = new Number();
Phaser_Point.prototype.rotate = function (x, y, angle, asDegrees, distance) { return new Phaser_Point(); };
Phaser_Point.prototype.distance = function (dest, round) { return new Number(); };
Phaser_Point.prototype.setMagnitude = function (magnitude) { return new Phaser_Point(); };
Phaser_Point.prototype.projectUnit = function (a, b, out) { return new Phaser_Point(); };
Phaser_Point.prototype.perp = function () { return new Phaser_Point(); };
Phaser_Point.prototype.dot = function (a) { return new Number(); };
Phaser_Point.prototype.project = function (a, b, out) { return new Phaser_Point(); };
Phaser_Point.prototype.getMagnitudeSq = function () { return new Number(); };
Phaser_Point.prototype.copyTo = function (dest) { return new Object(); };
Phaser_Point.prototype.negative = function (a, out) { return new Phaser_Point(); };
Phaser_Point.prototype.multiplyAdd = function (a, b, s, out) { return new Phaser_Point(); };
Phaser_Point.prototype.normalize = function () { return new Phaser_Point(); };
Phaser_Point.prototype.angle = function (a, asDegrees) { return new Number(); };
Phaser_Point.prototype.isZero = function () { return new Boolean(); };
Phaser_Point.prototype.divide = function (x, y) { return new Phaser_Point(); };
Phaser_Point.prototype.multiply = function (x, y) { return new Phaser_Point(); };
Phaser_Point.prototype.floor = function () { return new Phaser_Point(); };
Phaser_Point.prototype.clamp = function (min, max) { return new Phaser_Point(); };
Phaser_Point.prototype.rperp = function () { return new Phaser_Point(); };
Phaser_Point.prototype.add = function (x, y) { return new Phaser_Point(); };
Phaser_Point.prototype.set = function (x, y) { return new Phaser_Point(); };
Phaser_Point.prototype.invert = function () { return new Phaser_Point(); };
Phaser_Point.prototype.subtract = function (x, y) { return new Phaser_Point(); };
Phaser_Point.prototype.cross = function (a) { return new Number(); };
Phaser_Point.prototype.interpolate = function (a, b, f, out) { return new Phaser_Point(); };
Phaser_Point.prototype.ceil = function () { return new Phaser_Point(); };
Phaser_Point.prototype.parse = function (obj, xProp, yProp) { return new Phaser_Point(); };
Phaser_Point.prototype.getMagnitude = function () { return new Number(); };
Phaser_Point.prototype.copyFrom = function (source) { return new Phaser_Point(); };
Phaser_Point.prototype.clampY = function (min, max) { return new Phaser_Point(); };
Phaser_Point.prototype.clampX = function (min, max) { return new Phaser_Point(); };
Phaser_Point.prototype.normalRightHand = function () { return new Phaser_Point(); };
Phaser_Point.prototype.centroid = function (points, out) { return new Phaser_Point(); };
Phaser_Point.prototype.equals = function (a) { return new Boolean(); };
Phaser_Point.prototype.clone = function (output) { return new Phaser_Point(); };
Phaser_Point.prototype.setTo = function (x, y) { return new Phaser_Point(); };
Phaser_Point.prototype.toString = function () { return new String(); };

var Phaser_Device = function () {};
Phaser_Device.prototype.fullscreenKeyboard = new Boolean();
Phaser_Device.prototype.arora = new Boolean();
Phaser_Device.prototype.windowsPhone = new Boolean();
Phaser_Device.prototype.opera = new Boolean();
Phaser_Device.prototype.webGL = new Boolean();
Phaser_Device.prototype.getUserMedia = new Boolean();
Phaser_Device.prototype.firefox = new Boolean();
Phaser_Device.prototype.ieVersion = new Number();
Phaser_Device.prototype.hlsVideo = new Boolean();
Phaser_Device.prototype.canvasBitBltShift = new Boolean();
Phaser_Device.prototype.opus = new Boolean();
Phaser_Device.prototype.iOS = new Boolean();
Phaser_Device.prototype.vibration = new Boolean();
Phaser_Device.prototype.epiphany = new Boolean();
Phaser_Device.prototype.ogg = new Boolean();
Phaser_Device.prototype.audioData = new Boolean();
Phaser_Device.prototype.iPhone4 = new Boolean();
Phaser_Device.prototype.cordova = new Boolean();
Phaser_Device.prototype.electron = new Boolean();
Phaser_Device.prototype.quirksMode = new Boolean();
Phaser_Device.prototype.nodeWebkit = new Boolean();
Phaser_Device.prototype.worker = new Boolean();
Phaser_Device.prototype.ie = new Boolean();
Phaser_Device.prototype.css3D = new Boolean();
Phaser_Device.prototype.canvas = new Boolean();
Phaser_Device.prototype.cancelFullscreen = new String();
Phaser_Device.prototype.firefoxVersion = new Number();
Phaser_Device.prototype.chrome = new Boolean();
Phaser_Device.prototype.wheelType = new String();
Phaser_Device.prototype.touch = new Boolean();
Phaser_Device.prototype.chromeOS = new Boolean();
Phaser_Device.prototype.webm = new Boolean();
Phaser_Device.prototype.node = new Boolean();
Phaser_Device.prototype.fullscreen = new Boolean();
Phaser_Device.prototype.pixelRatio = new Number();
Phaser_Device.prototype.support32bit = new Boolean();
Phaser_Device.prototype.deviceReadyAt = new Number();
Phaser_Device.prototype.mobileSafari = new Boolean();
Phaser_Device.prototype.mspointer = new Boolean();
Phaser_Device.prototype.iPhone = new Boolean();
Phaser_Device.prototype.requestFullscreen = new String();
Phaser_Device.prototype.safari = new Boolean();
Phaser_Device.prototype.android = new Boolean();
Phaser_Device.prototype.localStorage = new Boolean();
Phaser_Device.prototype.mp4Video = new Boolean();
Phaser_Device.prototype.vp9Video = new Boolean();
Phaser_Device.prototype.LITTLE_ENDIAN = new Boolean();
Phaser_Device.prototype.chromeVersion = new Number();
Phaser_Device.prototype.h264Video = new Boolean();
Phaser_Device.prototype.desktop = new Boolean();
Phaser_Device.prototype.crosswalk = new Boolean();
Phaser_Device.prototype.file = new Boolean();
Phaser_Device.prototype.webmVideo = new Boolean();
Phaser_Device.prototype.linux = new Boolean();
Phaser_Device.prototype.pointerLock = new Boolean();
Phaser_Device.prototype.oggVideo = new Boolean();
Phaser_Device.prototype.initialized = new Boolean();
Phaser_Device.prototype.iPad = new Boolean();
Phaser_Device.prototype.m4a = new Boolean();
Phaser_Device.prototype.macOS = new Boolean();
Phaser_Device.prototype.webApp = new Boolean();
Phaser_Device.prototype.silk = new Boolean();
Phaser_Device.prototype.fileSystem = new Boolean();
Phaser_Device.prototype.trident = new Boolean();
Phaser_Device.prototype.tridentVersion = new Number();
Phaser_Device.prototype.webAudio = new Boolean();
Phaser_Device.prototype.cocoonJSApp = new Boolean();
Phaser_Device.prototype.cocoonJS = new Boolean();
Phaser_Device.prototype.typedArray = new Boolean();
Phaser_Device.prototype.midori = new Boolean();
Phaser_Device.prototype.littleEndian = new Boolean();
Phaser_Device.prototype.onInitialized = new Phaser_Signal();
Phaser_Device.prototype.windows = new Boolean();
Phaser_Device.prototype.wav = new Boolean();
Phaser_Device.prototype.ejecta = new Boolean();
Phaser_Device.prototype.mp3 = new Boolean();
Phaser_Device.prototype.whenReady = function (handler, context, nonPrimer) {};
Phaser_Device.prototype.isConsoleOpen = function () {};
Phaser_Device.prototype.canPlayVideo = function (type) { return new Boolean(); };
Phaser_Device.prototype.canPlayAudio = function (type) { return new Boolean(); };
Phaser_Device.prototype._initialize = function () {};
Phaser_Device.prototype._readyCheck = function () {};
Phaser_Device.prototype.isAndroidStockBrowser = function () {};

var Phaser_Frame = function (index, x, y, width, height, name) {};
Phaser_Frame.prototype.centerY = new Number();
Phaser_Frame.prototype.distance = new Number();
Phaser_Frame.prototype.spriteSourceSizeW = new Number();
Phaser_Frame.prototype.centerX = new Number();
Phaser_Frame.prototype.spriteSourceSizeX = new Number();
Phaser_Frame.prototype.bottom = new Number();
Phaser_Frame.prototype.index = new Number();
Phaser_Frame.prototype.rotated = new Boolean();
Phaser_Frame.prototype.sourceSizeH = new Number();
Phaser_Frame.prototype.spriteSourceSizeY = new Number();
Phaser_Frame.prototype.right = new Number();
Phaser_Frame.prototype.spriteSourceSizeH = new Number();
Phaser_Frame.prototype.x = new Number();
Phaser_Frame.prototype.width = new Number();
Phaser_Frame.prototype.name = new String();
Phaser_Frame.prototype.y = new Number();
Phaser_Frame.prototype.trimmed = new Boolean();
Phaser_Frame.prototype.sourceSizeW = new Number();
Phaser_Frame.prototype.rotationDirection = new String();
Phaser_Frame.prototype.height = new Number();
Phaser_Frame.prototype.setTrim = function (trimmed, actualWidth, actualHeight, destX, destY, destWidth, destHeight) {};
Phaser_Frame.prototype.clone = function () { return new Phaser_Frame(); };
Phaser_Frame.prototype.resize = function (width, height) {};
Phaser_Frame.prototype.getRect = function (out) { return new Phaser_Rectangle(); };

var Phaser_Game = function (width, height, renderer, parent, state, transparent, antialias, physicsConfig) {};
Phaser_Game.prototype.parent = new String();
Phaser_Game.prototype.paused = new Boolean();
Phaser_Game.prototype.plugins = new Phaser_PluginManager();
Phaser_Game.prototype.lockRender = new Boolean();
Phaser_Game.prototype.sound = new Phaser_SoundManager();
Phaser_Game.prototype.stepping = new Boolean();
Phaser_Game.prototype.resolution = new Number();
Phaser_Game.prototype.antialias = new Boolean();
Phaser_Game.prototype.raf = new Phaser_RequestAnimationFrame();
Phaser_Game.prototype.updatesThisFrame = new Number();
Phaser_Game.prototype.context = new CanvasRenderingContext2D();
Phaser_Game.prototype.create = new Phaser_Create();
Phaser_Game.prototype.id = new Number();
Phaser_Game.prototype.state = new Phaser_StateManager();
Phaser_Game.prototype.currentUpdateID = new Number();
Phaser_Game.prototype.net = new Phaser_Net();
Phaser_Game.prototype.particles = new Phaser_Particles();
Phaser_Game.prototype._width = new Number();
Phaser_Game.prototype.height = new Number();
Phaser_Game.prototype.add = new Phaser_GameObjectFactory();
Phaser_Game.prototype.physicsConfig = new Object();
Phaser_Game.prototype.cache = new Phaser_Cache();
Phaser_Game.prototype.canvas = new HTMLCanvasElement();
Phaser_Game.prototype.rnd = new Phaser_RandomDataGenerator();
Phaser_Game.prototype.onResume = new Phaser_Signal();
Phaser_Game.prototype.onFocus = new Phaser_Signal();
Phaser_Game.prototype._lastCount = new Number();
Phaser_Game.prototype.input = new Phaser_Input();
Phaser_Game.prototype.fpsProblemNotifier = new Phaser_Signal();
Phaser_Game.prototype.math = new Phaser_Math();
Phaser_Game.prototype._kickstart = new Boolean();
Phaser_Game.prototype.device = new Phaser_Device();
Phaser_Game.prototype.stepCount = new Number();
Phaser_Game.prototype._nextNotification = new Number();
Phaser_Game.prototype.renderer = new PIXI_CanvasRenderer();
Phaser_Game.prototype._deltaTime = new Number();
Phaser_Game.prototype.tweens = new Phaser_TweenManager();
Phaser_Game.prototype.scale = new Phaser_ScaleManager();
Phaser_Game.prototype.onPause = new Phaser_Signal();
Phaser_Game.prototype.transparent = new Boolean();
Phaser_Game.prototype._spiraling = new Number();
Phaser_Game.prototype._paused = new Boolean();
Phaser_Game.prototype.world = new Phaser_World();
Phaser_Game.prototype.load = new Phaser_Loader();
Phaser_Game.prototype.isRunning = new Boolean();
Phaser_Game.prototype.preserveDrawingBuffer = new Boolean();
Phaser_Game.prototype.physics = new Phaser_Physics();
Phaser_Game.prototype._codePaused = new Boolean();
Phaser_Game.prototype.pendingStep = new Boolean();
Phaser_Game.prototype.renderType = new Number();
Phaser_Game.prototype.camera = new Phaser_Camera();
Phaser_Game.prototype.make = new Phaser_GameObjectCreator();
Phaser_Game.prototype.isBooted = new Boolean();
Phaser_Game.prototype.debug = new Phaser_Utils_Debug();
Phaser_Game.prototype.forceSingleUpdate = new Boolean();
Phaser_Game.prototype._height = new Number();
Phaser_Game.prototype.onBlur = new Phaser_Signal();
Phaser_Game.prototype.stage = new Phaser_Stage();
Phaser_Game.prototype.width = new Number();
Phaser_Game.prototype.time = new Phaser_Time();
Phaser_Game.prototype.config = new Object();
Phaser_Game.prototype.gamePaused = function (event) {};
Phaser_Game.prototype.focusLoss = function (event) {};
Phaser_Game.prototype.showDebugHeader = function () {};
Phaser_Game.prototype.contextRestored = function () {};
Phaser_Game.prototype.contextLost = function (event) {};
Phaser_Game.prototype.parseConfig = function () {};
Phaser_Game.prototype.destroy = function () {};
Phaser_Game.prototype.enableStep = function () {};
Phaser_Game.prototype.setUpRenderer = function () {};
Phaser_Game.prototype.update = function (time) {};
Phaser_Game.prototype.updateRender = function (elapsedTime) {};
Phaser_Game.prototype.updateLogic = function (timeStep) {};
Phaser_Game.prototype.boot = function () {};
Phaser_Game.prototype.gameResumed = function (event) {};
Phaser_Game.prototype.step = function () {};
Phaser_Game.prototype.focusGain = function (event) {};
Phaser_Game.prototype.disableStep = function () {};

var Phaser_Rectangle = function (x, y, width, height) {};
Phaser_Rectangle.prototype.centerY = new Number();
Phaser_Rectangle.prototype.centerX = new Number();
Phaser_Rectangle.prototype.type = new Number();
Phaser_Rectangle.prototype.empty = new Boolean();
Phaser_Rectangle.prototype.halfWidth = new Number();
Phaser_Rectangle.prototype.height = new Number();
Phaser_Rectangle.prototype.halfHeight = new Number();
Phaser_Rectangle.prototype.bottom = new Number();
Phaser_Rectangle.prototype.volume = new Number();
Phaser_Rectangle.prototype.left = new Number();
Phaser_Rectangle.prototype.perimeter = new Number();
Phaser_Rectangle.prototype.randomX = new Number();
Phaser_Rectangle.prototype.randomY = new Number();
Phaser_Rectangle.prototype.bottomRight = new Phaser_Point();
Phaser_Rectangle.prototype.top = new Number();
Phaser_Rectangle.prototype.bottomLeft = new Phaser_Point();
Phaser_Rectangle.prototype.topRight = new Phaser_Point();
Phaser_Rectangle.prototype.right = new Number();
Phaser_Rectangle.prototype.topLeft = new Phaser_Point();
Phaser_Rectangle.prototype.x = new Number();
Phaser_Rectangle.prototype.width = new Number();
Phaser_Rectangle.prototype.y = new Number();
Phaser_Rectangle.prototype.ceilAll = function () {};
Phaser_Rectangle.prototype.offsetPoint = function (point) { return new Phaser_Rectangle(); };
Phaser_Rectangle.prototype.copyTo = function (source) { return new Object(); };
Phaser_Rectangle.prototype.inflatePoint = function (a, point) { return new Phaser_Rectangle(); };
Phaser_Rectangle.prototype.intersection = function (b, out) { return new Phaser_Rectangle(); };
Phaser_Rectangle.prototype.offset = function (dx, dy) { return new Phaser_Rectangle(); };
Phaser_Rectangle.prototype.centerOn = function (x, y) { return new Phaser_Rectangle(); };
Phaser_Rectangle.prototype.ceil = function () {};
Phaser_Rectangle.prototype.contains = function (x, y) { return new Boolean(); };
Phaser_Rectangle.prototype.size = function (output) { return new Phaser_Point(); };
Phaser_Rectangle.prototype.intersects = function (b) { return new Boolean(); };
Phaser_Rectangle.prototype.scale = function (x, y) { return new Phaser_Rectangle(); };
Phaser_Rectangle.prototype.aabb = function (points, out) { return new Phaser_Rectangle(); };
Phaser_Rectangle.prototype.random = function (out) { return new Phaser_Point(); };
Phaser_Rectangle.prototype.floor = function () {};
Phaser_Rectangle.prototype.floorAll = function () {};
Phaser_Rectangle.prototype.union = function (b, out) { return new Phaser_Rectangle(); };
Phaser_Rectangle.prototype.copyFrom = function (source) { return new Phaser_Rectangle(); };
Phaser_Rectangle.prototype.containsRaw = function (rx, ry, rw, rh, x, y) { return new Boolean(); };
Phaser_Rectangle.prototype.inflate = function (dx, dy) { return new Phaser_Rectangle(); };
Phaser_Rectangle.prototype.equals = function (b) { return new Boolean(); };
Phaser_Rectangle.prototype.clone = function (output) { return new Phaser_Rectangle(); };
Phaser_Rectangle.prototype.setTo = function (x, y, width, height) { return new Phaser_Rectangle(); };
Phaser_Rectangle.prototype.resize = function (width, height) { return new Phaser_Rectangle(); };
Phaser_Rectangle.prototype.toString = function () { return new String(); };
Phaser_Rectangle.prototype.sameDimensions = function (a, b) { return new Boolean(); };
Phaser_Rectangle.prototype.containsPoint = function (a, point) { return new Boolean(); };
Phaser_Rectangle.prototype.containsRect = function (b) { return new Boolean(); };
Phaser_Rectangle.prototype.intersectsRaw = function (left, right, top, bottom, tolerance) { return new Boolean(); };

var Phaser_QuadTree = function (x, y, width, height, maxObjects, maxLevels, level) {};
Phaser_QuadTree.prototype.maxLevels = new Number();
Phaser_QuadTree.prototype.level = new Number();
Phaser_QuadTree.prototype.objects = new Array();
Phaser_QuadTree.prototype._empty = new Array();
Phaser_QuadTree.prototype.nodes = new Array();
Phaser_QuadTree.prototype.bounds = new Object();
Phaser_QuadTree.prototype.maxObjects = new Number();
Phaser_QuadTree.prototype.getIndex = function (rect) { return new Number(); };
Phaser_QuadTree.prototype.clear = function () {};
Phaser_QuadTree.prototype.insert = function (body) {};
Phaser_QuadTree.prototype.populate = function (group) {};
Phaser_QuadTree.prototype.split = function () {};
Phaser_QuadTree.prototype.populateHandler = function (sprite) {};
Phaser_QuadTree.prototype.reset = function (x, y, width, height, maxObjects, maxLevels, level) {};
Phaser_QuadTree.prototype.retrieve = function (source) { return new Array(); };

var Phaser_Tween = function (target, game, manager) {};
Phaser_Tween.prototype.game = new Phaser_Game();
Phaser_Tween.prototype.timeScale = new Number();
Phaser_Tween.prototype._hasStarted = new Boolean();
Phaser_Tween.prototype.current = new Number();
Phaser_Tween.prototype.onStart = new Phaser_Signal();
Phaser_Tween.prototype._onUpdateCallbackContext = new Object();
Phaser_Tween.prototype.isRunning = new Boolean();
Phaser_Tween.prototype._codePaused = new Boolean();
Phaser_Tween.prototype.onRepeat = new Phaser_Signal();
Phaser_Tween.prototype.repeatCounter = new Number();
Phaser_Tween.prototype.onChildComplete = new Phaser_Signal();
Phaser_Tween.prototype.totalDuration = new Phaser_TweenData();
Phaser_Tween.prototype.isPaused = new Boolean();
Phaser_Tween.prototype.manager = new Phaser_TweenManager();
Phaser_Tween.prototype.onComplete = new Phaser_Signal();
Phaser_Tween.prototype.reverse = new Boolean();
Phaser_Tween.prototype.target = new Object();
Phaser_Tween.prototype.chainedTween = new Phaser_Tween();
Phaser_Tween.prototype.timeline = new Array();
Phaser_Tween.prototype.frameBased = new Boolean();
Phaser_Tween.prototype.pendingDelete = new Boolean();
Phaser_Tween.prototype._onUpdateCallback = new Function();
Phaser_Tween.prototype._pausedTime = new Number();
Phaser_Tween.prototype.properties = new Object();
Phaser_Tween.prototype.onLoop = new Phaser_Signal();
Phaser_Tween.prototype._pause = function () {};
Phaser_Tween.prototype.update = function (time) { return new Boolean(); };
Phaser_Tween.prototype.updateTweenData = function (property, value, index) { return new Phaser_Tween(); };
Phaser_Tween.prototype.onUpdateCallback = function (callback, callbackContext) { return new Phaser_Tween(); };
Phaser_Tween.prototype.easing = function (ease, index) { return new Phaser_Tween(); };
Phaser_Tween.prototype.yoyoDelay = function (duration, index) { return new Phaser_Tween(); };
Phaser_Tween.prototype.yoyo = function (enable, yoyoDelay, index) { return new Phaser_Tween(); };
Phaser_Tween.prototype.loop = function (value) { return new Phaser_Tween(); };
Phaser_Tween.prototype.repeat = function (total, repeat, index) { return new Phaser_Tween(); };
Phaser_Tween.prototype.generateData = function (frameRate, data) { return new Array(); };
Phaser_Tween.prototype.from = function (properties, duration, ease, autoStart, delay, repeat, yoyo) { return new Phaser_Tween(); };
Phaser_Tween.prototype.repeatDelay = function (duration, index) { return new Phaser_Tween(); };
Phaser_Tween.prototype.resume = function () {};
Phaser_Tween.prototype.chain = function (tweens) { return new Phaser_Tween(); };
Phaser_Tween.prototype.start = function (index) { return new Phaser_Tween(); };
Phaser_Tween.prototype.pause = function () {};
Phaser_Tween.prototype._resume = function () {};
Phaser_Tween.prototype.interpolation = function (interpolation, context, index) { return new Phaser_Tween(); };
Phaser_Tween.prototype.delay = function (duration, index) { return new Phaser_Tween(); };
Phaser_Tween.prototype.stop = function (complete) { return new Phaser_Tween(); };
Phaser_Tween.prototype.to = function (properties, duration, ease, autoStart, delay, repeat, yoyo) { return new Phaser_Tween(); };

var Phaser_Time = function (game) {};
Phaser_Time.prototype.game = new Phaser_Game();
Phaser_Time.prototype._pauseStarted = new Number();
Phaser_Time.prototype.fpsMin = new Number();
Phaser_Time.prototype.timeToCall = new Number();
Phaser_Time.prototype.elapsed = new Number();
Phaser_Time.prototype.advancedTiming = new Boolean();
Phaser_Time.prototype.fpsMax = new Number();
Phaser_Time.prototype._justResumed = new Boolean();
Phaser_Time.prototype.now = new Number();
Phaser_Time.prototype.physicsElapsedMS = new Number();
Phaser_Time.prototype.suggestedFps = new Number();
Phaser_Time.prototype.events = new Phaser_Timer();
Phaser_Time.prototype.desiredFps = new Number();
Phaser_Time.prototype.frames = new Number();
Phaser_Time.prototype.fps = new Number();
Phaser_Time.prototype.prevTime = new Number();
Phaser_Time.prototype.slowMotion = new Number();
Phaser_Time.prototype.msMax = new Number();
Phaser_Time.prototype._timeLastSecond = new Number();
Phaser_Time.prototype.physicsElapsed = new Number();
Phaser_Time.prototype.pauseDuration = new Number();
Phaser_Time.prototype.timeExpected = new Number();
Phaser_Time.prototype._frameCount = new Number();
Phaser_Time.prototype._timers = new Array__Phaser_Timer_();
Phaser_Time.prototype._started = new Number();
Phaser_Time.prototype.msMin = new Number();
Phaser_Time.prototype.time = new Number();
Phaser_Time.prototype._elapsedAcumulator = new Number();
Phaser_Time.prototype.elapsedMS = new Number();
Phaser_Time.prototype.gamePaused = function () {};
Phaser_Time.prototype.update = function (time) {};
Phaser_Time.prototype.totalElapsedSeconds = function () { return new Number(); };
Phaser_Time.prototype.removeAll = function () {};
Phaser_Time.prototype.create = function (autoDestroy) { return new Phaser_Timer(); };
Phaser_Time.prototype.boot = function () {};
Phaser_Time.prototype.updateRAF = function (time) {};
Phaser_Time.prototype.updateAdvancedTiming = function () {};
Phaser_Time.prototype.elapsedSecondsSince = function (since) { return new Number(); };
Phaser_Time.prototype.add = function (timer) { return new Phaser_Timer(); };
Phaser_Time.prototype.updateSetTimeout = function (time) {};
Phaser_Time.prototype.elapsedSince = function (since) { return new Number(); };
Phaser_Time.prototype.gameResumed = function () {};
Phaser_Time.prototype.reset = function () {};
Phaser_Time.prototype.updateTimers = function () {};

var Phaser_RequestAnimationFrame = function (game, forceSetTimeOut) {};
Phaser_RequestAnimationFrame.prototype.game = new Phaser_Game();
Phaser_RequestAnimationFrame.prototype._timeOutID = new Number();
Phaser_RequestAnimationFrame.prototype.isRunning = new Boolean();
Phaser_RequestAnimationFrame.prototype.forceSetTimeOut = new Boolean();
Phaser_RequestAnimationFrame.prototype._onLoop = new Function();
Phaser_RequestAnimationFrame.prototype._isSetTimeOut = new Boolean();
Phaser_RequestAnimationFrame.prototype.isRAF = function () { return new Boolean(); };
Phaser_RequestAnimationFrame.prototype.isSetTimeOut = function () { return new Boolean(); };
Phaser_RequestAnimationFrame.prototype.updateSetTimeout = function () {};
Phaser_RequestAnimationFrame.prototype.stop = function () {};
Phaser_RequestAnimationFrame.prototype.start = function () {};
Phaser_RequestAnimationFrame.prototype.updateRAF = function () {};

var Phaser_Physics_Arcade_Body = function (sprite) {};
Phaser_Physics_Arcade_Body.prototype.angularDrag = new Number();
Phaser_Physics_Arcade_Body.prototype.newVelocity = new Phaser_Point();
Phaser_Physics_Arcade_Body.prototype._sy = new Number();
Phaser_Physics_Arcade_Body.prototype.bounce = new Phaser_Point();
Phaser_Physics_Arcade_Body.prototype._sx = new Number();
Phaser_Physics_Arcade_Body.prototype.prev = new Phaser_Point();
Phaser_Physics_Arcade_Body.prototype.type = new Number();
Phaser_Physics_Arcade_Body.prototype.acceleration = new Phaser_Point();
Phaser_Physics_Arcade_Body.prototype.angularAcceleration = new Number();
Phaser_Physics_Arcade_Body.prototype.maxAngular = new Number();
Phaser_Physics_Arcade_Body.prototype.sourceWidth = new Number();
Phaser_Physics_Arcade_Body.prototype.enable = new Boolean();
Phaser_Physics_Arcade_Body.prototype.halfWidth = new Number();
Phaser_Physics_Arcade_Body.prototype.collideWorldBounds = new Boolean();
Phaser_Physics_Arcade_Body.prototype.drag = new Phaser_Point();
Phaser_Physics_Arcade_Body.prototype.tilePadding = new Phaser_Point();
Phaser_Physics_Arcade_Body.prototype.customSeparateY = new Boolean();
Phaser_Physics_Arcade_Body.prototype.height = new Number();
Phaser_Physics_Arcade_Body.prototype.customSeparateX = new Boolean();
Phaser_Physics_Arcade_Body.prototype.syncBounds = new Boolean();
Phaser_Physics_Arcade_Body.prototype.offset = new Phaser_Point();
Phaser_Physics_Arcade_Body.prototype.checkCollision = new Object();
Phaser_Physics_Arcade_Body.prototype.halfHeight = new Number();
Phaser_Physics_Arcade_Body.prototype.bottom = new Number();
Phaser_Physics_Arcade_Body.prototype.sourceHeight = new Number();
Phaser_Physics_Arcade_Body.prototype.deltaMax = new Phaser_Point();
Phaser_Physics_Arcade_Body.prototype.wasTouching = new Object();
Phaser_Physics_Arcade_Body.prototype._dx = new Number();
Phaser_Physics_Arcade_Body.prototype._dy = new Number();
Phaser_Physics_Arcade_Body.prototype.maxVelocity = new Phaser_Point();
Phaser_Physics_Arcade_Body.prototype.position = new Phaser_Point();
Phaser_Physics_Arcade_Body.prototype.skipQuadTree = new Boolean();
Phaser_Physics_Arcade_Body.prototype.game = new Phaser_Game();
Phaser_Physics_Arcade_Body.prototype._reset = new Boolean();
Phaser_Physics_Arcade_Body.prototype.immovable = new Boolean();
Phaser_Physics_Arcade_Body.prototype.mass = new Number();
Phaser_Physics_Arcade_Body.prototype.facing = new Number();
Phaser_Physics_Arcade_Body.prototype.allowRotation = new Boolean();
Phaser_Physics_Arcade_Body.prototype.allowGravity = new Boolean();
Phaser_Physics_Arcade_Body.prototype.speed = new Number();
Phaser_Physics_Arcade_Body.prototype.blocked = new Object();
Phaser_Physics_Arcade_Body.prototype.sprite = new Phaser_Sprite();
Phaser_Physics_Arcade_Body.prototype.angle = new Number();
Phaser_Physics_Arcade_Body.prototype.embedded = new Boolean();
Phaser_Physics_Arcade_Body.prototype.dirty = new Boolean();
Phaser_Physics_Arcade_Body.prototype.overlapX = new Number();
Phaser_Physics_Arcade_Body.prototype.touching = new Object();
Phaser_Physics_Arcade_Body.prototype.overlapY = new Number();
Phaser_Physics_Arcade_Body.prototype.rotation = new Number();
Phaser_Physics_Arcade_Body.prototype.center = new Phaser_Point();
Phaser_Physics_Arcade_Body.prototype.velocity = new Phaser_Point();
Phaser_Physics_Arcade_Body.prototype.right = new Number();
Phaser_Physics_Arcade_Body.prototype.friction = new Phaser_Point();
Phaser_Physics_Arcade_Body.prototype.angularVelocity = new Number();
Phaser_Physics_Arcade_Body.prototype.preRotation = new Number();
Phaser_Physics_Arcade_Body.prototype.gravity = new Phaser_Point();
Phaser_Physics_Arcade_Body.prototype.moves = new Boolean();
Phaser_Physics_Arcade_Body.prototype.width = new Number();
Phaser_Physics_Arcade_Body.prototype.x = new Number();
Phaser_Physics_Arcade_Body.prototype.y = new Number();
Phaser_Physics_Arcade_Body.prototype.postUpdate = function () {};
Phaser_Physics_Arcade_Body.prototype.destroy = function () {};
Phaser_Physics_Arcade_Body.prototype.reset = function (x, y) {};
Phaser_Physics_Arcade_Body.prototype.preUpdate = function () {};
Phaser_Physics_Arcade_Body.prototype.renderBodyInfo = function (body, x, y, color) {};
Phaser_Physics_Arcade_Body.prototype.deltaZ = function () { return new Number(); };
Phaser_Physics_Arcade_Body.prototype.deltaX = function () { return new Number(); };
Phaser_Physics_Arcade_Body.prototype.deltaY = function () { return new Number(); };
Phaser_Physics_Arcade_Body.prototype.setSize = function (width, height, offsetX, offsetY) {};
Phaser_Physics_Arcade_Body.prototype.checkWorldBounds = function () {};
Phaser_Physics_Arcade_Body.prototype.render = function (context, body, color, filled) {};
Phaser_Physics_Arcade_Body.prototype.deltaAbsY = function () { return new Number(); };
Phaser_Physics_Arcade_Body.prototype.deltaAbsX = function () { return new Number(); };
Phaser_Physics_Arcade_Body.prototype.onWall = function () { return new Boolean(); };
Phaser_Physics_Arcade_Body.prototype.updateBounds = function () {};
Phaser_Physics_Arcade_Body.prototype.onFloor = function () { return new Boolean(); };
Phaser_Physics_Arcade_Body.prototype.hitTest = function (x, y) { return new Boolean(); };

var Phaser_Easing_Bounce = function () {};
Phaser_Easing_Bounce.prototype.In = function (k) { return new Number(); };
Phaser_Easing_Bounce.prototype.InOut = function (k) { return new Number(); };
Phaser_Easing_Bounce.prototype.Out = function (k) { return new Number(); };

var Phaser_Circle = function (x, y, diameter) {};
Phaser_Circle.prototype.type = new Number();
Phaser_Circle.prototype._radius = new Number();
Phaser_Circle.prototype.empty = new Boolean();
Phaser_Circle.prototype._diameter = new Number();
Phaser_Circle.prototype.diameter = new Number();
Phaser_Circle.prototype.top = new Number();
Phaser_Circle.prototype.radius = new Number();
Phaser_Circle.prototype.area = new Number();
Phaser_Circle.prototype.bottom = new Number();
Phaser_Circle.prototype.right = new Number();
Phaser_Circle.prototype.left = new Object();
Phaser_Circle.prototype.x = new Number();
Phaser_Circle.prototype.y = new Number();
Phaser_Circle.prototype.circumferencePoint = function (angle, asDegrees, out) { return new Phaser_Point(); };
Phaser_Circle.prototype.distance = function (dest, round) { return new Number(); };
Phaser_Circle.prototype.intersects = function (a, b) { return new Boolean(); };
Phaser_Circle.prototype.offsetPoint = function (point) { return new Phaser_Circle(); };
Phaser_Circle.prototype.getBounds = function () { return new Phaser_Rectangle(); };
Phaser_Circle.prototype.copyTo = function (dest) { return new Object(); };
Phaser_Circle.prototype.random = function (out) { return new Phaser_Point(); };
Phaser_Circle.prototype.intersectsRectangle = function (c, r) { return new Boolean(); };
Phaser_Circle.prototype.offset = function (dx, dy) { return new Phaser_Circle(); };
Phaser_Circle.prototype.copyFrom = function (source) { return new Phaser_Circle(); };
Phaser_Circle.prototype.contains = function (x, y) { return new Boolean(); };
Phaser_Circle.prototype.circumference = function () { return new Number(); };
Phaser_Circle.prototype.equals = function (a, b) { return new Boolean(); };
Phaser_Circle.prototype.clone = function (output) { return new Phaser_Circle(); };
Phaser_Circle.prototype.setTo = function (x, y, diameter) { return new Phaser_Circle(); };
Phaser_Circle.prototype.toString = function () { return new String(); };

var Phaser_RenderTexture = function (game, key, width, height, key, scaleMode, resolution) {};
Phaser_RenderTexture.prototype = new PIXI.RenderTexture();
Phaser_RenderTexture.prototype.game = new Phaser_Game();
Phaser_RenderTexture.prototype._tempMatrix = new PIXI_Matrix();
Phaser_RenderTexture.prototype.type = new Number();
Phaser_RenderTexture.prototype.key = new String();
Phaser_RenderTexture.prototype.renderXY = function (displayObject, x, y, clear) {};
Phaser_RenderTexture.prototype.render = function (displayObject, matrix, clear) {};
Phaser_RenderTexture.prototype.renderRawXY = function (displayObject, x, y, clear) {};

var Phaser_Tile = function (layer, index, x, y, width, height) {};
Phaser_Tile.prototype.flipped = new Boolean();
Phaser_Tile.prototype.collideUp = new Boolean();
Phaser_Tile.prototype.collideLeft = new Boolean();
Phaser_Tile.prototype.layer = new Object();
Phaser_Tile.prototype.faceRight = new Boolean();
Phaser_Tile.prototype.faceLeft = new Boolean();
Phaser_Tile.prototype.top = new Number();
Phaser_Tile.prototype.scanned = new Boolean();
Phaser_Tile.prototype.alpha = new Number();
Phaser_Tile.prototype.collisionCallback = new Function();
Phaser_Tile.prototype.faceTop = new Boolean();
Phaser_Tile.prototype.height = new Number();
Phaser_Tile.prototype.collides = new Boolean();
Phaser_Tile.prototype.faceBottom = new Boolean();
Phaser_Tile.prototype.bottom = new Number();
Phaser_Tile.prototype.rotation = new Number();
Phaser_Tile.prototype.canCollide = new Boolean();
Phaser_Tile.prototype.index = new Number();
Phaser_Tile.prototype.collideDown = new Boolean();
Phaser_Tile.prototype.right = new Number();
Phaser_Tile.prototype.collisionCallbackContext = new Object();
Phaser_Tile.prototype.collideRight = new Boolean();
Phaser_Tile.prototype.left = new Number();
Phaser_Tile.prototype.x = new Number();
Phaser_Tile.prototype.width = new Number();
Phaser_Tile.prototype.y = new Number();
Phaser_Tile.prototype.properties = new Object();
Phaser_Tile.prototype.intersects = function (x, y, right, bottom) {};
Phaser_Tile.prototype.resetCollision = function () {};
Phaser_Tile.prototype.copy = function (tile) {};
Phaser_Tile.prototype.setCollisionCallback = function (callback, context) {};
Phaser_Tile.prototype.destroy = function () {};
Phaser_Tile.prototype.setCollision = function (left, right, up, down) {};
Phaser_Tile.prototype.isInteresting = function (collides, faces) { return new Boolean(); };
Phaser_Tile.prototype.containsPoint = function (x, y) { return new Boolean(); };

var Phaser_FrameData = function () {};
Phaser_FrameData.prototype.total = new Number();
Phaser_FrameData.prototype._frames = new Array();
Phaser_FrameData.prototype._frameNames = new Array();
Phaser_FrameData.prototype.getFrameByName = function (name) { return new Phaser_Frame(); };
Phaser_FrameData.prototype.getFrames = function (frames, useNumericIndex, output) { return new Array(); };
Phaser_FrameData.prototype.getFrameIndexes = function (frames, useNumericIndex, output) { return new Array(); };
Phaser_FrameData.prototype.checkFrameName = function (name) { return new Boolean(); };
Phaser_FrameData.prototype.getFrame = function (index) { return new Phaser_Frame(); };
Phaser_FrameData.prototype.getFrameRange = function (start, end, output) { return new Array(); };
Phaser_FrameData.prototype.clone = function () { return new Phaser_FrameData(); };
Phaser_FrameData.prototype.addFrame = function (frame) { return new Phaser_Frame(); };

var Phaser_Touch = function (game) {};
Phaser_Touch.prototype.game = new Phaser_Game();
Phaser_Touch.prototype.touchStartCallback = new Function();
Phaser_Touch.prototype.enabled = new Boolean();
Phaser_Touch.prototype.touchLockCallbacks = new Array();
Phaser_Touch.prototype.touchEnterCallback = new Function();
Phaser_Touch.prototype._onTouchMove = new Function();
Phaser_Touch.prototype.touchMoveCallback = new Function();
Phaser_Touch.prototype.event = new TouchEvent();
Phaser_Touch.prototype.preventDefault = new Boolean();
Phaser_Touch.prototype._onTouchStart = new Function();
Phaser_Touch.prototype._onTouchEnd = new Function();
Phaser_Touch.prototype.touchLeaveCallback = new Function();
Phaser_Touch.prototype.callbackContext = new Object();
Phaser_Touch.prototype._onTouchCancel = new Function();
Phaser_Touch.prototype._onTouchEnter = new Function();
Phaser_Touch.prototype._onTouchLeave = new Function();
Phaser_Touch.prototype.touchCancelCallback = new Function();
Phaser_Touch.prototype.touchEndCallback = new Function();
Phaser_Touch.prototype.onTouchMove = function (event) {};
Phaser_Touch.prototype.consumeTouchMove = function () {};
Phaser_Touch.prototype.addTouchLockCallback = function (callback, context) {};
Phaser_Touch.prototype.onTouchEnd = function (event) {};
Phaser_Touch.prototype.onTouchStart = function (event) {};
Phaser_Touch.prototype.onTouchEnter = function (event) {};
Phaser_Touch.prototype.start = function () {};
Phaser_Touch.prototype.onTouchLeave = function (event) {};
Phaser_Touch.prototype.onTouchCancel = function (event) {};
Phaser_Touch.prototype.stop = function () {};
Phaser_Touch.prototype.removeTouchLockCallback = function (callback, context) { return new Boolean(); };

var Phaser_Component_Smoothed = function () {};
Phaser_Component_Smoothed.prototype.smoothed = new Boolean();

var Phaser_Timer = function (game, autoDestroy) {};
Phaser_Timer.HALF = new Number();
Phaser_Timer.QUARTER = new Number();
Phaser_Timer.MINUTE = new Number();
Phaser_Timer.SECOND = new Number();
Phaser_Timer.prototype.next = new Number();
Phaser_Timer.prototype.game = new Phaser_Game();
Phaser_Timer.prototype.paused = new Boolean();
Phaser_Timer.prototype._pauseStarted = new Number();
Phaser_Timer.prototype._diff = new Number();
Phaser_Timer.prototype.running = new Boolean();
Phaser_Timer.prototype.elapsed = new Number();
Phaser_Timer.prototype.duration = new Number();
Phaser_Timer.prototype.seconds = new Number();
Phaser_Timer.prototype.expired = new Boolean();
Phaser_Timer.prototype._newTick = new Number();
Phaser_Timer.prototype.nextTick = new Number();
Phaser_Timer.prototype._codePaused = new Boolean();
Phaser_Timer.prototype.events = new Array__Phaser_TimerEvent_();
Phaser_Timer.prototype.autoDestroy = new Boolean();
Phaser_Timer.prototype.ms = new Number();
Phaser_Timer.prototype.onComplete = new Phaser_Signal();
Phaser_Timer.prototype.length = new Number();
Phaser_Timer.prototype._i = new Number();
Phaser_Timer.prototype.timeCap = new Number();
Phaser_Timer.prototype._marked = new Number();
Phaser_Timer.prototype._started = new Number();
Phaser_Timer.prototype._len = new Number();
Phaser_Timer.prototype._now = new Number();
Phaser_Timer.prototype._pauseTotal = new Number();
Phaser_Timer.prototype._pause = function () {};
Phaser_Timer.prototype.update = function (time) { return new Boolean(); };
Phaser_Timer.prototype.remove = function (event) {};
Phaser_Timer.prototype.removeAll = function () {};
Phaser_Timer.prototype.loop = function (delay, callback, callbackContext, arguments) { return new Phaser_TimerEvent(); };
Phaser_Timer.prototype.sortHandler = function () {};
Phaser_Timer.prototype.repeat = function (delay, repeatCount, callback, callbackContext, arguments) { return new Phaser_TimerEvent(); };
Phaser_Timer.prototype.create = function (delay, loop, repeatCount, callback, callbackContext, arguments) { return new Phaser_TimerEvent(); };
Phaser_Timer.prototype.order = function () {};
Phaser_Timer.prototype.add = function (delay, callback, callbackContext, arguments) { return new Phaser_TimerEvent(); };
Phaser_Timer.prototype.resume = function () {};
Phaser_Timer.prototype.clearPendingEvents = function () {};
Phaser_Timer.prototype.start = function (delay) {};
Phaser_Timer.prototype.destroy = function () {};
Phaser_Timer.prototype.pause = function () {};
Phaser_Timer.prototype._resume = function () {};
Phaser_Timer.prototype.adjustEvents = function () {};
Phaser_Timer.prototype.stop = function (clearEvents) {};

var Phaser_AnimationParser = function () {};
Phaser_AnimationParser.prototype.JSONData = function (game, json) { return new Phaser_FrameData(); };
Phaser_AnimationParser.prototype.XMLData = function (game, xml) { return new Phaser_FrameData(); };
Phaser_AnimationParser.prototype.spriteSheet = function (game, key, frameWidth, frameHeight, frameMax, margin, spacing) { return new Phaser_FrameData(); };
Phaser_AnimationParser.prototype.JSONDataHash = function (game, json) { return new Phaser_FrameData(); };

var Phaser_Line = function (x1, y1, x2, y2) {};
Phaser_Line.prototype.normalX = new Number();
Phaser_Line.prototype.normalY = new Number();
Phaser_Line.prototype.perpSlope = new Number();
Phaser_Line.prototype.type = new Number();
Phaser_Line.prototype.top = new Number();
Phaser_Line.prototype.angle = new Number();
Phaser_Line.prototype.end = new Phaser_Point();
Phaser_Line.prototype.height = new Number();
Phaser_Line.prototype.bottom = new Number();
Phaser_Line.prototype.start = new Phaser_Point();
Phaser_Line.prototype.length = new Number();
Phaser_Line.prototype.normalAngle = new Number();
Phaser_Line.prototype.right = new Number();
Phaser_Line.prototype.slope = new Number();
Phaser_Line.prototype.left = new Number();
Phaser_Line.prototype.x = new Number();
Phaser_Line.prototype.width = new Number();
Phaser_Line.prototype.y = new Number();
Phaser_Line.prototype.rotate = function (angle, asDegrees) { return new Phaser_Line(); };
Phaser_Line.prototype.intersects = function (line, asSegment, result) { return new Phaser_Point(); };
Phaser_Line.prototype.coordinatesOnLine = function (stepRate, results) { return new Array(); };
Phaser_Line.prototype.random = function (out) { return new Phaser_Point(); };
Phaser_Line.prototype.reflect = function (line) { return new Number(); };
Phaser_Line.prototype.pointOnSegment = function (x, y) { return new Boolean(); };
Phaser_Line.prototype.centerOn = function (x, y) { return new Phaser_Line(); };
Phaser_Line.prototype.midPoint = function (out) { return new Phaser_Point(); };
Phaser_Line.prototype.fromSprite = function (startSprite, endSprite, useCenter) { return new Phaser_Line(); };
Phaser_Line.prototype.fromAngle = function (x, y, angle, length) { return new Phaser_Line(); };
Phaser_Line.prototype.intersectsPoints = function (a, b, e, f, asSegment, result) { return new Phaser_Point(); };
Phaser_Line.prototype.pointOnLine = function (x, y) { return new Boolean(); };
Phaser_Line.prototype.rotateAround = function (angle, asDegrees) { return new Phaser_Line(); };
Phaser_Line.prototype.clone = function (output) { return new Phaser_Line(); };
Phaser_Line.prototype.setTo = function (x1, y1, x2, y2) { return new Phaser_Line(); };

var Phaser_Physics_P2_FixtureList = function (list) {};
Phaser_Physics_P2_FixtureList.prototype.setSensor = function (value, fixtureKey) {};
Phaser_Physics_P2_FixtureList.prototype.flatten = function (array) {};
Phaser_Physics_P2_FixtureList.prototype.init = function () {};
Phaser_Physics_P2_FixtureList.prototype.setMask = function (bit, fixtureKey) {};
Phaser_Physics_P2_FixtureList.prototype.setCategory = function (bit, fixtureKey) {};
Phaser_Physics_P2_FixtureList.prototype.getGroup = function (groupID) {};
Phaser_Physics_P2_FixtureList.prototype.parse = function () {};
Phaser_Physics_P2_FixtureList.prototype.setMaterial = function (material, fixtureKey) {};
Phaser_Physics_P2_FixtureList.prototype.getFixtures = function (keys) {};
Phaser_Physics_P2_FixtureList.prototype.getFixtureByKey = function (key) {};

var Phaser_Component_BringToTop = function () {};
Phaser_Component_BringToTop.prototype.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_Component_BringToTop.prototype.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_Component_BringToTop.prototype.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_Component_BringToTop.prototype.moveUp = function () { return new PIXI_DisplayObject(); };

var Phaser_Animation = function (game, parent, name, frameData, frames, frameRate, loop, loop) {};
Phaser_Animation.prototype._frameIndex = new Number();
Phaser_Animation.prototype.game = new Phaser_Game();
Phaser_Animation.prototype.paused = new Boolean();
Phaser_Animation.prototype.speed = new Number();
Phaser_Animation.prototype._frameData = new Phaser_FrameData();
Phaser_Animation.prototype._pauseStartTime = new Boolean();
Phaser_Animation.prototype._parent = new Phaser_Sprite();
Phaser_Animation.prototype.loopCount = new Number();
Phaser_Animation.prototype.onStart = new Phaser_Signal();
Phaser_Animation.prototype.frameTotal = new Number();
Phaser_Animation.prototype.loop = new Boolean();
Phaser_Animation.prototype.currentFrame = new Phaser_Frame();
Phaser_Animation.prototype.isPaused = new Boolean();
Phaser_Animation.prototype.isPlaying = new Boolean();
Phaser_Animation.prototype._frameDiff = new Number();
Phaser_Animation.prototype.onComplete = new Phaser_Signal();
Phaser_Animation.prototype.isFinished = new Boolean();
Phaser_Animation.prototype.delay = new Number();
Phaser_Animation.prototype._frameSkip = new Number();
Phaser_Animation.prototype.enableUpdate = new Boolean();
Phaser_Animation.prototype._frames = new Array();
Phaser_Animation.prototype.name = new String();
Phaser_Animation.prototype.killOnComplete = new Boolean();
Phaser_Animation.prototype.onUpdate = new Phaser_Signal();
Phaser_Animation.prototype.onLoop = new Phaser_Signal();
Phaser_Animation.prototype.frame = new Number();
Phaser_Animation.prototype.play = function (frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_Animation.prototype.next = function (quantity) {};
Phaser_Animation.prototype.update = function () {};
Phaser_Animation.prototype.onPause = function () {};
Phaser_Animation.prototype.setFrame = function (frameId, useLocalFrameIndex) {};
Phaser_Animation.prototype.updateCurrentFrame = function (signalUpdate, fromPlay) { return new Boolean(); };
Phaser_Animation.prototype.generateFrameNames = function (prefix, start, stop, suffix, zeroPad) { return new Array__string_(); };
Phaser_Animation.prototype.previous = function (quantity) {};
Phaser_Animation.prototype.restart = function () {};
Phaser_Animation.prototype.destroy = function () {};
Phaser_Animation.prototype.onResume = function () {};
Phaser_Animation.prototype.stop = function (resetFrame, dispatchComplete) {};
Phaser_Animation.prototype.complete = function () {};
Phaser_Animation.prototype.updateFrameData = function (frameData) {};

var Phaser_Physics_P2_InversePointProxy = function (world, destination) {};
Phaser_Physics_P2_InversePointProxy.prototype.x = new Number();
Phaser_Physics_P2_InversePointProxy.prototype.y = new Number();
Phaser_Physics_P2_InversePointProxy.prototype.mx = new Number();
Phaser_Physics_P2_InversePointProxy.prototype.my = new Number();

var Phaser_Component_Crop = function () {};
Phaser_Component_Crop.prototype.cropRect = new Phaser_Rectangle();
Phaser_Component_Crop.prototype._crop = new Phaser_Rectangle();
Phaser_Component_Crop.prototype.updateCrop = function () {};
Phaser_Component_Crop.prototype.crop = function (rect, copy) {};

var Phaser_Easing_Circular = function () {};
Phaser_Easing_Circular.prototype.In = function (k) { return new Number(); };
Phaser_Easing_Circular.prototype.InOut = function (k) { return new Number(); };
Phaser_Easing_Circular.prototype.Out = function (k) { return new Number(); };

var Phaser_Component_LifeSpan = function () {};
Phaser_Component_LifeSpan.prototype.alive = new Boolean();
Phaser_Component_LifeSpan.prototype.lifespan = new Number();
Phaser_Component_LifeSpan.prototype.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Component_LifeSpan.prototype.kill = function () { return new PIXI_DisplayObject(); };
Phaser_Component_LifeSpan.prototype.preUpdate = function () {};

var Phaser_SinglePad = function (game, padParent) {};
Phaser_SinglePad.prototype.game = new Phaser_Game();
Phaser_SinglePad.prototype.onUpCallback = new Function();
Phaser_SinglePad.prototype.deadZone = new Number();
Phaser_SinglePad.prototype.padParent = new Phaser_Gamepad();
Phaser_SinglePad.prototype._axesLen = new Number();
Phaser_SinglePad.prototype._prevTimestamp = new Number();
Phaser_SinglePad.prototype.index = new Number();
Phaser_SinglePad.prototype.onFloatCallback = new Function();
Phaser_SinglePad.prototype.callbackContext = new Object();
Phaser_SinglePad.prototype._rawPad = new Object();
Phaser_SinglePad.prototype._axes = new Array();
Phaser_SinglePad.prototype.connected = new Boolean();
Phaser_SinglePad.prototype._buttons = new Array();
Phaser_SinglePad.prototype.onDownCallback = new Function();
Phaser_SinglePad.prototype.onDisconnectCallback = new Function();
Phaser_SinglePad.prototype.onConnectCallback = new Function();
Phaser_SinglePad.prototype._buttonsLen = new Number();
Phaser_SinglePad.prototype.onAxisCallback = new Function();
Phaser_SinglePad.prototype.disconnect = function () {};
Phaser_SinglePad.prototype.buttonValue = function (buttonCode) { return new Number(); };
Phaser_SinglePad.prototype.axis = function (axisCode) { return new Number(); };
Phaser_SinglePad.prototype.isDown = function (buttonCode) { return new Boolean(); };
Phaser_SinglePad.prototype.getButton = function (buttonCode) { return new Phaser_DeviceButton(); };
Phaser_SinglePad.prototype.processButtonDown = function (buttonCode, value) {};
Phaser_SinglePad.prototype.isUp = function (buttonCode) { return new Boolean(); };
Phaser_SinglePad.prototype.justReleased = function (buttonCode, duration) { return new Boolean(); };
Phaser_SinglePad.prototype.connect = function (rawPad) {};
Phaser_SinglePad.prototype.justPressed = function (buttonCode, duration) { return new Boolean(); };
Phaser_SinglePad.prototype.addCallbacks = function (context, callbacks) {};
Phaser_SinglePad.prototype.processAxisChange = function (axisState) {};
Phaser_SinglePad.prototype.destroy = function () {};
Phaser_SinglePad.prototype.pollStatus = function () {};
Phaser_SinglePad.prototype.processButtonUp = function (buttonCode, value) {};
Phaser_SinglePad.prototype.processButtonFloat = function (buttonCode, value) {};
Phaser_SinglePad.prototype.reset = function () {};

var Phaser_ArraySet = function (list) {};
Phaser_ArraySet.prototype.next = new Object();
Phaser_ArraySet.prototype.list = new Array__any_();
Phaser_ArraySet.prototype.total = new Number();
Phaser_ArraySet.prototype.position = new Number();
Phaser_ArraySet.prototype.first = new Object();
Phaser_ArraySet.prototype.add = function (item) { return new Object(); };
Phaser_ArraySet.prototype.getIndex = function (item) { return new Number(); };
Phaser_ArraySet.prototype.getByKey = function (property, value) { return new Object(); };
Phaser_ArraySet.prototype.remove = function (item) { return new Object(); };
Phaser_ArraySet.prototype.callAll = function (key, parameter) {};
Phaser_ArraySet.prototype.removeAll = function (destroy) {};
Phaser_ArraySet.prototype.exists = function (item) { return new Boolean(); };
Phaser_ArraySet.prototype.reset = function () {};
Phaser_ArraySet.prototype.setAll = function (key, value) {};

var WebGLGraphicsData = function () {};

var Phaser_Easing_Linear = function () {};
Phaser_Easing_Linear.prototype.None = function (k) { return new Number(); };

var Phaser_Component_Delta = function () {};
Phaser_Component_Delta.prototype.deltaZ = new Number();
Phaser_Component_Delta.prototype.deltaX = new Number();
Phaser_Component_Delta.prototype.deltaY = new Number();

var Phaser_Pointer = function (game, id) {};
Phaser_Pointer.MIDDLE_BUTTON = new Number();
Phaser_Pointer.LEFT_BUTTON = new Number();
Phaser_Pointer.NO_BUTTON = new Number();
Phaser_Pointer.ERASER_BUTTON = new Number();
Phaser_Pointer.RIGHT_BUTTON = new Number();
Phaser_Pointer.BACK_BUTTON = new Number();
Phaser_Pointer.FORWARD_BUTTON = new Number();
Phaser_Pointer.prototype.rawMovementY = new Number();
Phaser_Pointer.prototype.rawMovementX = new Number();
Phaser_Pointer.prototype.isMouse = new Boolean();
Phaser_Pointer.prototype.type = new Number();
Phaser_Pointer.prototype._clickTrampolines = new Array__object_();
Phaser_Pointer.prototype._history = new Array();
Phaser_Pointer.prototype.id = new Number();
Phaser_Pointer.prototype.identifier = new Number();
Phaser_Pointer.prototype.timeUp = new Number();
Phaser_Pointer.prototype._nextDrop = new Number();
Phaser_Pointer.prototype.clientY = new Number();
Phaser_Pointer.prototype.clientX = new Number();
Phaser_Pointer.prototype.timeDown = new Number();
Phaser_Pointer.prototype.active = new Boolean();
Phaser_Pointer.prototype._trampolineTargetObject = new Object();
Phaser_Pointer.prototype.totalTouches = new Number();
Phaser_Pointer.prototype.position = new Phaser_Point();
Phaser_Pointer.prototype.circle = new Phaser_Circle();
Phaser_Pointer.prototype.screenX = new Number();
Phaser_Pointer.prototype.screenY = new Number();
Phaser_Pointer.prototype.game = new Phaser_Game();
Phaser_Pointer.prototype.targetObject = new Object();
Phaser_Pointer.prototype.msSinceLastClick = new Number();
Phaser_Pointer.prototype.isDown = new Boolean();
Phaser_Pointer.prototype.button = new Object();
Phaser_Pointer.prototype.middleButton = new Phaser_DeviceButton();
Phaser_Pointer.prototype.duration = new Number();
Phaser_Pointer.prototype._stateReset = new Boolean();
Phaser_Pointer.prototype.leftButton = new Phaser_DeviceButton();
Phaser_Pointer.prototype.isUp = new Boolean();
Phaser_Pointer.prototype.previousTapTime = new Number();
Phaser_Pointer.prototype.backButton = new Phaser_DeviceButton();
Phaser_Pointer.prototype.withinGame = new Boolean();
Phaser_Pointer.prototype.dirty = new Boolean();
Phaser_Pointer.prototype.movementY = new Number();
Phaser_Pointer.prototype.movementX = new Number();
Phaser_Pointer.prototype.positionDown = new Phaser_Point();
Phaser_Pointer.prototype.target = new Object();
Phaser_Pointer.prototype.pointerId = new Number();
Phaser_Pointer.prototype._holdSent = new Boolean();
Phaser_Pointer.prototype.positionUp = new Phaser_Point();
Phaser_Pointer.prototype.forwardButton = new Phaser_DeviceButton();
Phaser_Pointer.prototype.x = new Number();
Phaser_Pointer.prototype.exists = new Boolean();
Phaser_Pointer.prototype.y = new Number();
Phaser_Pointer.prototype.rightButton = new Phaser_DeviceButton();
Phaser_Pointer.prototype.eraserButton = new Phaser_DeviceButton();
Phaser_Pointer.prototype.pageY = new Number();
Phaser_Pointer.prototype.pageX = new Number();
Phaser_Pointer.prototype.processButtonsUp = function (buttons, event) {};
Phaser_Pointer.prototype.leave = function (event) {};
Phaser_Pointer.prototype.processButtonsDown = function (buttons, event) {};
Phaser_Pointer.prototype.addClickTrampoline = function (name, callback, callbackContext, callbackArgs) {};
Phaser_Pointer.prototype.stop = function (event) {};
Phaser_Pointer.prototype.reset = function () {};
Phaser_Pointer.prototype.updateButtons = function (event) {};
Phaser_Pointer.prototype.resetButtons = function () {};
Phaser_Pointer.prototype.update = function () {};
Phaser_Pointer.prototype.processInteractiveObjects = function (fromClick) { return new Boolean(); };
Phaser_Pointer.prototype.resetMovement = function () {};
Phaser_Pointer.prototype.justReleased = function (duration) { return new Boolean(); };
Phaser_Pointer.prototype.justPressed = function (duration) { return new Boolean(); };
Phaser_Pointer.prototype.move = function (event, fromClick) {};
Phaser_Pointer.prototype.start = function (event) {};
Phaser_Pointer.prototype.processClickTrampolines = function () {};

var Phaser_Physics_P2_CollisionGroup = function (bitmask) {};
Phaser_Physics_P2_CollisionGroup.prototype.mask = new Number();

var Phaser_Physics_Arcade = function (game) {};
Phaser_Physics_Arcade.BOTTOM_TOP = new Number();
Phaser_Physics_Arcade.RIGHT_LEFT = new Number();
Phaser_Physics_Arcade.SORT_NONE = new Number();
Phaser_Physics_Arcade.TOP_BOTTOM = new Number();
Phaser_Physics_Arcade.LEFT_RIGHT = new Number();
Phaser_Physics_Arcade.prototype.forceX = new Boolean();
Phaser_Physics_Arcade.prototype.sortDirection = new Number();
Phaser_Physics_Arcade.prototype.maxObjects = new Number();
Phaser_Physics_Arcade.prototype.isPaused = new Boolean();
Phaser_Physics_Arcade.prototype.checkCollision = new Object();
Phaser_Physics_Arcade.prototype.maxLevels = new Number();
Phaser_Physics_Arcade.prototype.bounds = new Phaser_Rectangle();
Phaser_Physics_Arcade.prototype.skipQuadTree = new Boolean();
Phaser_Physics_Arcade.prototype.game = new Phaser_Game();
Phaser_Physics_Arcade.prototype.quadTree = new Phaser_QuadTree();
Phaser_Physics_Arcade.prototype.OVERLAP_BIAS = new Number();
Phaser_Physics_Arcade.prototype.gravity = new Phaser_Point();
Phaser_Physics_Arcade.prototype._total = new Number();
Phaser_Physics_Arcade.prototype.collideSpriteVsTilemapLayer = function (sprite, tilemapLayer, collideCallback, processCallback, callbackContext, overlapOnly) {};
Phaser_Physics_Arcade.prototype.separate = function (body1, body2, processCallback, callbackContext, overlapOnly) { return new Boolean(); };
Phaser_Physics_Arcade.prototype.distanceBetween = function (source, target) { return new Number(); };
Phaser_Physics_Arcade.prototype.angleBetween = function (source, target) { return new Number(); };
Phaser_Physics_Arcade.prototype.enableBody = function (object) {};
Phaser_Physics_Arcade.prototype.enable = function (object, children) {};
Phaser_Physics_Arcade.prototype.collideHandler = function (object1, object2, collideCallback, processCallback, callbackContext, overlapOnly) {};
Phaser_Physics_Arcade.prototype.angleToPointer = function (displayObject, pointer) { return new Number(); };
Phaser_Physics_Arcade.prototype.accelerateToPointer = function (displayObject, pointer, speed, xSpeedMax, ySpeedMax) { return new Number(); };
Phaser_Physics_Arcade.prototype.sortTopBottom = function (a, b) { return new Number(); };
Phaser_Physics_Arcade.prototype.collide = function (object1, object2, collideCallback, processCallback, callbackContext) { return new Boolean(); };
Phaser_Physics_Arcade.prototype.sort = function (group, sortDirection) {};
Phaser_Physics_Arcade.prototype.sortRightLeft = function (a, b) { return new Number(); };
Phaser_Physics_Arcade.prototype.updateMotion = function (The) {};
Phaser_Physics_Arcade.prototype.separateTile = function (body, tile) { return new Boolean(); };
Phaser_Physics_Arcade.prototype.overlap = function (object1, object2, overlapCallback, processCallback, callbackContext) { return new Boolean(); };
Phaser_Physics_Arcade.prototype.collideGroupVsTilemapLayer = function (group, tilemapLayer, collideCallback, processCallback, callbackContext, overlapOnly) {};
Phaser_Physics_Arcade.prototype.collideGroupVsGroup = function (group1, group2, collideCallback, processCallback, callbackContext, overlapOnly) {};
Phaser_Physics_Arcade.prototype.processTileSeparationX = function (body, x) {};
Phaser_Physics_Arcade.prototype.processTileSeparationY = function (body, y) {};
Phaser_Physics_Arcade.prototype.getObjectsAtLocation = function (x, y, group, callback, callbackContext, callbackArg) { return new Array__PIXI_DisplayObject_(); };
Phaser_Physics_Arcade.prototype.intersects = function (body1, body2) { return new Boolean(); };
Phaser_Physics_Arcade.prototype.moveToObject = function (displayObject, destination, speed, maxTime) { return new Number(); };
Phaser_Physics_Arcade.prototype.distanceToXY = function (displayObject, x, y) { return new Number(); };
Phaser_Physics_Arcade.prototype.getObjectsUnderPointer = function (pointer, group, callback, callbackContext) { return new Array__PIXI_DisplayObject_(); };
Phaser_Physics_Arcade.prototype.accelerateToObject = function (displayObject, destination, speed, xSpeedMax, ySpeedMax) { return new Number(); };
Phaser_Physics_Arcade.prototype.computeVelocity = function (axis, body, velocity, acceleration, drag, max) { return new Number(); };
Phaser_Physics_Arcade.prototype.moveToPointer = function (displayObject, speed, pointer, maxTime) { return new Number(); };
Phaser_Physics_Arcade.prototype.collideSpriteVsSprite = function (sprite1, sprite2, collideCallback, processCallback, callbackContext, overlapOnly) { return new Boolean(); };
Phaser_Physics_Arcade.prototype.sortLeftRight = function (a, b) { return new Number(); };
Phaser_Physics_Arcade.prototype.Body = function (sprite) {};
Phaser_Physics_Arcade.prototype.separateX = function (body1, body2, overlapOnly) { return new Boolean(); };
Phaser_Physics_Arcade.prototype.separateY = function (body1, body2, overlapOnly) { return new Boolean(); };
Phaser_Physics_Arcade.prototype.distanceToPointer = function (displayObject, pointer) { return new Number(); };
Phaser_Physics_Arcade.prototype.velocityFromAngle = function (angle, speed, point) { return new Phaser_Point(); };
Phaser_Physics_Arcade.prototype.moveToXY = function (displayObject, x, y, speed, maxTime) { return new Number(); };
Phaser_Physics_Arcade.prototype.setBounds = function (x, y, width, height) {};
Phaser_Physics_Arcade.prototype.setBoundsToWorld = function () {};
Phaser_Physics_Arcade.prototype.sortBottomTop = function (a, b) { return new Number(); };
Phaser_Physics_Arcade.prototype.accelerateToXY = function (displayObject, x, y, speed, xSpeedMax, ySpeedMax) { return new Number(); };
Phaser_Physics_Arcade.prototype.collideSpriteVsGroup = function (sprite, group, collideCallback, processCallback, callbackContext, overlapOnly) {};
Phaser_Physics_Arcade.prototype.tileCheckX = function (body, tile) { return new Number(); };
Phaser_Physics_Arcade.prototype.tileCheckY = function (body, tile) { return new Number(); };
Phaser_Physics_Arcade.prototype.velocityFromRotation = function (rotation, speed, point) { return new Phaser_Point(); };
Phaser_Physics_Arcade.prototype.accelerationFromRotation = function (rotation, speed, point) { return new Phaser_Point(); };
Phaser_Physics_Arcade.prototype.collideGroupVsSelf = function (group, collideCallback, processCallback, callbackContext, overlapOnly) { return new Boolean(); };
Phaser_Physics_Arcade.prototype.angleToXY = function (displayObject, x, y) { return new Number(); };

var Phaser_ImageCollection = function (name, firstgid, width, height, margin, spacing, properties) {};
Phaser_ImageCollection.prototype.imageWidth = new Number();
Phaser_ImageCollection.prototype.imageSpacing = new Number();
Phaser_ImageCollection.prototype.images = new Array();
Phaser_ImageCollection.prototype.total = new Number();
Phaser_ImageCollection.prototype.name = new String();
Phaser_ImageCollection.prototype.firstgid = new Number();
Phaser_ImageCollection.prototype.imageMarge = new Number();
Phaser_ImageCollection.prototype.imageHeight = new Number();
Phaser_ImageCollection.prototype.properties = new Object();
Phaser_ImageCollection.prototype.addImage = function (gid, image) {};
Phaser_ImageCollection.prototype.containsImageIndex = function (imageIndex) { return new Boolean(); };

var Phaser_Component_InWorld = function () {};
Phaser_Component_InWorld.prototype.outOfBoundsKill = new Boolean();
Phaser_Component_InWorld.prototype._outOfBoundsFired = new Boolean();
Phaser_Component_InWorld.prototype.checkWorldBounds = new Boolean();
Phaser_Component_InWorld.prototype.inWorld = new Boolean();
Phaser_Component_InWorld.prototype.preUpdate = function () {};

var Phaser_Physics_Ninja = function (game) {};
Phaser_Physics_Ninja.prototype.game = new Phaser_Game();
Phaser_Physics_Ninja.prototype.quadTree = new Phaser_QuadTree();
Phaser_Physics_Ninja.prototype.maxObjects = new Number();
Phaser_Physics_Ninja.prototype.maxLevels = new Number();
Phaser_Physics_Ninja.prototype.gravity = new Number();
Phaser_Physics_Ninja.prototype.bounds = new Phaser_Rectangle();
Phaser_Physics_Ninja.prototype.time = new Phaser_Time();
Phaser_Physics_Ninja.prototype.separate = function (body1, body2) { return new Boolean(); };
Phaser_Physics_Ninja.prototype.enableTile = function (object, id, children) {};
Phaser_Physics_Ninja.prototype.convertTilemap = function (map, layer, slopeMap) { return new Array(); };
Phaser_Physics_Ninja.prototype.collideSpriteVsSprite = function () {};
Phaser_Physics_Ninja.prototype.enableBody = function (object) {};
Phaser_Physics_Ninja.prototype.enable = function (object, type, id, radius, children) {};
Phaser_Physics_Ninja.prototype.collideHandler = function (object1, object2, collideCallback, processCallback, callbackContext, overlapOnly) {};
Phaser_Physics_Ninja.prototype.Body = function (system, sprite, type, id, radius, x, y, width, height) {};
Phaser_Physics_Ninja.prototype.Circle = function (body, x, y, radius) {};
Phaser_Physics_Ninja.prototype.Tile = function (body, x, y, width, height, type) {};
Phaser_Physics_Ninja.prototype.collide = function (object1, object2, collideCallback, processCallback, callbackContext) { return new Boolean(); };
Phaser_Physics_Ninja.prototype.enableAABB = function (object, children) {};
Phaser_Physics_Ninja.prototype.setBounds = function (x, y, width, height) {};
Phaser_Physics_Ninja.prototype.setBoundsToWorld = function () {};
Phaser_Physics_Ninja.prototype.overlap = function (object1, object2, overlapCallback, processCallback, callbackContext) { return new Boolean(); };
Phaser_Physics_Ninja.prototype.collideSpriteVsGroup = function () {};
Phaser_Physics_Ninja.prototype.enableCircle = function (object, radius, children) {};
Phaser_Physics_Ninja.prototype.collideGroupVsSelf = function () {};
Phaser_Physics_Ninja.prototype.collideGroupVsGroup = function () {};
Phaser_Physics_Ninja.prototype.AABB = function (body, x, y, width, height) {};
Phaser_Physics_Ninja.prototype.clearTilemapLayerBodies = function (map, layer) {};

var Phaser_Physics = function (game, physicsConfig) {};
Phaser_Physics.NINJA = new Number();
Phaser_Physics.MATTERJS = new Number();
Phaser_Physics.P2JS = new Number();
Phaser_Physics.ARCADE = new Number();
Phaser_Physics.BOX2D = new Number();
Phaser_Physics.CHIPMUNK = new Number();
Phaser_Physics.prototype.game = new Phaser_Game();
Phaser_Physics.prototype.p2 = new Phaser_Physics_P2();
Phaser_Physics.prototype.matter = new Phaser_Physics_Matter();
Phaser_Physics.prototype.chipmunk = new Phaser_Physics_Chipmunk();
Phaser_Physics.prototype.box2d = new Phaser_Physics_Box2D();
Phaser_Physics.prototype.arcade = new Phaser_Physics_Arcade();
Phaser_Physics.prototype.ninja = new Phaser_Physics_Ninja();
Phaser_Physics.prototype.config = new Object();
Phaser_Physics.prototype.update = function () {};
Phaser_Physics.prototype.Ninja = function (game) {};
Phaser_Physics.prototype.enable = function (object, system, debug) {};
Phaser_Physics.prototype.P2 = function (game, config) {};
Phaser_Physics.prototype.clear = function () {};
Phaser_Physics.prototype.parseConfig = function () {};
Phaser_Physics.prototype.destroy = function () {};
Phaser_Physics.prototype.Arcade = function (game) {};
Phaser_Physics.prototype.setBoundsToWorld = function (left, right, top, bottom, setCollisionGroup) {};
Phaser_Physics.prototype.setWorldMaterial = function (material, left, right, top, bottom) {};
Phaser_Physics.prototype.reset = function () {};
Phaser_Physics.prototype.startSystem = function (system) {};
Phaser_Physics.prototype.preUpdate = function () {};

var Phaser_Component_Animation = function () {};
Phaser_Component_Animation.prototype.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };

var Phaser_TilemapParser = function () {};
Phaser_TilemapParser.INSERT_NULL = new Boolean();
Phaser_TilemapParser.prototype.getEmptyData = function () { return new Object(); };
Phaser_TilemapParser.prototype.parseJSON = function (json) { return new Object(); };
Phaser_TilemapParser.prototype.parse = function (game, key, tileWidth, tileHeight, width, height) { return new Object(); };
Phaser_TilemapParser.prototype.parseCSV = function (data, tileWidth, tileHeight) { return new Object(); };

var Phaser_LoaderParser = function () {};
Phaser_LoaderParser.prototype.jsonBitmapFont = function (json, baseTexture, xSpacing, ySpacing) { return new Object(); };
Phaser_LoaderParser.prototype.finalizeBitmapFont = function (baseTexture, bitmapFontData) { return new Object(); };
Phaser_LoaderParser.prototype.bitmapFont = function (xml, baseTexture, xSpacing, ySpacing) { return new Object(); };
Phaser_LoaderParser.prototype.xmlBitmapFont = function (xml, baseTexture, xSpacing, ySpacing) { return new Object(); };

var Phaser_Matrix = function (a, b, c, d, tx, ty) {};
Phaser_Matrix.prototype.a = new Number();
Phaser_Matrix.prototype.b = new Number();
Phaser_Matrix.prototype.c = new Number();
Phaser_Matrix.prototype.d = new Number();
Phaser_Matrix.prototype.tx = new Number();
Phaser_Matrix.prototype.ty = new Number();
Phaser_Matrix.prototype.type = new Number();
Phaser_Matrix.prototype.rotate = function (angle) { return new Phaser_Matrix(); };
Phaser_Matrix.prototype.apply = function (pos, newPos) { return new Phaser_Point(); };
Phaser_Matrix.prototype.fromArray = function (array) { return new Phaser_Matrix(); };
Phaser_Matrix.prototype.scale = function (x, y) { return new Phaser_Matrix(); };
Phaser_Matrix.prototype.copyFrom = function (matrix) { return new Phaser_Matrix(); };
Phaser_Matrix.prototype.translate = function (x, y) { return new Phaser_Matrix(); };
Phaser_Matrix.prototype.copyTo = function (matrix) { return new Phaser_Matrix(); };
Phaser_Matrix.prototype.applyInverse = function (pos, newPos) { return new Phaser_Point(); };
Phaser_Matrix.prototype.identity = function () { return new Phaser_Matrix(); };
Phaser_Matrix.prototype.clone = function (output) { return new Phaser_Matrix(); };
Phaser_Matrix.prototype.toArray = function (transpose, array) { return new PIXI_Float32Array(); };
Phaser_Matrix.prototype.setTo = function (a, b, c, d, tx, ty) { return new Phaser_Matrix(); };
Phaser_Matrix.prototype.append = function (matrix) { return new Phaser_Matrix(); };

var Phaser_Particles_Arcade = function () {};
Phaser_Particles_Arcade.prototype.Emitter = function (game, x, y, maxParticles) {};

var Phaser_TweenManager = function (game) {};
Phaser_TweenManager.prototype.game = new Phaser_Game();
Phaser_TweenManager.prototype._add = new array__Phaser_Tween_();
Phaser_TweenManager.prototype.frameBased = new Boolean();
Phaser_TweenManager.prototype._tweens = new array__Phaser_Tween_();
Phaser_TweenManager.prototype.add = function (tween) { return new Phaser_Tween(); };
Phaser_TweenManager.prototype.isTweening = function (object) { return new Boolean(); };
Phaser_TweenManager.prototype.pauseAll = function () {};
Phaser_TweenManager.prototype.getAll = function () { return new Array__Phaser_Tween_(); };
Phaser_TweenManager.prototype._pauseAll = function () {};
Phaser_TweenManager.prototype._resumeAll = function () {};
Phaser_TweenManager.prototype.resumeAll = function () {};
Phaser_TweenManager.prototype.update = function () { return new Boolean(); };
Phaser_TweenManager.prototype.remove = function (tween) {};
Phaser_TweenManager.prototype.removeAll = function () {};
Phaser_TweenManager.prototype.create = function (object) { return new Phaser_Tween(); };
Phaser_TweenManager.prototype.removeFrom = function (obj, children) {};

var Phaser_Component_InCamera = function () {};
Phaser_Component_InCamera.prototype.inCamera = new Boolean();

var Phaser_Easing_Sinusoidal = function () {};
Phaser_Easing_Sinusoidal.prototype.In = function (k) { return new Number(); };
Phaser_Easing_Sinusoidal.prototype.InOut = function (k) { return new Number(); };
Phaser_Easing_Sinusoidal.prototype.Out = function (k) { return new Number(); };

var Phaser_Physics_P2_GearConstraint = function (world, bodyA, bodyB, angle, ratio) {};
Phaser_Physics_P2_GearConstraint.prototype.game = new Phaser_Game();
Phaser_Physics_P2_GearConstraint.prototype.world = new Phaser_Physics_P2();

var Phaser_Group = function (game, parent, name, addToStage, enableBody, physicsBodyType) {};
Phaser_Group.prototype = new PIXI.DisplayObjectContainer();
Phaser_Group.SORT_ASCENDING = new Number();
Phaser_Group.RETURN_NONE = new Number();
Phaser_Group.SORT_DESCENDING = new Number();
Phaser_Group.RETURN_CHILD = new Number();
Phaser_Group.RETURN_TOTAL = new Number();
Phaser_Group.prototype._sortProperty = new String();
Phaser_Group.prototype.type = new Number();
Phaser_Group.prototype.enableBody = new Boolean();
Phaser_Group.prototype.children = new Array_DisplayObject_();
Phaser_Group.prototype.enableBodyDebug = new Boolean();
Phaser_Group.prototype.fixedToCamera = new Boolean();
Phaser_Group.prototype.physicsType = new Number();
Phaser_Group.prototype.visible = new Boolean();
Phaser_Group.prototype.cameraOffset = new Phaser_Point();
Phaser_Group.prototype.cursorIndex = new Number();
Phaser_Group.prototype.physicsSortDirection = new Number();
Phaser_Group.prototype.name = new String();
Phaser_Group.prototype.classType = new Object();
Phaser_Group.prototype.hash = new Array();
Phaser_Group.prototype.cursor = new PIXI_DisplayObject();
Phaser_Group.prototype.game = new Phaser_Game();
Phaser_Group.prototype.alive = new Boolean();
Phaser_Group.prototype.total = new Number();
Phaser_Group.prototype.alpha = new Number();
Phaser_Group.prototype.angle = new Number();
Phaser_Group.prototype.onDestroy = new Phaser_Signal();
Phaser_Group.prototype.rotation = new Number();
Phaser_Group.prototype.length = new Number();
Phaser_Group.prototype.pendingDestroy = new Boolean();
Phaser_Group.prototype.ignoreDestroy = new Boolean();
Phaser_Group.prototype.x = new Number();
Phaser_Group.prototype.exists = new Boolean();
Phaser_Group.prototype.y = new Number();
Phaser_Group.prototype.z = new Number();
Phaser_Group.prototype.physicsBodyType = new Number();
Phaser_Group.prototype.xy = function (index, x, y) {};
Phaser_Group.prototype.descendingSortHandler = function (a, b) {};
Phaser_Group.prototype.getIndex = function (child) { return new Number(); };
Phaser_Group.prototype.getBottom = function () { return new Object(); };
Phaser_Group.prototype.replace = function (oldChild, newChild) { return new Object(); };
Phaser_Group.prototype.moveAll = function (group, silent) { return new Phaser_Group(); };
Phaser_Group.prototype.removeAll = function (destroy, silent) {};
Phaser_Group.prototype.getRandom = function (startIndex, length) { return new Object(); };
Phaser_Group.prototype.forEachExists = function (callback, callbackContext, args) {};
Phaser_Group.prototype.customSort = function (sortHandler, context) {};
Phaser_Group.prototype.getTop = function () { return new Object(); };
Phaser_Group.prototype.create = function (x, y, key, frame, exists) { return new PIXI_DisplayObject(); };
Phaser_Group.prototype.countDead = function () { return new Number(); };
Phaser_Group.prototype.subAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Group.prototype.bringToTop = function (child) { return new Object(); };
Phaser_Group.prototype.moveUp = function (child) { return new Object(); };
Phaser_Group.prototype.add = function (child, silent) { return new PIXI_DisplayObject(); };
Phaser_Group.prototype.swap = function (child1, child2) {};
Phaser_Group.prototype.postUpdate = function () {};
Phaser_Group.prototype.destroy = function (destroyChildren, soft) {};
Phaser_Group.prototype.sort = function (key, order) {};
Phaser_Group.prototype.moveDown = function (child) { return new Object(); };
Phaser_Group.prototype.hasProperty = function (child, key) { return new Boolean(); };
Phaser_Group.prototype.getFirstDead = function () { return new Object(); };
Phaser_Group.prototype.addAt = function (child, index, silent) { return new PIXI_DisplayObject(); };
Phaser_Group.prototype.forEachAlive = function (callback, callbackContext, args) {};
Phaser_Group.prototype.resetCursor = function (index) { return new Object(); };
Phaser_Group.prototype.addMultiple = function (children, silent) { return new Array__DisplayObject_(); };
Phaser_Group.prototype.updateZ = function () {};
Phaser_Group.prototype.setProperty = function (child, key, value, operation, force) { return new Boolean(); };
Phaser_Group.prototype.ascendingSortHandler = function (a, b) {};
Phaser_Group.prototype.removeBetween = function (startIndex, endIndex, destroy, silent) {};
Phaser_Group.prototype.removeFromHash = function (child) { return new Boolean(); };
Phaser_Group.prototype.preUpdate = function () {};
Phaser_Group.prototype.next = function () { return new Object(); };
Phaser_Group.prototype.addToHash = function (child) { return new Boolean(); };
Phaser_Group.prototype.forEachDead = function (callback, callbackContext, args) {};
Phaser_Group.prototype.checkProperty = function (child, key, value, force) { return new Boolean(); };
Phaser_Group.prototype.callbackFromArray = function (child, callback, length) {};
Phaser_Group.prototype.update = function () {};
Phaser_Group.prototype.countLiving = function () { return new Number(); };
Phaser_Group.prototype.remove = function (child, destroy, silent) { return new Boolean(); };
Phaser_Group.prototype.callAll = function (method, context, args) {};
Phaser_Group.prototype.multiplyAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Group.prototype.createMultiple = function (quantity, key, frame, exists) {};
Phaser_Group.prototype.setAll = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_Group.prototype.iterate = function (key, value, returnType, callback, callbackContext, args) { return new Object(); };
Phaser_Group.prototype.callAllExists = function (callback, existsValue, parameter) {};
Phaser_Group.prototype.set = function (child, key, value, checkAlive, checkVisible, operation, force) { return new Boolean(); };
Phaser_Group.prototype.checkAll = function (key, value, checkAlive, checkVisible, force) {};
Phaser_Group.prototype.previous = function () { return new Object(); };
Phaser_Group.prototype.getFirstExists = function (exists) { return new Object(); };
Phaser_Group.prototype.forEach = function (callback, callbackContext, checkExists, args) {};
Phaser_Group.prototype.sendToBack = function (child) { return new Object(); };
Phaser_Group.prototype.reverse = function () {};
Phaser_Group.prototype.filter = function (predicate, checkExists) { return new Phaser_ArraySet(); };
Phaser_Group.prototype.getAt = function (index) { return new PIXI_DisplayObject(); };
Phaser_Group.prototype.getFirstAlive = function () { return new Object(); };
Phaser_Group.prototype.addAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Group.prototype.divideAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Group.prototype.setAllChildren = function (key, value, checkAlive, checkVisible, operation, force) {};

var module_PIXI_PIXI = function () {};

var Phaser_InputHandler = function (sprite) {};
Phaser_InputHandler.prototype._setHandCursor = new Boolean();
Phaser_InputHandler.prototype.pixelPerfectClick = new Boolean();
Phaser_InputHandler.prototype.snapPoint = new Phaser_Point();
Phaser_InputHandler.prototype.allowVerticalDrag = new Boolean();
Phaser_InputHandler.prototype.checked = new Boolean();
Phaser_InputHandler.prototype.bringToTop = new Boolean();
Phaser_InputHandler.prototype.dragStartPoint = new Phaser_Point();
Phaser_InputHandler.prototype.useHandCursor = new Boolean();
Phaser_InputHandler.prototype.scaleLayer = new Boolean();
Phaser_InputHandler.prototype.game = new Phaser_Game();
Phaser_InputHandler.prototype.pixelPerfectOver = new Boolean();
Phaser_InputHandler.prototype.snapX = new Number();
Phaser_InputHandler.prototype._tempPoint = new Phaser_Point();
Phaser_InputHandler.prototype.snapY = new Number();
Phaser_InputHandler.prototype.enabled = new Boolean();
Phaser_InputHandler.prototype.snapOffsetX = new Number();
Phaser_InputHandler.prototype.allowHorizontalDrag = new Boolean();
Phaser_InputHandler.prototype.draggable = new Boolean();
Phaser_InputHandler.prototype.snapOffsetY = new Number();
Phaser_InputHandler.prototype.consumePointerEvent = new Boolean();
Phaser_InputHandler.prototype.sprite = new Phaser_Sprite();
Phaser_InputHandler.prototype.boundsSprite = new Phaser_Sprite();
Phaser_InputHandler.prototype.dragOffset = new Phaser_Point();
Phaser_InputHandler.prototype._dragPoint = new Phaser_Point();
Phaser_InputHandler.prototype.pixelPerfectAlpha = new Number();
Phaser_InputHandler.prototype._wasEnabled = new Boolean();
Phaser_InputHandler.prototype.dragFromCenter = new Boolean();
Phaser_InputHandler.prototype.snapOnRelease = new Boolean();
Phaser_InputHandler.prototype.priorityID = new Number();
Phaser_InputHandler.prototype.snapOffset = new Phaser_Point();
Phaser_InputHandler.prototype._pointerData = new Array();
Phaser_InputHandler.prototype.snapOnDrag = new Boolean();
Phaser_InputHandler.prototype._dragPhase = new Boolean();
Phaser_InputHandler.prototype.isDragged = new Boolean();
Phaser_InputHandler.prototype.boundsRect = new Phaser_Rectangle();
Phaser_InputHandler.prototype.pointerTimeUp = function (pointer) { return new Number(); };
Phaser_InputHandler.prototype.enableDrag = function (lockCenter, bringToTop, pixelPerfect, alphaThreshold, boundsRect, boundsSprite) {};
Phaser_InputHandler.prototype.removedFromGroup = function () {};
Phaser_InputHandler.prototype.overDuration = function (pointer) { return new Number(); };
Phaser_InputHandler.prototype.globalToLocalX = function (x) {};
Phaser_InputHandler.prototype.globalToLocalY = function (y) {};
Phaser_InputHandler.prototype.checkPixel = function (x, y, pointer) { return new Boolean(); };
Phaser_InputHandler.prototype.pointerOut = function (index) { return new Boolean(); };
Phaser_InputHandler.prototype.disableDrag = function () {};
Phaser_InputHandler.prototype.isPixelPerfect = function () { return new Boolean(); };
Phaser_InputHandler.prototype.destroy = function () {};
Phaser_InputHandler.prototype.pointerTimeOut = function (pointer) { return new Number(); };
Phaser_InputHandler.prototype.pointerDragged = function (pointer) { return new Boolean(); };
Phaser_InputHandler.prototype._pointerOverHandler = function (pointer) {};
Phaser_InputHandler.prototype.validForInput = function (highestID, highestRenderID, includePixelPerfect) { return new Boolean(); };
Phaser_InputHandler.prototype.pointerDown = function (pointer) { return new Boolean(); };
Phaser_InputHandler.prototype.stop = function () {};
Phaser_InputHandler.prototype.enableSnap = function (snapX, snapY, onDrag, onRelease, snapOffsetX, snapOffsetY) {};
Phaser_InputHandler.prototype.startDrag = function (pointer) {};
Phaser_InputHandler.prototype.reset = function () {};
Phaser_InputHandler.prototype.checkPointerOver = function (pointer, fastTest) { return new Boolean(); };
Phaser_InputHandler.prototype.pointerTimeDown = function (pointer) { return new Number(); };
Phaser_InputHandler.prototype.justOut = function (pointer, delay) { return new Boolean(); };
Phaser_InputHandler.prototype._touchedHandler = function (pointer) {};
Phaser_InputHandler.prototype.updateDrag = function (pointer) { return new Boolean(); };
Phaser_InputHandler.prototype.update = function (pointer) {};
Phaser_InputHandler.prototype.pointerTimeOver = function (pointer) { return new Number(); };
Phaser_InputHandler.prototype.justOver = function (pointer, delay) { return new Boolean(); };
Phaser_InputHandler.prototype.justReleased = function (pointer, delay) { return new Boolean(); };
Phaser_InputHandler.prototype._releasedHandler = function (pointer) {};
Phaser_InputHandler.prototype.checkBoundsSprite = function () {};
Phaser_InputHandler.prototype.justPressed = function (pointer, delay) { return new Boolean(); };
Phaser_InputHandler.prototype.pointerOver = function (index) { return new Boolean(); };
Phaser_InputHandler.prototype.checkBoundsRect = function () {};
Phaser_InputHandler.prototype.setDragLock = function (allowHorizontal, allowVertical) {};
Phaser_InputHandler.prototype.start = function (priority, useHandCursor) { return new Phaser_Sprite(); };
Phaser_InputHandler.prototype.downDuration = function (pointer) { return new Number(); };
Phaser_InputHandler.prototype.pointerUp = function (pointer) { return new Boolean(); };
Phaser_InputHandler.prototype._pointerOutHandler = function (pointer) {};
Phaser_InputHandler.prototype.pointerX = function (pointer) { return new Number(); };
Phaser_InputHandler.prototype.pointerY = function (pointer) { return new Number(); };
Phaser_InputHandler.prototype.stopDrag = function (pointer) {};
Phaser_InputHandler.prototype.checkPointerDown = function (pointer, fastTest) { return new Boolean(); };
Phaser_InputHandler.prototype.addedToGroup = function () {};
Phaser_InputHandler.prototype.disableSnap = function () {};

var Phaser_Physics_P2_ContactMaterial = function (materialA, materialB, options) {};

var WebGLGraphics = function () {};

var Phaser_Component_ScaleMinMax = function () {};
Phaser_Component_ScaleMinMax.prototype.transformCallbackContext = new Object();
Phaser_Component_ScaleMinMax.prototype.transformCallback = new Function();
Phaser_Component_ScaleMinMax.prototype.scaleMax = new Phaser_Point();
Phaser_Component_ScaleMinMax.prototype.scaleMin = new Phaser_Point();
Phaser_Component_ScaleMinMax.prototype.setScaleMinMax = function (minX, minY, maxX, maxY) {};
Phaser_Component_ScaleMinMax.prototype.checkTransform = function (wt) {};

var Phaser_Gamepad = function (game) {};
Phaser_Gamepad.prototype.game = new Phaser_Game();
Phaser_Gamepad.prototype._rawPads = new Array();
Phaser_Gamepad.prototype.onUpCallback = new Function();
Phaser_Gamepad.prototype.pad1 = new Phaser_SinglePad();
Phaser_Gamepad.prototype.padsConnected = new Number();
Phaser_Gamepad.prototype.pad2 = new Phaser_SinglePad();
Phaser_Gamepad.prototype.enabled = new Boolean();
Phaser_Gamepad.prototype._gamepadIndexMap = new Object();
Phaser_Gamepad.prototype._prevRawGamepadTypes = new Array();
Phaser_Gamepad.prototype._gamepadSupportAvailable = new Boolean();
Phaser_Gamepad.prototype.onFloatCallback = new Function();
Phaser_Gamepad.prototype.active = new Boolean();
Phaser_Gamepad.prototype.callbackContext = new Object();
Phaser_Gamepad.prototype._gamepads = new Array__Phaser_SinglePad_();
Phaser_Gamepad.prototype._ongamepadconnected = new Function();
Phaser_Gamepad.prototype._prevTimestamps = new Array();
Phaser_Gamepad.prototype.onDownCallback = new Function();
Phaser_Gamepad.prototype.pad3 = new Phaser_SinglePad();
Phaser_Gamepad.prototype.onDisconnectCallback = new Function();
Phaser_Gamepad.prototype.pad4 = new Phaser_SinglePad();
Phaser_Gamepad.prototype.onConnectCallback = new Function();
Phaser_Gamepad.prototype._active = new Boolean();
Phaser_Gamepad.prototype.onAxisCallback = new Function();
Phaser_Gamepad.prototype._gamepaddisconnected = new Function();
Phaser_Gamepad.prototype.supported = new Boolean();
Phaser_Gamepad.prototype.update = function () {};
Phaser_Gamepad.prototype.isDown = function (buttonCode) { return new Boolean(); };
Phaser_Gamepad.prototype.setDeadZones = function () {};
Phaser_Gamepad.prototype.justPressed = function (buttonCode, duration) { return new Boolean(); };
Phaser_Gamepad.prototype.addCallbacks = function (context, callbacks) {};
Phaser_Gamepad.prototype.start = function () {};
Phaser_Gamepad.prototype.destroy = function () {};
Phaser_Gamepad.prototype.stop = function () {};
Phaser_Gamepad.prototype.reset = function () {};
Phaser_Gamepad.prototype._pollGamepads = function () {};

var Phaser_BitmapData = function (game, key, width, height) {};
Phaser_BitmapData.prototype.data = new Uint8ClampedArray();
Phaser_BitmapData.prototype.imageData = new ImageData();
Phaser_BitmapData.prototype.type = new Number();
Phaser_BitmapData.prototype._size = new Phaser_Point();
Phaser_BitmapData.prototype.textureFrame = new Phaser_Frame();
Phaser_BitmapData.prototype.context = new CanvasRenderingContext2D();
Phaser_BitmapData.prototype.height = new Number();
Phaser_BitmapData.prototype.baseTexture = new PIXI_BaseTexture();
Phaser_BitmapData.prototype.canvas = new HTMLCanvasElement();
Phaser_BitmapData.prototype.ctx = new CanvasRenderingContext2D();
Phaser_BitmapData.prototype._rotate = new Number();
Phaser_BitmapData.prototype.pixels = new Uint32Array();
Phaser_BitmapData.prototype._circle = new Phaser_Circle();
Phaser_BitmapData.prototype.disableTextureUpload = new Boolean();
Phaser_BitmapData.prototype._pos = new Phaser_Point();
Phaser_BitmapData.prototype._tempB = new Number();
Phaser_BitmapData.prototype.game = new Phaser_Game();
Phaser_BitmapData.prototype._image = new Number();
Phaser_BitmapData.prototype._tempR = new Number();
Phaser_BitmapData.prototype._scale = new Phaser_Point();
Phaser_BitmapData.prototype._tempG = new Number();
Phaser_BitmapData.prototype.key = new String();
Phaser_BitmapData.prototype.dirty = new Boolean();
Phaser_BitmapData.prototype.texture = new PIXI_Texture();
Phaser_BitmapData.prototype._anchor = new Phaser_Point();
Phaser_BitmapData.prototype.width = new Number();
Phaser_BitmapData.prototype._alpha = new Object();
Phaser_BitmapData.prototype._swapCanvas = new HTMLCanvasElement();
Phaser_BitmapData.prototype.generateTexture = function (key) { return new PIXI_Texture(); };
Phaser_BitmapData.prototype.blendSaturation = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.shadow = function (color, blur, x, y) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.textureLine = function (line, image, repeat) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendSourceOut = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendHue = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.getPixelRGB = function (x, y, out, hsl, hsv) { return new Object(); };
Phaser_BitmapData.prototype.getBounds = function (rect) { return new Phaser_Rectangle(); };
Phaser_BitmapData.prototype.addToWorld = function (x, y, anchorX, anchorY, scaleX, scaleY) { return new Phaser_Image(); };
Phaser_BitmapData.prototype.moveV = function (distance) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.getPixels = function (rect) { return new ImageData(); };
Phaser_BitmapData.prototype.blendLighten = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.text = function (text, x, y, font, color, shadow) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.getTransform = function (translateX, translateY, scaleX, scaleY, skewX, skewY) { return new Object(); };
Phaser_BitmapData.prototype.blendSourceIn = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendScreen = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendDarken = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.add = function (object) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendXor = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendSoftLight = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.moveH = function (distance) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendLuminosity = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendDestinationAtop = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.getPixel = function (x, y, out) { return new Object(); };
Phaser_BitmapData.prototype.destroy = function () {};
Phaser_BitmapData.prototype.cls = function () {};
Phaser_BitmapData.prototype.fill = function (r, g, b, a) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendDestinationOver = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendDifference = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.processPixel = function (callback, callbackContext, x, y, width, height) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.copyRect = function (source, area, x, y, alpha, blendMode, roundPx) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.extract = function (destination, r, g, b, a, resize, r2, g2, b2) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendColorBurn = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendSourceAtop = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.circle = function (x, y, radius, fillStyle) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendSourceOver = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendOverlay = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.setPixel = function (x, y, red, green, blue, immediate) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.drawFull = function (parent, blendMode, roundPx) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.line = function (x1, y1, x2, y2, color, width) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.update = function (x, y, width, height) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.setPixel32 = function (x, y, red, green, blue, alpha, immediate) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendDestinationOut = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendExclusion = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendHardLight = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.getPixel32 = function (x, y) { return new Number(); };
Phaser_BitmapData.prototype.rect = function (x, y, width, height, fillStyle) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.load = function (source) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.copy = function (source, x, y, width, height, tx, ty, newWidth, newHeight, rotate, anchorX, anchorY, scaleX, scaleY, alpha, blendMode, roundPx) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendColor = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.render = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendDestinationIn = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.move = function (x, y) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendMultiply = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendReset = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.clear = function (x, y, width, height) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.draw = function (source, x, y, width, height, blendMode, roundPx) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.shiftHSL = function (h, s, l, region) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.alphaMask = function (source, mask, sourceRect, maskRect) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.drawGroup = function (group, blendMode, roundPx) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.processPixelRGB = function (callback, callbackContext, x, y, width, height) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.replaceRGB = function (r1, g1, b1, a1, r2, g2, b2, a2, region) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.resize = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendAdd = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.blendColorDodge = function () { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.setHSL = function (h, s, l, region) { return new Phaser_BitmapData(); };
Phaser_BitmapData.prototype.getFirstPixel = function (direction) { return new Object(); };

var Phaser_Component_FixedToCamera = function () {};
Phaser_Component_FixedToCamera.prototype.cameraOffset = new Phaser_Point();
Phaser_Component_FixedToCamera.prototype._fixedToCamera = new Boolean();
Phaser_Component_FixedToCamera.prototype.fixedToCamera = new Boolean();
Phaser_Component_FixedToCamera.prototype.postUpdate = function () {};

var Phaser_TimerEvent = function (timer, delay, tick, repeatCount, loop, callback, callbackContext, arguments) {};
Phaser_TimerEvent.prototype.timer = new Phaser_Timer();
Phaser_TimerEvent.prototype.delay = new Number();
Phaser_TimerEvent.prototype.loop = new Boolean();
Phaser_TimerEvent.prototype.callback = new Function();
Phaser_TimerEvent.prototype.callbackContext = new Object();
Phaser_TimerEvent.prototype.arguments = new Array__any_();
Phaser_TimerEvent.prototype.tick = new Number();
Phaser_TimerEvent.prototype.pendingDelete = new Boolean();
Phaser_TimerEvent.prototype.repeatCount = new Number();

var Phaser_Key = function (game, keycode) {};
Phaser_Key.prototype.repeats = new Number();
Phaser_Key.prototype.game = new Phaser_Game();
Phaser_Key.prototype.onHoldContext = new Object();
Phaser_Key.prototype.ctrlKey = new Boolean();
Phaser_Key.prototype.onHoldCallback = new Function();
Phaser_Key.prototype.isDown = new Boolean();
Phaser_Key.prototype.duration = new Number();
Phaser_Key.prototype.shiftKey = new Boolean();
Phaser_Key.prototype.isUp = new Boolean();
Phaser_Key.prototype._justDown = new Boolean();
Phaser_Key.prototype.altKey = new Boolean();
Phaser_Key.prototype.event = new Object();
Phaser_Key.prototype._enabled = new Boolean();
Phaser_Key.prototype.timeUp = new Number();
Phaser_Key.prototype.timeDown = new Number();
Phaser_Key.prototype.onUp = new Phaser_Signal();
Phaser_Key.prototype.keyCode = new Number();
Phaser_Key.prototype.onDown = new Phaser_Signal();
Phaser_Key.prototype._justUp = new Boolean();
Phaser_Key.prototype.update = function () {};
Phaser_Key.prototype.upDuration = function (duration) { return new Boolean(); };
Phaser_Key.prototype.processKeyUp = function (event) {};
Phaser_Key.prototype.downDuration = function (duration) { return new Boolean(); };
Phaser_Key.prototype.reset = function (hard) {};
Phaser_Key.prototype.processKeyDown = function (event) {};

var Phaser_Physics_P2 = function (game, config) {};
Phaser_Physics_P2.prototype.onConstraintAdded = new Phaser_Signal();
Phaser_Physics_P2.prototype._boundsBottom = new Boolean();
Phaser_Physics_P2.prototype.onSpringRemoved = new Phaser_Signal();
Phaser_Physics_P2.prototype.everythingCollisionGroup = new Phaser_Physics_P2_CollisionGroup();
Phaser_Physics_P2.prototype.applyDamping = new Boolean();
Phaser_Physics_P2.prototype.onSpringAdded = new Phaser_Signal();
Phaser_Physics_P2.prototype.sleepMode = new Number();
Phaser_Physics_P2.prototype.boundsCollidesWith = new Array();
Phaser_Physics_P2.prototype.solveConstraints = new Boolean();
Phaser_Physics_P2.prototype.world = new p2_World();
Phaser_Physics_P2.prototype.walls = new Object();
Phaser_Physics_P2.prototype._boundsTop = new Boolean();
Phaser_Physics_P2.prototype._boundsLeft = new Boolean();
Phaser_Physics_P2.prototype.onEndContact = new Phaser_Signal();
Phaser_Physics_P2.prototype.onContactMaterialRemoved = new Phaser_Signal();
Phaser_Physics_P2.prototype.onBodyAdded = new Phaser_Signal();
Phaser_Physics_P2.prototype.onBeginContact = new Phaser_Signal();
Phaser_Physics_P2.prototype.config = new Object();
Phaser_Physics_P2.prototype.paused = new Boolean();
Phaser_Physics_P2.prototype.onConstraintRemoved = new Phaser_Signal();
Phaser_Physics_P2.prototype.frameRate = new Number();
Phaser_Physics_P2.prototype._boundsRight = new Boolean();
Phaser_Physics_P2.prototype.onBodyRemoved = new Phaser_Signal();
Phaser_Physics_P2.prototype.applySpringForces = new Boolean();
Phaser_Physics_P2.prototype.callbackContext = new Object();
Phaser_Physics_P2.prototype.useElapsedTime = new Boolean();
Phaser_Physics_P2.prototype.boundsCollisionGroup = new Phaser_Physics_P2_CollisionGroup();
Phaser_Physics_P2.prototype.materials = new array__Phaser_Physics_P2_Material_();
Phaser_Physics_P2.prototype.nothingCollisionGroup = new Phaser_Physics_P2_CollisionGroup();
Phaser_Physics_P2.prototype.applyGravity = new Boolean();
Phaser_Physics_P2.prototype.game = new Phaser_Game();
Phaser_Physics_P2.prototype._toRemove = new Array();
Phaser_Physics_P2.prototype._boundsOwnGroup = new Boolean();
Phaser_Physics_P2.prototype.total = new Number();
Phaser_Physics_P2.prototype.emitImpactEvent = new Boolean();
Phaser_Physics_P2.prototype.postBroadphaseCallback = new Function();
Phaser_Physics_P2.prototype.contactMaterial = new p2_ContactMaterial();
Phaser_Physics_P2.prototype.collisionGroups = new Array();
Phaser_Physics_P2.prototype.friction = new Number();
Phaser_Physics_P2.prototype._collisionGroupID = new Number();
Phaser_Physics_P2.prototype.onContactMaterialAdded = new Phaser_Signal();
Phaser_Physics_P2.prototype.restitution = new Number();
Phaser_Physics_P2.prototype.gravity = new Phaser_Physics_P2_InversePointProxy();
Phaser_Physics_P2.prototype.time = new Boolean();
Phaser_Physics_P2.prototype.getSprings = function () { return new array__Phaser_Physics_P2_Spring_(); };
Phaser_Physics_P2.prototype.getConstraints = function () { return new array__Phaser_Physics_P2_Constraint_(); };
Phaser_Physics_P2.prototype.convertTilemap = function (map, layer, addToWorld, optimize) { return new Array(); };
Phaser_Physics_P2.prototype.enableBody = function (object, debug) {};
Phaser_Physics_P2.prototype.enable = function (object, debug, children) {};
Phaser_Physics_P2.prototype.FixtureList = function (list) {};
Phaser_Physics_P2.prototype.removeBodyNextStep = function (body) {};
Phaser_Physics_P2.prototype.updateBoundsCollisionGroup = function (setCollisionGroup) {};
Phaser_Physics_P2.prototype.destroy = function () {};
Phaser_Physics_P2.prototype.createBody = function (x, y, mass, addToWorld, options, options_optimalDecomp, options_skipSimpleCheck, options_removeCollinearPoints, points) { return new Phaser_Physics_P2_Body(); };
Phaser_Physics_P2.prototype.getBodies = function () { return new array__Phaser_Physics_P2_Body_(); };
Phaser_Physics_P2.prototype.Spring = function (world, bodyA, bodyB, restLength, stiffness, damping, worldA, worldB, localA, localB) {};
Phaser_Physics_P2.prototype.BodyDebug = function (game, body, settings) {};
Phaser_Physics_P2.prototype.removeBody = function (body) { return new Phaser_Physics_P2_Body(); };
Phaser_Physics_P2.prototype.mpx = function (v) { return new Number(); };
Phaser_Physics_P2.prototype.createGearConstraint = function (bodyA, bodyB, angle, ratio) { return new Phaser_Physics_P2_GearConstraint(); };
Phaser_Physics_P2.prototype.GearConstraint = function (world, bodyA, bodyB, angle, ratio) {};
Phaser_Physics_P2.prototype.reset = function () {};
Phaser_Physics_P2.prototype.addContactMaterial = function (material) { return new Phaser_Physics_P2_ContactMaterial(); };
Phaser_Physics_P2.prototype.preUpdate = function () {};
Phaser_Physics_P2.prototype.clearTilemapLayerBodies = function (map, layer) {};
Phaser_Physics_P2.prototype.RevoluteConstraint = function (world, bodyA, pivotA, bodyB, pivotB, maxForce, worldPivot) {};
Phaser_Physics_P2.prototype.removeSpring = function (spring) { return new Phaser_Physics_P2_Spring(); };
Phaser_Physics_P2.prototype.resume = function () {};
Phaser_Physics_P2.prototype.impactHandler = function (event) {};
Phaser_Physics_P2.prototype.addBody = function (body) { return new Boolean(); };
Phaser_Physics_P2.prototype.pxm = function (v) { return new Number(); };
Phaser_Physics_P2.prototype.getBody = function (object) { return new p2_Body(); };
Phaser_Physics_P2.prototype.ContactMaterial = function (materialA, materialB, options) {};
Phaser_Physics_P2.prototype.convertCollisionObjects = function (map, layer, addToWorld) { return new Array(); };
Phaser_Physics_P2.prototype.setBounds = function (x, y, width, height, left, right, top, bottom, setCollisionGroup) {};
Phaser_Physics_P2.prototype.postBroadphaseHandler = function (event) {};
Phaser_Physics_P2.prototype.InversePointProxy = function (world, destination) {};
Phaser_Physics_P2.prototype.createSpring = function (bodyA, bodyB, restLength, stiffness, damping, worldA, worldB, localA, localB) { return new Phaser_Physics_P2_Spring(); };
Phaser_Physics_P2.prototype.createParticle = function (x, y, mass, addToWorld, options, options_optimalDecomp, options_skipSimpleCheck, options_removeCollinearPoints, points) {};
Phaser_Physics_P2.prototype.addConstraint = function (constraint) { return new Phaser_Physics_P2_Constraint(); };
Phaser_Physics_P2.prototype.pxmi = function (v) { return new Number(); };
Phaser_Physics_P2.prototype.createMaterial = function (name, body) { return new Phaser_Physics_P2_Material(); };
Phaser_Physics_P2.prototype.createContactMaterial = function (materialA, materialB, options) { return new Phaser_Physics_P2_ContactMaterial(); };
Phaser_Physics_P2.prototype.CollisionGroup = function (bitmask) {};
Phaser_Physics_P2.prototype.PrismaticConstraint = function (world, bodyA, bodyB, lockRotation, anchorA, anchorB, axis, maxForce) {};
Phaser_Physics_P2.prototype.PointProxy = function (world, destination) {};
Phaser_Physics_P2.prototype.setPostBroadphaseCallback = function (callback, context) {};
Phaser_Physics_P2.prototype.pause = function () {};
Phaser_Physics_P2.prototype.RotationalSpring = function (world, bodyA, bodyB, restAngle, stiffness, damping) {};
Phaser_Physics_P2.prototype.createCollisionGroup = function (object) {};
Phaser_Physics_P2.prototype.getContactMaterial = function (materialA, materialB) { return new Phaser_Physics_P2_ContactMaterial(); };
Phaser_Physics_P2.prototype.createRevoluteConstraint = function (bodyA, pivotA, bodyB, pivotB, maxForce, worldPivot) { return new Phaser_Physics_P2_RevoluteConstraint(); };
Phaser_Physics_P2.prototype.DistanceConstraint = function (world, bodyA, bodyB, distance, localAnchorA, localAnchorB, maxForce) {};
Phaser_Physics_P2.prototype.update = function () {};
Phaser_Physics_P2.prototype.setMaterial = function (material, bodies) {};
Phaser_Physics_P2.prototype.toJSON = function () { return new Object(); };
Phaser_Physics_P2.prototype.endContactHandler = function (event) {};
Phaser_Physics_P2.prototype.addSpring = function (spring) { return new Phaser_Physics_P2_Spring(); };
Phaser_Physics_P2.prototype.removeConstraint = function (constraint) { return new Phaser_Physics_P2_Constraint(); };
Phaser_Physics_P2.prototype.Body = function (game, sprite, x, y, mass) {};
Phaser_Physics_P2.prototype.setImpactEvents = function (state) {};
Phaser_Physics_P2.prototype.createDistanceConstraint = function (bodyA, bodyB, distance, localAnchorA, localAnchorB, maxForce) { return new Phaser_Physics_P2_DistanceConstraint(); };
Phaser_Physics_P2.prototype.LockConstraint = function (world, bodyA, bodyB, offset, angle, maxForce) {};
Phaser_Physics_P2.prototype.createPrismaticConstraint = function (bodyA, bodyB, lockRotation, anchorA, anchorB, axis, maxForce) { return new Phaser_Physics_P2_PrismaticConstraint(); };
Phaser_Physics_P2.prototype.mpxi = function (v) { return new Number(); };
Phaser_Physics_P2.prototype.clear = function () {};
Phaser_Physics_P2.prototype.Material = function (name) {};
Phaser_Physics_P2.prototype.createRotationalSpring = function (bodyA, bodyB, restAngle, stiffness, damping) { return new Phaser_Physics_P2_RotationalSpring(); };
Phaser_Physics_P2.prototype.createLockConstraint = function (bodyA, bodyB, offset, angle, maxForce) { return new Phaser_Physics_P2_LockConstraint(); };
Phaser_Physics_P2.prototype.beginContactHandler = function (event) {};
Phaser_Physics_P2.prototype.hitTest = function (worldPoint, bodies, precision, filterStatic) { return new Array(); };
Phaser_Physics_P2.prototype.removeContactMaterial = function (material) { return new Phaser_Physics_P2_ContactMaterial(); };

var Phaser_Mouse = function (game) {};
Phaser_Mouse.LEFT_BUTTON = new Number();
Phaser_Mouse.NO_BUTTON = new Number();
Phaser_Mouse.RIGHT_BUTTON = new Number();
Phaser_Mouse.WHEEL_DOWN = new Number();
Phaser_Mouse.MIDDLE_BUTTON = new Number();
Phaser_Mouse.BACK_BUTTON = new Number();
Phaser_Mouse.WHEEL_UP = new Number();
Phaser_Mouse.FORWARD_BUTTON = new Number();
Phaser_Mouse.prototype.game = new Phaser_Game();
Phaser_Mouse.prototype.mouseOutCallback = new Function();
Phaser_Mouse.prototype.mouseWheelCallback = new Function();
Phaser_Mouse.prototype.wheelDelta = new Number();
Phaser_Mouse.prototype._onMouseDown = new Function();
Phaser_Mouse.prototype._onMouseWheel = new Function();
Phaser_Mouse.prototype.mouseOverCallback = new Function();
Phaser_Mouse.prototype.enabled = new Boolean();
Phaser_Mouse.prototype.button = new Number();
Phaser_Mouse.prototype._onMouseOut = new Function();
Phaser_Mouse.prototype._wheelEvent = new Phaser_Mouse_WheelEventProxy();
Phaser_Mouse.prototype.pointerLock = new Phaser_Signal();
Phaser_Mouse.prototype.locked = new Boolean();
Phaser_Mouse.prototype.event = new MouseEvent();
Phaser_Mouse.prototype.mouseDownCallback = new Function();
Phaser_Mouse.prototype.capture = new Boolean();
Phaser_Mouse.prototype.callbackContext = new Object();
Phaser_Mouse.prototype.stopOnGameOut = new Boolean();
Phaser_Mouse.prototype.mouseUpCallback = new Function();
Phaser_Mouse.prototype.input = new Phaser_Input();
Phaser_Mouse.prototype._onMouseUp = new Function();
Phaser_Mouse.prototype._onMouseOver = new Function();
Phaser_Mouse.prototype._onMouseMove = new Function();
Phaser_Mouse.prototype.requestPointerLock = function () {};
Phaser_Mouse.prototype.releasePointerLock = function () {};
Phaser_Mouse.prototype.onMouseWheel = function (event) {};
Phaser_Mouse.prototype.onMouseOut = function (event) {};
Phaser_Mouse.prototype.WheelEventProxy = function (scaleFactor, deltaMode) {};
Phaser_Mouse.prototype.onMouseDown = function (event) {};
Phaser_Mouse.prototype.onMouseOver = function (event) {};
Phaser_Mouse.prototype.start = function () {};
Phaser_Mouse.prototype.onMouseUpGlobal = function (event) {};
Phaser_Mouse.prototype.onMouseMove = function (event) {};
Phaser_Mouse.prototype.stop = function () {};
Phaser_Mouse.prototype.pointerLockChange = function (event) {};
Phaser_Mouse.prototype.onMouseUp = function (event) {};

var Phaser_Easing_Cubic = function () {};
Phaser_Easing_Cubic.prototype.In = function (k) { return new Number(); };
Phaser_Easing_Cubic.prototype.InOut = function (k) { return new Number(); };
Phaser_Easing_Cubic.prototype.Out = function (k) { return new Number(); };

var Phaser_Keyboard = function (game) {};
Phaser_Keyboard.prototype._onKeyPress = new Function();
Phaser_Keyboard.prototype.game = new Phaser_Game();
Phaser_Keyboard.prototype.onPressCallback = new Function();
Phaser_Keyboard.prototype._onKeyDown = new Function();
Phaser_Keyboard.prototype.pressEvent = new Object();
Phaser_Keyboard.prototype.onUpCallback = new Function();
Phaser_Keyboard.prototype.enabled = new Boolean();
Phaser_Keyboard.prototype._onKeyUp = new Function();
Phaser_Keyboard.prototype.lastKey = new Phaser_Key();
Phaser_Keyboard.prototype.event = new Object();
Phaser_Keyboard.prototype.callbackContext = new Object();
Phaser_Keyboard.prototype._i = new Number();
Phaser_Keyboard.prototype._k = new Number();
Phaser_Keyboard.prototype.onDownCallback = new Function();
Phaser_Keyboard.prototype.lastChar = new String();
Phaser_Keyboard.prototype._capture = new Array();
Phaser_Keyboard.prototype._keys = new array__Phaser_Key_();
Phaser_Keyboard.prototype.createCursorKeys = function () { return new Object(); };
Phaser_Keyboard.prototype.update = function () {};
Phaser_Keyboard.prototype.addKey = function (keycode) { return new Phaser_Key(); };
Phaser_Keyboard.prototype.isDown = function (keycode) { return new Boolean(); };
Phaser_Keyboard.prototype.upDuration = function (keycode, duration) { return new Boolean(); };
Phaser_Keyboard.prototype.addKeyCapture = function (keycode) {};
Phaser_Keyboard.prototype.clearCaptures = function () {};
Phaser_Keyboard.prototype.removeKey = function (keycode) {};
Phaser_Keyboard.prototype.processKeyUp = function (event) {};
Phaser_Keyboard.prototype.addCallbacks = function (context, onDown, onUp, onPress) {};
Phaser_Keyboard.prototype.start = function () {};
Phaser_Keyboard.prototype.destroy = function () {};
Phaser_Keyboard.prototype.processKeyPress = function (event) {};
Phaser_Keyboard.prototype.downDuration = function (keycode, duration) { return new Boolean(); };
Phaser_Keyboard.prototype.addKeys = function (keys) { return new Object(); };
Phaser_Keyboard.prototype.removeKeyCapture = function (keycode) {};
Phaser_Keyboard.prototype.stop = function () {};
Phaser_Keyboard.prototype.reset = function (hard) {};
Phaser_Keyboard.prototype.processKeyDown = function (event) {};

var Phaser_SignalBinding = function (signal, listener, isOnce, listenerContext, priority, args) {};
Phaser_SignalBinding.prototype._signal = new Phaser_Signal();
Phaser_SignalBinding.prototype.callCount = new Number();
Phaser_SignalBinding.prototype.active = new Boolean();
Phaser_SignalBinding.prototype.params = new Array();
Phaser_SignalBinding.prototype._priority = new Number();
Phaser_SignalBinding.prototype._listener = new Phaser_Game();
Phaser_SignalBinding.prototype._args = new Array();
Phaser_SignalBinding.prototype.context = new Object();
Phaser_SignalBinding.prototype._isOnce = new Boolean();
Phaser_SignalBinding.prototype.execute = function (paramsArr) { return new Object(); };
Phaser_SignalBinding.prototype.isOnce = function () { return new Boolean(); };
Phaser_SignalBinding.prototype.getSignal = function () { return new Phaser_Signal(); };
Phaser_SignalBinding.prototype.isBound = function () { return new Boolean(); };
Phaser_SignalBinding.prototype._destroy = function () {};
Phaser_SignalBinding.prototype.detach = function () { return new Function(); };
Phaser_SignalBinding.prototype.toString = function () { return new String(); };
Phaser_SignalBinding.prototype.getListener = function () { return new Function(); };

var Phaser_Input = function (game) {};
Phaser_Input.TOUCH_OVERRIDES_MOUSE = new Number();
Phaser_Input.MOUSE_TOUCH_COMBINE = new Number();
Phaser_Input.MAX_POINTERS = new Number();
Phaser_Input.MOUSE_OVERRIDES_TOUCH = new Number();
Phaser_Input.prototype.pollRate = new Number();
Phaser_Input.prototype.recordPointerHistory = new Boolean();
Phaser_Input.prototype.activePointer = new Phaser_Pointer();
Phaser_Input.prototype._oldPosition = new Phaser_Point();
Phaser_Input.prototype.tapRate = new Number();
Phaser_Input.prototype.resetLocked = new Boolean();
Phaser_Input.prototype.onTap = new Phaser_Signal();
Phaser_Input.prototype.multiInputOverride = new Number();
Phaser_Input.prototype.hitCanvas = new HTMLCanvasElement();
Phaser_Input.prototype.mouse = new Phaser_Mouse();
Phaser_Input.prototype.mousePointer = new Phaser_Pointer();
Phaser_Input.prototype.moveCallbacks = new Array();
Phaser_Input.prototype.limit = new Number();
Phaser_Input.prototype.recordRate = new Number();
Phaser_Input.prototype.pointers = new Array__Phaser_Pointer_();
Phaser_Input.prototype.recordLimit = new Number();
Phaser_Input.prototype.onHold = new Phaser_Signal();
Phaser_Input.prototype.touch = new Phaser_Touch();
Phaser_Input.prototype.maxPointers = new Number();
Phaser_Input.prototype.gamepad = new Phaser_Gamepad();
Phaser_Input.prototype.totalInactivePointers = new Number();
Phaser_Input.prototype.onDown = new Phaser_Signal();
Phaser_Input.prototype._localPoint = new Phaser_Point();
Phaser_Input.prototype.position = new Phaser_Point();
Phaser_Input.prototype.circle = new Phaser_Circle();
Phaser_Input.prototype.minPriorityID = new Number();
Phaser_Input.prototype.mspointer = new Phaser_MSPointer();
Phaser_Input.prototype.pollLocked = new Boolean();
Phaser_Input.prototype.game = new Phaser_Game();
Phaser_Input.prototype.hitContext = new CanvasRenderingContext2D();
Phaser_Input.prototype.justReleasedRate = new Number();
Phaser_Input.prototype.justPressedRate = new Number();
Phaser_Input.prototype.scale = new Phaser_Point();
Phaser_Input.prototype.enabled = new Boolean();
Phaser_Input.prototype.speed = new Phaser_Point();
Phaser_Input.prototype.pointer5 = new Phaser_Pointer();
Phaser_Input.prototype.pointer6 = new Phaser_Pointer();
Phaser_Input.prototype.pointer7 = new Phaser_Pointer();
Phaser_Input.prototype.pointer8 = new Phaser_Pointer();
Phaser_Input.prototype.pointer9 = new Phaser_Pointer();
Phaser_Input.prototype.pointer10 = new Phaser_Pointer();
Phaser_Input.prototype.pointer1 = new Phaser_Pointer();
Phaser_Input.prototype.pointer2 = new Phaser_Pointer();
Phaser_Input.prototype.pointer3 = new Phaser_Pointer();
Phaser_Input.prototype.pointer4 = new Phaser_Pointer();
Phaser_Input.prototype.keyboard = new Phaser_Keyboard();
Phaser_Input.prototype.doubleTapRate = new Number();
Phaser_Input.prototype.worldX = new Number();
Phaser_Input.prototype.worldY = new Number();
Phaser_Input.prototype.totalActivePointers = new integers();
Phaser_Input.prototype.onUp = new Phaser_Signal();
Phaser_Input.prototype.interactiveItems = new Phaser_ArraySet();
Phaser_Input.prototype.x = new Number();
Phaser_Input.prototype._x = new Number();
Phaser_Input.prototype.y = new Number();
Phaser_Input.prototype._y = new Number();
Phaser_Input.prototype.holdRate = new Number();
Phaser_Input.prototype._pollCounter = new Number();
Phaser_Input.prototype.addPointer = function () { return new Phaser_Pointer(); };
Phaser_Input.prototype.addMoveCallback = function (callback, context) {};
Phaser_Input.prototype.getPointerFromIdentifier = function (identifier) { return new Phaser_Pointer(); };
Phaser_Input.prototype.destroy = function () {};
Phaser_Input.prototype.getPointerFromId = function (pointerId) { return new Phaser_Pointer(); };
Phaser_Input.prototype.reset = function (hard) {};
Phaser_Input.prototype.updatePointer = function (event) { return new Phaser_Pointer(); };
Phaser_Input.prototype.getLocalPosition = function (displayObject, pointer) { return new Phaser_Point(); };
Phaser_Input.prototype.update = function () {};
Phaser_Input.prototype.resetSpeed = function (x, y) {};
Phaser_Input.prototype.stopPointer = function (event) { return new Phaser_Pointer(); };
Phaser_Input.prototype.deleteMoveCallback = function (callback, context) {};
Phaser_Input.prototype.onClickTrampoline = function () {};
Phaser_Input.prototype.boot = function () {};
Phaser_Input.prototype.startPointer = function (event) { return new Phaser_Pointer(); };
Phaser_Input.prototype.getPointer = function (isActive) { return new Phaser_Pointer(); };
Phaser_Input.prototype.hitTest = function (displayObject, pointer, localPoint) {};

var Phaser_Video = function (game, key, url) {};
Phaser_Video.prototype.paused = new Boolean();
Phaser_Video.prototype._retryID = new Number();
Phaser_Video.prototype.type = new Number();
Phaser_Video.prototype._timeOutID = new Number();
Phaser_Video.prototype.textureFrame = new Phaser_Frame();
Phaser_Video.prototype.loop = new Boolean();
Phaser_Video.prototype.onChangeSource = new Phaser_Signal();
Phaser_Video.prototype.height = new Number();
Phaser_Video.prototype.mute = new Boolean();
Phaser_Video.prototype.onPlay = new Phaser_Signal();
Phaser_Video.prototype.volume = new Number();
Phaser_Video.prototype.isStreaming = new Boolean();
Phaser_Video.prototype.disableTextureUpload = new Boolean();
Phaser_Video.prototype._pending = new Boolean();
Phaser_Video.prototype.playing = new Boolean();
Phaser_Video.prototype.snapshot = new Phaser_BitmapData();
Phaser_Video.prototype.onAccess = new Phaser_Signal();
Phaser_Video.prototype._muted = new Boolean();
Phaser_Video.prototype.game = new Phaser_Game();
Phaser_Video.prototype.video = new HTMLVideoElement();
Phaser_Video.prototype.timeout = new Number();
Phaser_Video.prototype._paused = new Boolean();
Phaser_Video.prototype.playbackRate = new Number();
Phaser_Video.prototype.onTimeout = new Phaser_Signal();
Phaser_Video.prototype._codePaused = new Boolean();
Phaser_Video.prototype.key = new String();
Phaser_Video.prototype.retry = new Number();
Phaser_Video.prototype.onError = new Phaser_Signal();
Phaser_Video.prototype.texture = new PIXI_Texture();
Phaser_Video.prototype.onComplete = new Phaser_Signal();
Phaser_Video.prototype._codeMuted = new Boolean();
Phaser_Video.prototype.retryLimit = new Number();
Phaser_Video.prototype._autoplay = new Boolean();
Phaser_Video.prototype.videoStream = new MediaStream();
Phaser_Video.prototype.width = new Number();
Phaser_Video.prototype.retryInterval = new Number();
Phaser_Video.prototype.touchLocked = new Boolean();
Phaser_Video.prototype.play = function (loop, playbackRate) { return new Phaser_Video(); };
Phaser_Video.prototype.addToWorld = function (x, y, anchorX, anchorY, scaleX, scaleY) { return new Phaser_Image(); };
Phaser_Video.prototype.createVideoFromURL = function (url, autoplay) { return new Phaser_Video(); };
Phaser_Video.prototype.playHandler = function () {};
Phaser_Video.prototype.add = function (object) { return new Phaser_Video(); };
Phaser_Video.prototype.unlock = function () {};
Phaser_Video.prototype.setTouchLock = function () {};
Phaser_Video.prototype.destroy = function () {};
Phaser_Video.prototype.removeVideoElement = function () {};
Phaser_Video.prototype.getUserMediaTimeout = function () {};
Phaser_Video.prototype.checkVideoProgress = function () {};
Phaser_Video.prototype.stop = function () { return new Phaser_Video(); };
Phaser_Video.prototype.setResume = function () {};
Phaser_Video.prototype.unsetMute = function () {};
Phaser_Video.prototype.setPause = function () {};
Phaser_Video.prototype.updateTexture = function (event, width, height) {};
Phaser_Video.prototype.changeSource = function (src, autoplay) { return new Phaser_Video(); };
Phaser_Video.prototype.setMute = function () {};
Phaser_Video.prototype.render = function () {};
Phaser_Video.prototype.connectToMediaStream = function (video, stream) { return new Phaser_Video(); };
Phaser_Video.prototype.getUserMediaError = function () {};
Phaser_Video.prototype.startMediaStream = function (captureAudio, width, height) { return new Phaser_Video(); };
Phaser_Video.prototype.createVideoFromBlob = function (blob) { return new Phaser_Video(); };
Phaser_Video.prototype.getUserMediaSuccess = function () {};
Phaser_Video.prototype.complete = function () {};
Phaser_Video.prototype.grab = function (clear, alpha, blendMode) { return new Phaser_BitmapData(); };

var Phaser_Physics_P2_RevoluteConstraint = function (world, bodyA, pivotA, bodyB, pivotB, maxForce, worldPivot) {};
Phaser_Physics_P2_RevoluteConstraint.prototype.game = new Phaser_Game();
Phaser_Physics_P2_RevoluteConstraint.prototype.world = new Phaser_Physics_P2();

var Phaser_Physics_Ninja_Circle = function (body, x, y, radius) {};
Phaser_Physics_Ninja_Circle.prototype.oldpos = new Phaser_Point();
Phaser_Physics_Ninja_Circle.prototype.oV = new Number();
Phaser_Physics_Ninja_Circle.prototype.circleTileProjections = new Object();
Phaser_Physics_Ninja_Circle.prototype.pos = new Phaser_Point();
Phaser_Physics_Ninja_Circle.prototype.radius = new Number();
Phaser_Physics_Ninja_Circle.prototype.height = new Number();
Phaser_Physics_Ninja_Circle.prototype.velocity = new Phaser_Point();
Phaser_Physics_Ninja_Circle.prototype.system = new Phaser_Physics_Ninja_Body();
Phaser_Physics_Ninja_Circle.prototype.width = new Number();
Phaser_Physics_Ninja_Circle.prototype.oH = new Number();
Phaser_Physics_Ninja_Circle.prototype.xw = new Number();
Phaser_Physics_Ninja_Circle.prototype.resolveCircleTile = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.prototype.projCircle_Convex = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.prototype.projCircle_67DegB = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.prototype.collideWorldBounds = function () {};
Phaser_Physics_Ninja_Circle.prototype.projCircle_45Deg = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.prototype.render = function (context, xOffset, yOffset, color, filled) {};
Phaser_Physics_Ninja_Circle.prototype.projCircle_Full = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.prototype.projCircle_22DegS = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.prototype.projCircle_Concave = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.prototype.destroy = function () {};
Phaser_Physics_Ninja_Circle.prototype.collideCircleVsTile = function (t) { return new Boolean(); };
Phaser_Physics_Ninja_Circle.prototype.integrate = function () {};
Phaser_Physics_Ninja_Circle.prototype.reportCollisionVsWorld = function (px, py, dx, dy, obj) {};
Phaser_Physics_Ninja_Circle.prototype.projCircle_22DegB = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.prototype.projCircle_67DegS = function (x, y, oH, oV, obj, t) { return new Number(); };
Phaser_Physics_Ninja_Circle.prototype.projCircle_Half = function (x, y, oH, oV, obj, t) { return new Number(); };

var Phaser_DOM = function () {};
Phaser_DOM.prototype.layoutBounds = new Object();
Phaser_DOM.prototype.documentBounds = new Object();
Phaser_DOM.prototype.scrollY = new Number();
Phaser_DOM.prototype.visualBounds = new Object();
Phaser_DOM.prototype.scrollX = new Number();
Phaser_DOM.prototype.getAspectRatio = function (object) { return new Number(); };
Phaser_DOM.prototype.calibrate = function (coords, cushion) { return new Object(); };
Phaser_DOM.prototype.getOffset = function (element, point) { return new Phaser_Point(); };
Phaser_DOM.prototype.getScreenOrientation = function (primaryFallback) {};
Phaser_DOM.prototype.getBounds = function (element, cushion) { return new Object(); };
Phaser_DOM.prototype.inLayoutViewport = function (element, cushion) { return new Boolean(); };

var Phaser_SpriteBatch = function (game, parent, name, addToStage) {};
Phaser_SpriteBatch.prototype = new Phaser.Group();
Phaser_SpriteBatch.prototype._sortProperty = new String();
Phaser_SpriteBatch.prototype.type = new Number();
Phaser_SpriteBatch.prototype.enableBody = new Boolean();
Phaser_SpriteBatch.prototype.children = new Array_DisplayObject_();
Phaser_SpriteBatch.prototype.enableBodyDebug = new Boolean();
Phaser_SpriteBatch.prototype.fixedToCamera = new Boolean();
Phaser_SpriteBatch.prototype.physicsType = new Number();
Phaser_SpriteBatch.prototype.visible = new Boolean();
Phaser_SpriteBatch.prototype.cameraOffset = new Phaser_Point();
Phaser_SpriteBatch.prototype.cursorIndex = new Number();
Phaser_SpriteBatch.prototype.physicsSortDirection = new Number();
Phaser_SpriteBatch.prototype.name = new String();
Phaser_SpriteBatch.prototype.classType = new Object();
Phaser_SpriteBatch.prototype.hash = new Array();
Phaser_SpriteBatch.prototype.cursor = new PIXI_DisplayObject();
Phaser_SpriteBatch.prototype.game = new Phaser_Game();
Phaser_SpriteBatch.prototype.alive = new Boolean();
Phaser_SpriteBatch.prototype.total = new Number();
Phaser_SpriteBatch.prototype.alpha = new Number();
Phaser_SpriteBatch.prototype.angle = new Number();
Phaser_SpriteBatch.prototype.onDestroy = new Phaser_Signal();
Phaser_SpriteBatch.prototype.rotation = new Number();
Phaser_SpriteBatch.prototype.length = new Number();
Phaser_SpriteBatch.prototype.pendingDestroy = new Boolean();
Phaser_SpriteBatch.prototype.ignoreDestroy = new Boolean();
Phaser_SpriteBatch.prototype.x = new Number();
Phaser_SpriteBatch.prototype.exists = new Boolean();
Phaser_SpriteBatch.prototype.y = new Number();
Phaser_SpriteBatch.prototype.z = new Number();
Phaser_SpriteBatch.prototype.physicsBodyType = new Number();
Phaser_SpriteBatch.prototype.xy = function (index, x, y) {};
Phaser_SpriteBatch.prototype.descendingSortHandler = function (a, b) {};
Phaser_SpriteBatch.prototype.getIndex = function (child) { return new Number(); };
Phaser_SpriteBatch.prototype.getBottom = function () { return new Object(); };
Phaser_SpriteBatch.prototype.replace = function (oldChild, newChild) { return new Object(); };
Phaser_SpriteBatch.prototype.moveAll = function (group, silent) { return new Phaser_Group(); };
Phaser_SpriteBatch.prototype.removeAll = function (destroy, silent) {};
Phaser_SpriteBatch.prototype.getRandom = function (startIndex, length) { return new Object(); };
Phaser_SpriteBatch.prototype.forEachExists = function (callback, callbackContext, args) {};
Phaser_SpriteBatch.prototype.customSort = function (sortHandler, context) {};
Phaser_SpriteBatch.prototype.getTop = function () { return new Object(); };
Phaser_SpriteBatch.prototype.create = function (x, y, key, frame, exists) { return new PIXI_DisplayObject(); };
Phaser_SpriteBatch.prototype.countDead = function () { return new Number(); };
Phaser_SpriteBatch.prototype.subAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_SpriteBatch.prototype.bringToTop = function (child) { return new Object(); };
Phaser_SpriteBatch.prototype.moveUp = function (child) { return new Object(); };
Phaser_SpriteBatch.prototype.add = function (child, silent) { return new PIXI_DisplayObject(); };
Phaser_SpriteBatch.prototype.swap = function (child1, child2) {};
Phaser_SpriteBatch.prototype.postUpdate = function () {};
Phaser_SpriteBatch.prototype.destroy = function (destroyChildren, soft) {};
Phaser_SpriteBatch.prototype.sort = function (key, order) {};
Phaser_SpriteBatch.prototype.moveDown = function (child) { return new Object(); };
Phaser_SpriteBatch.prototype.hasProperty = function (child, key) { return new Boolean(); };
Phaser_SpriteBatch.prototype.getFirstDead = function () { return new Object(); };
Phaser_SpriteBatch.prototype.addAt = function (child, index, silent) { return new PIXI_DisplayObject(); };
Phaser_SpriteBatch.prototype.forEachAlive = function (callback, callbackContext, args) {};
Phaser_SpriteBatch.prototype.resetCursor = function (index) { return new Object(); };
Phaser_SpriteBatch.prototype.addMultiple = function (children, silent) { return new Array__DisplayObject_(); };
Phaser_SpriteBatch.prototype.updateZ = function () {};
Phaser_SpriteBatch.prototype.setProperty = function (child, key, value, operation, force) { return new Boolean(); };
Phaser_SpriteBatch.prototype.ascendingSortHandler = function (a, b) {};
Phaser_SpriteBatch.prototype.removeBetween = function (startIndex, endIndex, destroy, silent) {};
Phaser_SpriteBatch.prototype.removeFromHash = function (child) { return new Boolean(); };
Phaser_SpriteBatch.prototype.preUpdate = function () {};
Phaser_SpriteBatch.prototype.next = function () { return new Object(); };
Phaser_SpriteBatch.prototype.addToHash = function (child) { return new Boolean(); };
Phaser_SpriteBatch.prototype.forEachDead = function (callback, callbackContext, args) {};
Phaser_SpriteBatch.prototype.checkProperty = function (child, key, value, force) { return new Boolean(); };
Phaser_SpriteBatch.prototype.callbackFromArray = function (child, callback, length) {};
Phaser_SpriteBatch.prototype.update = function () {};
Phaser_SpriteBatch.prototype.countLiving = function () { return new Number(); };
Phaser_SpriteBatch.prototype.remove = function (child, destroy, silent) { return new Boolean(); };
Phaser_SpriteBatch.prototype.callAll = function (method, context, args) {};
Phaser_SpriteBatch.prototype.multiplyAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_SpriteBatch.prototype.createMultiple = function (quantity, key, frame, exists) {};
Phaser_SpriteBatch.prototype.setAll = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_SpriteBatch.prototype.iterate = function (key, value, returnType, callback, callbackContext, args) { return new Object(); };
Phaser_SpriteBatch.prototype.callAllExists = function (callback, existsValue, parameter) {};
Phaser_SpriteBatch.prototype.set = function (child, key, value, checkAlive, checkVisible, operation, force) { return new Boolean(); };
Phaser_SpriteBatch.prototype.checkAll = function (key, value, checkAlive, checkVisible, force) {};
Phaser_SpriteBatch.prototype.previous = function () { return new Object(); };
Phaser_SpriteBatch.prototype.getFirstExists = function (exists) { return new Object(); };
Phaser_SpriteBatch.prototype.forEach = function (callback, callbackContext, checkExists, args) {};
Phaser_SpriteBatch.prototype.sendToBack = function (child) { return new Object(); };
Phaser_SpriteBatch.prototype.reverse = function () {};
Phaser_SpriteBatch.prototype.filter = function (predicate, checkExists) { return new Phaser_ArraySet(); };
Phaser_SpriteBatch.prototype.getAt = function (index) { return new PIXI_DisplayObject(); };
Phaser_SpriteBatch.prototype.getFirstAlive = function () { return new Object(); };
Phaser_SpriteBatch.prototype.addAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_SpriteBatch.prototype.divideAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_SpriteBatch.prototype.setAllChildren = function (key, value, checkAlive, checkVisible, operation, force) {};

var Phaser_Canvas = function () {};
Phaser_Canvas.prototype.removeFromDOM = function (canvas) {};
Phaser_Canvas.prototype.setBackgroundColor = function (canvas, color) { return new HTMLCanvasElement(); };
Phaser_Canvas.prototype.setTransform = function (context, translateX, translateY, scaleX, scaleY, skewX, skewY) { return new CanvasRenderingContext2D(); };
Phaser_Canvas.prototype.getSmoothingEnabled = function (context) { return new Boolean(); };
Phaser_Canvas.prototype.create = function (parent, width, height, id, skipPool) { return new HTMLCanvasElement(); };
Phaser_Canvas.prototype.setImageRenderingCrisp = function (canvas) { return new HTMLCanvasElement(); };
Phaser_Canvas.prototype.setUserSelect = function (canvas, value) { return new HTMLCanvasElement(); };
Phaser_Canvas.prototype.addToDOM = function (canvas, parent, overflowHidden) { return new HTMLCanvasElement(); };
Phaser_Canvas.prototype.setSmoothingEnabled = function (context, value) { return new CanvasRenderingContext2D(); };
Phaser_Canvas.prototype.setImageRenderingBicubic = function (canvas) { return new HTMLCanvasElement(); };
Phaser_Canvas.prototype.setTouchAction = function (canvas, value) { return new HTMLCanvasElement(); };

var Phaser_Physics_P2_DistanceConstraint = function (world, bodyA, bodyB, distance, localAnchorA, localAnchorB, maxForce) {};
Phaser_Physics_P2_DistanceConstraint.prototype.game = new Phaser_Game();
Phaser_Physics_P2_DistanceConstraint.prototype.world = new Phaser_Physics_P2();

var Phaser_Physics_P2_Spring = function (world, bodyA, bodyB, restLength, stiffness, damping, worldA, worldB, localA, localB) {};
Phaser_Physics_P2_Spring.prototype.game = new Phaser_Game();
Phaser_Physics_P2_Spring.prototype.world = new Phaser_Physics_P2();
Phaser_Physics_P2_Spring.prototype.data = new p2_LinearSpring();

var Phaser_Physics_P2_Material = function (name) {};
Phaser_Physics_P2_Material.prototype.name = new String();

var Phaser_AnimationManager = function (sprite) {};
Phaser_AnimationManager.prototype.frameData = new Phaser_FrameData();
Phaser_AnimationManager.prototype.game = new Phaser_Game();
Phaser_AnimationManager.prototype.paused = new Boolean();
Phaser_AnimationManager.prototype.isLoaded = new Boolean();
Phaser_AnimationManager.prototype._frameData = new Phaser_FrameData();
Phaser_AnimationManager.prototype.frameTotal = new Number();
Phaser_AnimationManager.prototype.sprite = new Phaser_Sprite();
Phaser_AnimationManager.prototype.currentFrame = new Phaser_Frame();
Phaser_AnimationManager.prototype._outputFrames = new Object();
Phaser_AnimationManager.prototype.updateIfVisible = new Boolean();
Phaser_AnimationManager.prototype.frameName = new String();
Phaser_AnimationManager.prototype._anims = new Object();
Phaser_AnimationManager.prototype.currentAnim = new Phaser_Animation();
Phaser_AnimationManager.prototype.name = new String();
Phaser_AnimationManager.prototype.frame = new Number();
Phaser_AnimationManager.prototype.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_AnimationManager.prototype.next = function (quantity) {};
Phaser_AnimationManager.prototype.update = function () { return new Boolean(); };
Phaser_AnimationManager.prototype.refreshFrame = function () {};
Phaser_AnimationManager.prototype.getAnimation = function (name) { return new Phaser_Animation(); };
Phaser_AnimationManager.prototype.copyFrameData = function (frameData, frame) { return new Boolean(); };
Phaser_AnimationManager.prototype.validateFrames = function (frames, useNumericIndex) { return new Boolean(); };
Phaser_AnimationManager.prototype.add = function (name, frames, frameRate, loop, useNumericIndex) { return new Phaser_Animation(); };
Phaser_AnimationManager.prototype.previous = function (quantity) {};
Phaser_AnimationManager.prototype.destroy = function () {};
Phaser_AnimationManager.prototype.stop = function (name, resetFrame) {};
Phaser_AnimationManager.prototype.loadFrameData = function (frameData, frame) { return new Boolean(); };

var Phaser_Create = function (game) {};
Phaser_Create.PALETTE_JMP = new Number();
Phaser_Create.PALETTE_CGA = new Number();
Phaser_Create.PALETTE_ARNE = new Number();
Phaser_Create.PALETTE_C64 = new Number();
Phaser_Create.PALETTE_JAPANESE_MACHINE = new Number();
Phaser_Create.prototype.game = new Phaser_Game();
Phaser_Create.prototype.canvas = new HTMLCanvasElement();
Phaser_Create.prototype.bmd = new Phaser_BitmapData();
Phaser_Create.prototype.context = new CanvasRenderingContext2D();
Phaser_Create.prototype.palettes = new Array();
Phaser_Create.prototype.texture = function (key, data, pixelWidth, pixelHeight, palette) { return new PIXI_Texture(); };
Phaser_Create.prototype.grid = function (key, width, height, cellWidth, cellHeight, color) { return new PIXI_Texture(); };

var Phaser_Tilemap = function (game, key, tileWidth, tileHeight, width, height) {};
Phaser_Tilemap.WEST = new Number();
Phaser_Tilemap.NORTH = new Number();
Phaser_Tilemap.SOUTH = new Number();
Phaser_Tilemap.TILED_JSON = new Number();
Phaser_Tilemap.EAST = new Number();
Phaser_Tilemap.CSV = new Number();
Phaser_Tilemap.prototype.objects = new Array();
Phaser_Tilemap.prototype.tiles = new Array();
Phaser_Tilemap.prototype.layers = new Array();
Phaser_Tilemap.prototype.height = new Number();
Phaser_Tilemap.prototype.currentLayer = new Number();
Phaser_Tilemap.prototype.collideIndexes = new Array();
Phaser_Tilemap.prototype.images = new Array();
Phaser_Tilemap.prototype.format = new Number();
Phaser_Tilemap.prototype.version = new Number();
Phaser_Tilemap.prototype.debugMap = new Array();
Phaser_Tilemap.prototype.collision = new Array();
Phaser_Tilemap.prototype.tileHeight = new Number();
Phaser_Tilemap.prototype._tempA = new Number();
Phaser_Tilemap.prototype._tempB = new Number();
Phaser_Tilemap.prototype.game = new Phaser_Game();
Phaser_Tilemap.prototype.widthInPixels = new Number();
Phaser_Tilemap.prototype.imagecollections = new Array();
Phaser_Tilemap.prototype._results = new Array();
Phaser_Tilemap.prototype.layer = new Number();
Phaser_Tilemap.prototype.heightInPixels = new Number();
Phaser_Tilemap.prototype.key = new String();
Phaser_Tilemap.prototype.orientation = new String();
Phaser_Tilemap.prototype.tileWidth = new Number();
Phaser_Tilemap.prototype.width = new Number();
Phaser_Tilemap.prototype.tilesets = new Array();
Phaser_Tilemap.prototype.properties = new Object();
Phaser_Tilemap.prototype.createFromTiles = function (tiles, replacements, key, layer, group, properties) { return new Number(); };
Phaser_Tilemap.prototype.getIndex = function (location, name) { return new Number(); };
Phaser_Tilemap.prototype.getTileLeft = function (layer, x, y) {};
Phaser_Tilemap.prototype.createBlankLayer = function (name, width, height, tileWidth, tileHeight, group) { return new Phaser_TilemapLayer(); };
Phaser_Tilemap.prototype.replace = function (source, dest, x, y, width, height, layer) {};
Phaser_Tilemap.prototype.setTileLocationCallback = function (x, y, width, height, callback, callbackContext, layer) {};
Phaser_Tilemap.prototype.create = function (name, width, height, tileWidth, tileHeight, group) { return new Phaser_TilemapLayer(); };
Phaser_Tilemap.prototype.putTileWorldXY = function (tile, x, y, tileWidth, tileHeight, layer) { return new Phaser_Tile(); };
Phaser_Tilemap.prototype.getTile = function (x, y, layer, nonNull) { return new Phaser_Tile(); };
Phaser_Tilemap.prototype.getTileRight = function (layer, x, y) {};
Phaser_Tilemap.prototype.getTileWorldXY = function (x, y, tileWidth, tileHeight, layer, nonNull) { return new Phaser_Tile(); };
Phaser_Tilemap.prototype.createFromObjects = function (name, gid, key, frame, exists, autoCull, group, CustomClass, adjustY) {};
Phaser_Tilemap.prototype.getImageIndex = function (name) { return new Number(); };
Phaser_Tilemap.prototype.removeTileWorldXY = function (x, y, tileWidth, tileHeight, layer) { return new Phaser_Tile(); };
Phaser_Tilemap.prototype.swap = function (tileA, tileB, x, y, width, height, layer) {};
Phaser_Tilemap.prototype.addTilesetImage = function (tileset, key, tileWidth, tileHeight, tileMargin, tileSpacing, gid) { return new Phaser_Tileset(); };
Phaser_Tilemap.prototype.getLayer = function (layer) { return new Number(); };
Phaser_Tilemap.prototype.removeTile = function (x, y, layer) { return new Phaser_Tile(); };
Phaser_Tilemap.prototype.destroy = function () {};
Phaser_Tilemap.prototype.fill = function (index, x, y, width, height, layer) {};
Phaser_Tilemap.prototype.setPreventRecalculate = function (value) {};
Phaser_Tilemap.prototype.setTileIndexCallback = function (indexes, callback, callbackContext, layer) {};
Phaser_Tilemap.prototype.calculateFaces = function (layer) {};
Phaser_Tilemap.prototype.setCollision = function (indexes, collides, layer, recalculate) {};
Phaser_Tilemap.prototype.createLayer = function (layer, width, height, group) { return new Phaser_TilemapLayer(); };
Phaser_Tilemap.prototype.removeAllLayers = function () {};
Phaser_Tilemap.prototype.putTile = function (tile, x, y, layer) { return new Phaser_Tile(); };
Phaser_Tilemap.prototype.setLayer = function (layer) {};
Phaser_Tilemap.prototype.setCollisionByIndex = function (index, collides, layer, recalculate) {};
Phaser_Tilemap.prototype.paste = function (x, y, tileblock, layer) {};
Phaser_Tilemap.prototype.random = function (x, y, width, height, layer) {};
Phaser_Tilemap.prototype.getTilesetIndex = function (name) { return new Number(); };
Phaser_Tilemap.prototype.setCollisionBetween = function (start, stop, collides, layer, recalculate) {};
Phaser_Tilemap.prototype.setCollisionByExclusion = function (indexes, collides, layer, recalculate) {};
Phaser_Tilemap.prototype.getLayerIndex = function (name) { return new Number(); };
Phaser_Tilemap.prototype.setTileSize = function (tileWidth, tileHeight) {};
Phaser_Tilemap.prototype.copy = function (x, y, width, height, layer) { return new Array(); };
Phaser_Tilemap.prototype.dump = function () {};
Phaser_Tilemap.prototype.getTileAbove = function (layer, x, y) {};
Phaser_Tilemap.prototype.getObjectIndex = function (name) { return new Number(); };
Phaser_Tilemap.prototype.hasTile = function (x, y, layer) { return new Boolean(); };
Phaser_Tilemap.prototype.swapHandler = function (value) {};
Phaser_Tilemap.prototype.forEach = function (callback, context, x, y, width, height, layer) {};
Phaser_Tilemap.prototype.searchTileIndex = function (index, skip, reverse, layer) { return new Phaser_Tile(); };
Phaser_Tilemap.prototype.getTileBelow = function (layer, x, y) {};
Phaser_Tilemap.prototype.shuffle = function (x, y, width, height, layer) {};

var Phaser_DeviceButton = function (parent, buttonCode) {};
Phaser_DeviceButton.prototype.parent = new Phaser_Pointer();
Phaser_DeviceButton.prototype.repeats = new Number();
Phaser_DeviceButton.prototype.game = new Phaser_Game();
Phaser_DeviceButton.prototype.timeUp = new Number();
Phaser_DeviceButton.prototype.ctrlKey = new Boolean();
Phaser_DeviceButton.prototype.buttonCode = new Number();
Phaser_DeviceButton.prototype.onFloat = new Phaser_Signal();
Phaser_DeviceButton.prototype.timeDown = new Number();
Phaser_DeviceButton.prototype.isDown = new Boolean();
Phaser_DeviceButton.prototype.onUp = new Phaser_Signal();
Phaser_DeviceButton.prototype.duration = new Number();
Phaser_DeviceButton.prototype.shiftKey = new Boolean();
Phaser_DeviceButton.prototype.isUp = new Boolean();
Phaser_DeviceButton.prototype.onDown = new Phaser_Signal();
Phaser_DeviceButton.prototype.altKey = new Boolean();
Phaser_DeviceButton.prototype.event = new Object();
Phaser_DeviceButton.prototype.value = new Number();
Phaser_DeviceButton.prototype.start = function (event, value) {};
Phaser_DeviceButton.prototype.destroy = function () {};
Phaser_DeviceButton.prototype.stop = function (event, value) {};
Phaser_DeviceButton.prototype.padFloat = function (value) {};
Phaser_DeviceButton.prototype.reset = function () {};
Phaser_DeviceButton.prototype.justReleased = function (duration) { return new Boolean(); };
Phaser_DeviceButton.prototype.justPressed = function (duration) { return new Boolean(); };

var Phaser_Component_InputEnabled = function () {};
Phaser_Component_InputEnabled.prototype.input = new Phaser_InputHandler();
Phaser_Component_InputEnabled.prototype.inputEnabled = new Boolean();

var Phaser_Physics_Ninja_Body = function (system, sprite, type, id, radius, x, y, width, height) {};
Phaser_Physics_Ninja_Body.prototype.game = new Phaser_Game();
Phaser_Physics_Ninja_Body.prototype.gravityScale = new Number();
Phaser_Physics_Ninja_Body.prototype.bounce = new Number();
Phaser_Physics_Ninja_Body.prototype.immovable = new Boolean();
Phaser_Physics_Ninja_Body.prototype.facing = new Number();
Phaser_Physics_Ninja_Body.prototype.type = new Number();
Phaser_Physics_Ninja_Body.prototype.aabb = new Phaser_Physics_Ninja_AABB();
Phaser_Physics_Ninja_Body.prototype.speed = new Number();
Phaser_Physics_Ninja_Body.prototype.sprite = new Phaser_Sprite();
Phaser_Physics_Ninja_Body.prototype.tile = new Phaser_Physics_Ninja_Tile();
Phaser_Physics_Ninja_Body.prototype.angle = new Number();
Phaser_Physics_Ninja_Body.prototype.collideWorldBounds = new Boolean();
Phaser_Physics_Ninja_Body.prototype.drag = new Number();
Phaser_Physics_Ninja_Body.prototype.height = new Number();
Phaser_Physics_Ninja_Body.prototype.shape = new Object();
Phaser_Physics_Ninja_Body.prototype.checkCollision = new Object();
Phaser_Physics_Ninja_Body.prototype.touching = new Object();
Phaser_Physics_Ninja_Body.prototype.bottom = new Number();
Phaser_Physics_Ninja_Body.prototype.velocity = new Phaser_Point();
Phaser_Physics_Ninja_Body.prototype.maxSpeed = new Number();
Phaser_Physics_Ninja_Body.prototype.right = new Number();
Phaser_Physics_Ninja_Body.prototype.friction = new Number();
Phaser_Physics_Ninja_Body.prototype.wasTouching = new Object();
Phaser_Physics_Ninja_Body.prototype.system = new Phaser_Physics_Ninja();
Phaser_Physics_Ninja_Body.prototype.x = new Number();
Phaser_Physics_Ninja_Body.prototype.width = new Number();
Phaser_Physics_Ninja_Body.prototype.y = new Number();
Phaser_Physics_Ninja_Body.prototype.circle = new Phaser_Physics_Ninja_Circle();
Phaser_Physics_Ninja_Body.prototype.deltaX = function () { return new Number(); };
Phaser_Physics_Ninja_Body.prototype.deltaY = function () { return new Number(); };
Phaser_Physics_Ninja_Body.prototype.render = function (context, body, color, filled) {};
Phaser_Physics_Ninja_Body.prototype.deltaAbsY = function () { return new Number(); };
Phaser_Physics_Ninja_Body.prototype.postUpdate = function () {};
Phaser_Physics_Ninja_Body.prototype.deltaAbsX = function () { return new Number(); };
Phaser_Physics_Ninja_Body.prototype.destroy = function () {};
Phaser_Physics_Ninja_Body.prototype.setZeroVelocity = function () {};
Phaser_Physics_Ninja_Body.prototype.reset = function () {};
Phaser_Physics_Ninja_Body.prototype.preUpdate = function () {};

var Phaser_LinkedList = function () {};
Phaser_LinkedList.prototype.next = new Object();
Phaser_LinkedList.prototype.total = new Number();
Phaser_LinkedList.prototype.last = new Object();
Phaser_LinkedList.prototype.prev = new Object();
Phaser_LinkedList.prototype.first = new Object();
Phaser_LinkedList.prototype.add = function (item) { return new Object(); };
Phaser_LinkedList.prototype.callAll = function (callback) {};
Phaser_LinkedList.prototype.reset = function () {};
Phaser_LinkedList.prototype.remove = function (item) {};

var Phaser_Image = function (game, x, y, key, frame) {};
Phaser_Image.prototype._frame = new Phaser_Rectangle();
Phaser_Image.prototype._crop = new Phaser_Rectangle();
Phaser_Image.prototype.lifespan = new Number();
Phaser_Image.prototype.type = new Number();
Phaser_Image.prototype.inCamera = new Boolean();
Phaser_Image.prototype.offsetX = new Number();
Phaser_Image.prototype.tintedTexture = new Phaser_Canvas();
Phaser_Image.prototype.offsetY = new Number();
Phaser_Image.prototype.fixedToCamera = new Boolean();
Phaser_Image.prototype.renderOrderID = new Number();
Phaser_Image.prototype._width = new Number();
Phaser_Image.prototype.events = new Phaser_Events();
Phaser_Image.prototype.previousRotation = new Number();
Phaser_Image.prototype.bottom = new Number();
Phaser_Image.prototype.cameraOffset = new Phaser_Point();
Phaser_Image.prototype.smoothed = new Boolean();
Phaser_Image.prototype._bounds = new Phaser_Rectangle();
Phaser_Image.prototype.input = new Phaser_InputHandler();
Phaser_Image.prototype.left = new Number();
Phaser_Image.prototype.name = new String();
Phaser_Image.prototype.frame = new Number();
Phaser_Image.prototype.shader = new PIXI_AbstractFilter();
Phaser_Image.prototype.cropRect = new Phaser_Rectangle();
Phaser_Image.prototype.game = new Phaser_Game();
Phaser_Image.prototype.components = new Object();
Phaser_Image.prototype.alive = new Boolean();
Phaser_Image.prototype._fixedToCamera = new Boolean();
Phaser_Image.prototype.tint = new Number();
Phaser_Image.prototype.inputEnabled = new Boolean();
Phaser_Image.prototype.cachedTint = new Number();
Phaser_Image.prototype.world = new Phaser_Point();
Phaser_Image.prototype.top = new Number();
Phaser_Image.prototype.animations = new Phaser_AnimationManager();
Phaser_Image.prototype.angle = new Number();
Phaser_Image.prototype.key = new String();
Phaser_Image.prototype.debug = new Boolean();
Phaser_Image.prototype.frameName = new String();
Phaser_Image.prototype.texture = new PIXI_Texture();
Phaser_Image.prototype.destroyPhase = new Boolean();
Phaser_Image.prototype.right = new Number();
Phaser_Image.prototype.previousPosition = new Phaser_Point();
Phaser_Image.prototype._height = new Number();
Phaser_Image.prototype._exists = new Boolean();
Phaser_Image.prototype.pendingDestroy = new Boolean();
Phaser_Image.prototype.blendMode = new Number();
Phaser_Image.prototype.customRender = new Boolean();
Phaser_Image.prototype.anchor = new Phaser_Point();
Phaser_Image.prototype.autoCull = new Boolean();
Phaser_Image.prototype.exists = new Boolean();
Phaser_Image.prototype.z = new Number();
Phaser_Image.prototype.fresh = new Boolean();
Phaser_Image.prototype.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_Image.prototype.resizeFrame = function (parent, width, height) {};
Phaser_Image.prototype.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Image.prototype.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_Image.prototype.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_Image.prototype.postUpdate = function () {};
Phaser_Image.prototype.destroy = function (destroyChildren) {};
Phaser_Image.prototype.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_Image.prototype.updateCrop = function () {};
Phaser_Image.prototype.overlap = function (displayObject) { return new Boolean(); };
Phaser_Image.prototype.loadTexture = function (key, frame, stopAnimation) {};
Phaser_Image.prototype.reset = function (x, y, health) { return new PIXI_DisplayObject(); };
Phaser_Image.prototype.preUpdate = function () {};
Phaser_Image.prototype.crop = function (rect, copy) {};
Phaser_Image.prototype.update = function () {};
Phaser_Image.prototype.setFrame = function (frame) {};
Phaser_Image.prototype.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_Image.prototype.kill = function () { return new PIXI_DisplayObject(); };
Phaser_Image.prototype.resetFrame = function () {};

var Phaser_Physics_Ninja_AABB = function (body, x, y, width, height) {};
Phaser_Physics_Ninja_AABB.prototype.aabbTileProjections = new Object();
Phaser_Physics_Ninja_AABB.prototype.oldpos = new Phaser_Point();
Phaser_Physics_Ninja_AABB.prototype.oV = new Number();
Phaser_Physics_Ninja_AABB.prototype.pos = new Phaser_Point();
Phaser_Physics_Ninja_AABB.prototype.height = new Number();
Phaser_Physics_Ninja_AABB.prototype.velocity = new Phaser_Point();
Phaser_Physics_Ninja_AABB.prototype.system = new Phaser_Physics_Ninja_Body();
Phaser_Physics_Ninja_AABB.prototype.width = new Number();
Phaser_Physics_Ninja_AABB.prototype.oH = new Number();
Phaser_Physics_Ninja_AABB.prototype.xw = new Number();
Phaser_Physics_Ninja_AABB.prototype.projAABB_22DegS = function (x, y, obj, t) { return new Number(); };
Phaser_Physics_Ninja_AABB.prototype.projAABB_Concave = function (x, y, obj, t) { return new Number(); };
Phaser_Physics_Ninja_AABB.prototype.collideAABBVsAABB = function (aabb) {};
Phaser_Physics_Ninja_AABB.prototype.reportCollisionVsBody = function (px, py, dx, dy, obj) {};
Phaser_Physics_Ninja_AABB.prototype.collideAABBVsTile = function (tile) {};
Phaser_Physics_Ninja_AABB.prototype.projAABB_Full = function (x, y, obj, t) { return new Number(); };
Phaser_Physics_Ninja_AABB.prototype.projAABB_Convex = function (x, y, obj, t) { return new Number(); };
Phaser_Physics_Ninja_AABB.prototype.projAABB_67DegB = function (x, y, obj, t) { return new Number(); };
Phaser_Physics_Ninja_AABB.prototype.projAABB_45Deg = function (x, y, obj, t) { return new Number(); };
Phaser_Physics_Ninja_AABB.prototype.collideWorldBounds = function () {};
Phaser_Physics_Ninja_AABB.prototype.render = function (context, xOffset, yOffset, color, filled) {};
Phaser_Physics_Ninja_AABB.prototype.resolveTile = function (x, y, body, tile) { return new Boolean(); };
Phaser_Physics_Ninja_AABB.prototype.destroy = function () {};
Phaser_Physics_Ninja_AABB.prototype.integrate = function () {};
Phaser_Physics_Ninja_AABB.prototype.projAABB_Half = function (x, y, obj, t) { return new Number(); };
Phaser_Physics_Ninja_AABB.prototype.reportCollisionVsWorld = function (px, py, dx, dy) {};
Phaser_Physics_Ninja_AABB.prototype.projAABB_22DegB = function (x, y, obj, t) { return new Number(); };
Phaser_Physics_Ninja_AABB.prototype.projAABB_67DegS = function (x, y, obj, t) { return new Number(); };

var Phaser_Sound = function (game, key, volume, loop) {};
Phaser_Sound.prototype.paused = new Boolean();
Phaser_Sound.prototype.onMute = new Phaser_Signal();
Phaser_Sound.prototype._tempPosition = new Number();
Phaser_Sound.prototype.externalNode = new Object();
Phaser_Sound.prototype._onDecodedEventDispatched = new Boolean();
Phaser_Sound.prototype.usingAudioTag = new Boolean();
Phaser_Sound.prototype.gainNode = new Object();
Phaser_Sound.prototype._buffer = new Object();
Phaser_Sound.prototype.loop = new Boolean();
Phaser_Sound.prototype.context = new AudioContext();
Phaser_Sound.prototype.onStop = new Phaser_Signal();
Phaser_Sound.prototype.totalDuration = new Number();
Phaser_Sound.prototype.isPlaying = new Boolean();
Phaser_Sound.prototype.pendingPlayback = new Boolean();
Phaser_Sound.prototype._volume = new Number();
Phaser_Sound.prototype.masterGainNode = new Object();
Phaser_Sound.prototype.mute = new Boolean();
Phaser_Sound.prototype.onPlay = new Phaser_Signal();
Phaser_Sound.prototype.autoplay = new Boolean();
Phaser_Sound.prototype.onResume = new Phaser_Signal();
Phaser_Sound.prototype.volume = new Number();
Phaser_Sound.prototype.currentTime = new Number();
Phaser_Sound.prototype._sound = new Object();
Phaser_Sound.prototype.name = new String();
Phaser_Sound.prototype.position = new Number();
Phaser_Sound.prototype.onLoop = new Phaser_Signal();
Phaser_Sound.prototype._muted = new Boolean();
Phaser_Sound.prototype.game = new Phaser_Game();
Phaser_Sound.prototype.onDecoded = new Phaser_Signal();
Phaser_Sound.prototype.isDecoding = new Boolean();
Phaser_Sound.prototype.onPause = new Phaser_Signal();
Phaser_Sound.prototype.pausedPosition = new Number();
Phaser_Sound.prototype.isDecoded = new Boolean();
Phaser_Sound.prototype.duration = new Number();
Phaser_Sound.prototype._paused = new Boolean();
Phaser_Sound.prototype.onFadeComplete = new Phaser_Signal();
Phaser_Sound.prototype.startTime = new Number();
Phaser_Sound.prototype.stopTime = new Number();
Phaser_Sound.prototype.override = new Boolean();
Phaser_Sound.prototype.durationMS = new Number();
Phaser_Sound.prototype.key = new String();
Phaser_Sound.prototype._tempVolume = new Number();
Phaser_Sound.prototype._muteVolume = new Number();
Phaser_Sound.prototype._tempLoop = new Boolean();
Phaser_Sound.prototype.pausedTime = new Number();
Phaser_Sound.prototype.usingWebAudio = new Boolean();
Phaser_Sound.prototype.allowMultiple = new Boolean();
Phaser_Sound.prototype.onMarkerComplete = new Phaser_Signal();
Phaser_Sound.prototype.fadeTween = new Phaser_Tween();
Phaser_Sound.prototype.markers = new Object();
Phaser_Sound.prototype._tempMarker = new Number();
Phaser_Sound.prototype.currentMarker = new String();
Phaser_Sound.prototype.play = function (marker, position, volume, loop, forceRestart) { return new Phaser_Sound(); };
Phaser_Sound.prototype.fadeTo = function (duration, volume) {};
Phaser_Sound.prototype.removeMarker = function (name) {};
Phaser_Sound.prototype.destroy = function (remove) {};
Phaser_Sound.prototype.pause = function () {};
Phaser_Sound.prototype.stop = function () {};
Phaser_Sound.prototype.fadeOut = function (duration) {};
Phaser_Sound.prototype.update = function () {};
Phaser_Sound.prototype.fadeIn = function (duration, loop, marker) {};
Phaser_Sound.prototype.loopFull = function (volume) { return new Phaser_Sound(); };
Phaser_Sound.prototype.resume = function () {};
Phaser_Sound.prototype.restart = function (marker, position, volume, loop) {};
Phaser_Sound.prototype.onEndedHandler = function () {};
Phaser_Sound.prototype.fadeComplete = function () {};
Phaser_Sound.prototype.soundHasUnlocked = function (key) {};
Phaser_Sound.prototype.addMarker = function (name, start, duration, volume, loop) {};

var Phaser_Physics_P2_Body = function (game, sprite, x, y, mass) {};
Phaser_Physics_P2_Body.prototype._bodyCallbackContext = new Object();
Phaser_Physics_P2_Body.prototype.sleepSpeedLimit = new Number();
Phaser_Physics_P2_Body.prototype.collidesWith = new Array();
Phaser_Physics_P2_Body.prototype.data = new p2_Body();
Phaser_Physics_P2_Body.prototype.type = new Number();
Phaser_Physics_P2_Body.prototype._bodyCallbacks = new Object();
Phaser_Physics_P2_Body.prototype.STATIC = new Number();
Phaser_Physics_P2_Body.prototype.angularForce = new Number();
Phaser_Physics_P2_Body.prototype.dynamic = new Boolean();
Phaser_Physics_P2_Body.prototype.collideWorldBounds = new Boolean();
Phaser_Physics_P2_Body.prototype.id = new Number();
Phaser_Physics_P2_Body.prototype.motionState = new Number();
Phaser_Physics_P2_Body.prototype.static = new Boolean();
Phaser_Physics_P2_Body.prototype.offset = new Phaser_Point();
Phaser_Physics_P2_Body.prototype.angularDamping = new Number();
Phaser_Physics_P2_Body.prototype.damping = new Number();
Phaser_Physics_P2_Body.prototype.debugBody = new Phaser_Physics_P2_BodyDebug();
Phaser_Physics_P2_Body.prototype.force = new Phaser_Physics_P2_InversePointProxy();
Phaser_Physics_P2_Body.prototype.game = new Phaser_Game();
Phaser_Physics_P2_Body.prototype._reset = new Boolean();
Phaser_Physics_P2_Body.prototype._groupCallbacks = new Object();
Phaser_Physics_P2_Body.prototype.mass = new Number();
Phaser_Physics_P2_Body.prototype.inertia = new Number();
Phaser_Physics_P2_Body.prototype.world = new Phaser_Physics_P2();
Phaser_Physics_P2_Body.prototype.allowSleep = new Boolean();
Phaser_Physics_P2_Body.prototype.sprite = new Phaser_Sprite();
Phaser_Physics_P2_Body.prototype.angle = new Number();
Phaser_Physics_P2_Body.prototype.removeNextStep = new Boolean();
Phaser_Physics_P2_Body.prototype.dirty = new Boolean();
Phaser_Physics_P2_Body.prototype.debug = new Boolean();
Phaser_Physics_P2_Body.prototype._collideWorldBounds = new Boolean();
Phaser_Physics_P2_Body.prototype.onEndContact = new Phaser_Signal();
Phaser_Physics_P2_Body.prototype.KINEMATIC = new Number();
Phaser_Physics_P2_Body.prototype.rotation = new Number();
Phaser_Physics_P2_Body.prototype.velocity = new Phaser_Physics_P2_InversePointProxy();
Phaser_Physics_P2_Body.prototype.angularVelocity = new Number();
Phaser_Physics_P2_Body.prototype.DYNAMIC = new Number();
Phaser_Physics_P2_Body.prototype.kinematic = new Boolean();
Phaser_Physics_P2_Body.prototype.gravity = new Phaser_Point();
Phaser_Physics_P2_Body.prototype.x = new Number();
Phaser_Physics_P2_Body.prototype.y = new Number();
Phaser_Physics_P2_Body.prototype.onBeginContact = new Phaser_Signal();
Phaser_Physics_P2_Body.prototype.fixedRotation = new Boolean();
Phaser_Physics_P2_Body.prototype.setCollisionGroup = function (group, shape) {};
Phaser_Physics_P2_Body.prototype.createGroupCallback = function (group, callback, callbackContext) {};
Phaser_Physics_P2_Body.prototype.addParticle = function (offsetX, offsetY, rotation) { return new p2_Particle(); };
Phaser_Physics_P2_Body.prototype.addToWorld = function () {};
Phaser_Physics_P2_Body.prototype.clearCollision = function (clearGroup, clearMask, shape) {};
Phaser_Physics_P2_Body.prototype.applyDamping = function (dt) {};
Phaser_Physics_P2_Body.prototype.getVelocityAtPoint = function (result, relativePoint) { return new Array(); };
Phaser_Physics_P2_Body.prototype.moveUp = function (speed) {};
Phaser_Physics_P2_Body.prototype.collides = function (group, callback, callbackContext, shape) {};
Phaser_Physics_P2_Body.prototype.postUpdate = function () {};
Phaser_Physics_P2_Body.prototype.setRectangleFromSprite = function (sprite) { return new p2_Rectangle(); };
Phaser_Physics_P2_Body.prototype.createBodyCallback = function (object, callback, callbackContext) {};
Phaser_Physics_P2_Body.prototype.moveBackward = function (speed) {};
Phaser_Physics_P2_Body.prototype.addShape = function (shape, offsetX, offsetY, rotation) { return new p2_Shape(); };
Phaser_Physics_P2_Body.prototype.destroy = function () {};
Phaser_Physics_P2_Body.prototype.moveDown = function (speed) {};
Phaser_Physics_P2_Body.prototype.removeShape = function (shape) { return new Boolean(); };
Phaser_Physics_P2_Body.prototype.toWorldFrame = function (out, localPoint) {};
Phaser_Physics_P2_Body.prototype.addLine = function (length, offsetX, offsetY, rotation) { return new p2_Line(); };
Phaser_Physics_P2_Body.prototype.setZeroVelocity = function () {};
Phaser_Physics_P2_Body.prototype.moveRight = function (speed) {};
Phaser_Physics_P2_Body.prototype.thrust = function (speed) {};
Phaser_Physics_P2_Body.prototype.reset = function (x, y, resetDamping, resetMass) {};
Phaser_Physics_P2_Body.prototype.setZeroRotation = function () {};
Phaser_Physics_P2_Body.prototype.moveLeft = function (speed) {};
Phaser_Physics_P2_Body.prototype.setRectangle = function (width, height, offsetX, offsetY, rotation) { return new p2_Rectangle(); };
Phaser_Physics_P2_Body.prototype.preUpdate = function () {};
Phaser_Physics_P2_Body.prototype.updateCollisionMask = function (shape) {};
Phaser_Physics_P2_Body.prototype.applyImpulseLocal = function (impulse, localX, localY) {};
Phaser_Physics_P2_Body.prototype.moveForward = function (speed) {};
Phaser_Physics_P2_Body.prototype.getCollisionMask = function () { return new Number(); };
Phaser_Physics_P2_Body.prototype.addPlane = function (offsetX, offsetY, rotation) { return new p2_Plane(); };
Phaser_Physics_P2_Body.prototype.shapeChanged = function () {};
Phaser_Physics_P2_Body.prototype.setZeroDamping = function () {};
Phaser_Physics_P2_Body.prototype.rotateLeft = function (speed) {};
Phaser_Physics_P2_Body.prototype.adjustCenterOfMass = function () {};
Phaser_Physics_P2_Body.prototype.loadPolygon = function (key, object) { return new Boolean(); };
Phaser_Physics_P2_Body.prototype.setMaterial = function (material, shape) {};
Phaser_Physics_P2_Body.prototype.clearShapes = function () {};
Phaser_Physics_P2_Body.prototype.setZeroForce = function () {};
Phaser_Physics_P2_Body.prototype.addPolygon = function (options, options_optimalDecomp, options_skipSimpleCheck, options_removeCollinearPoints, points) { return new Boolean(); };
Phaser_Physics_P2_Body.prototype.toLocalFrame = function (out, worldPoint) {};
Phaser_Physics_P2_Body.prototype.addRectangle = function (width, height, offsetX, offsetY, rotation) { return new p2_Box(); };
Phaser_Physics_P2_Body.prototype.removeFromWorld = function () {};
Phaser_Physics_P2_Body.prototype.addFixture = function (fixtureData) { return new Array(); };
Phaser_Physics_P2_Body.prototype.addCapsule = function (length, radius, offsetX, offsetY, rotation) { return new p2_Capsule(); };
Phaser_Physics_P2_Body.prototype.rotateRight = function (speed) {};
Phaser_Physics_P2_Body.prototype.setCircle = function (radius, offsetX, offsetY, rotation) {};
Phaser_Physics_P2_Body.prototype.reverse = function (speed) {};
Phaser_Physics_P2_Body.prototype.addPhaserPolygon = function (key, object) {};
Phaser_Physics_P2_Body.prototype.applyForce = function (force, worldX, worldY) {};
Phaser_Physics_P2_Body.prototype.applyImpulse = function (impulse, worldX, worldY) {};
Phaser_Physics_P2_Body.prototype.addCircle = function (radius, offsetX, offsetY, rotation) { return new p2_Circle(); };

var Phaser_Component_Destroy = function () {};
Phaser_Component_Destroy.prototype.destroyPhase = new Boolean();
Phaser_Component_Destroy.prototype.destroy = function (destroyChildren) {};

var Phaser_Component_LoadTexture = function () {};
Phaser_Component_LoadTexture.prototype._frame = new Phaser_Rectangle();
Phaser_Component_LoadTexture.prototype.frameName = new String();
Phaser_Component_LoadTexture.prototype.customRender = new Boolean();
Phaser_Component_LoadTexture.prototype.frame = new Number();
Phaser_Component_LoadTexture.prototype.resizeFrame = function (parent, width, height) {};
Phaser_Component_LoadTexture.prototype.setFrame = function (frame) {};
Phaser_Component_LoadTexture.prototype.loadTexture = function (key, frame, stopAnimation) {};
Phaser_Component_LoadTexture.prototype.resetFrame = function () {};

var Phaser_BitmapText = function (game, x, y, font, text, size, align) {};
Phaser_BitmapText.prototype.lifespan = new Number();
Phaser_BitmapText.prototype.outOfBoundsKill = new Boolean();
Phaser_BitmapText.prototype.type = new Number();
Phaser_BitmapText.prototype.align = new String();
Phaser_BitmapText.prototype.body = new Phaser_Physics_Arcade_Body();
Phaser_BitmapText.prototype.inCamera = new Boolean();
Phaser_BitmapText.prototype.offsetX = new Number();
Phaser_BitmapText.prototype.offsetY = new Number();
Phaser_BitmapText.prototype.children = new Array_DisplayObject_();
Phaser_BitmapText.prototype.text = new String();
Phaser_BitmapText.prototype.fixedToCamera = new Boolean();
Phaser_BitmapText.prototype.renderOrderID = new Number();
Phaser_BitmapText.prototype.events = new Phaser_Events();
Phaser_BitmapText.prototype.physicsType = new Number();
Phaser_BitmapText.prototype.maxWidth = new Number();
Phaser_BitmapText.prototype.previousRotation = new Number();
Phaser_BitmapText.prototype._align = new String();
Phaser_BitmapText.prototype.bottom = new Number();
Phaser_BitmapText.prototype.cameraOffset = new Phaser_Point();
Phaser_BitmapText.prototype.smoothed = new Boolean();
Phaser_BitmapText.prototype._bounds = new Phaser_Rectangle();
Phaser_BitmapText.prototype.textWidth = new Number();
Phaser_BitmapText.prototype._tint = new Number();
Phaser_BitmapText.prototype.input = new Phaser_InputHandler();
Phaser_BitmapText.prototype.left = new Number();
Phaser_BitmapText.prototype.name = new String();
Phaser_BitmapText.prototype.fontSize = new Number();
Phaser_BitmapText.prototype._glyphs = new Array();
Phaser_BitmapText.prototype.game = new Phaser_Game();
Phaser_BitmapText.prototype.components = new Object();
Phaser_BitmapText.prototype._font = new String();
Phaser_BitmapText.prototype.alive = new Boolean();
Phaser_BitmapText.prototype._outOfBoundsFired = new Boolean();
Phaser_BitmapText.prototype._fixedToCamera = new Boolean();
Phaser_BitmapText.prototype.inWorld = new Boolean();
Phaser_BitmapText.prototype.tint = new Number();
Phaser_BitmapText.prototype.inputEnabled = new Boolean();
Phaser_BitmapText.prototype.world = new Phaser_Point();
Phaser_BitmapText.prototype.top = new Number();
Phaser_BitmapText.prototype.animations = new Phaser_AnimationManager();
Phaser_BitmapText.prototype.angle = new Number();
Phaser_BitmapText.prototype.checkWorldBounds = new Boolean();
Phaser_BitmapText.prototype.key = new String();
Phaser_BitmapText.prototype._data = new String();
Phaser_BitmapText.prototype._fontSize = new Number();
Phaser_BitmapText.prototype.dirty = new Boolean();
Phaser_BitmapText.prototype._maxWidth = new Number();
Phaser_BitmapText.prototype.debug = new Boolean();
Phaser_BitmapText.prototype.destroyPhase = new Boolean();
Phaser_BitmapText.prototype.right = new Number();
Phaser_BitmapText.prototype.previousPosition = new Phaser_Point();
Phaser_BitmapText.prototype._exists = new Boolean();
Phaser_BitmapText.prototype.textHeight = new Number();
Phaser_BitmapText.prototype._prevAnchor = new Phaser_Point();
Phaser_BitmapText.prototype.pendingDestroy = new Boolean();
Phaser_BitmapText.prototype.anchor = new Phaser_Point();
Phaser_BitmapText.prototype.autoCull = new Boolean();
Phaser_BitmapText.prototype.x = new Number();
Phaser_BitmapText.prototype.exists = new Boolean();
Phaser_BitmapText.prototype.y = new Number();
Phaser_BitmapText.prototype.z = new Number();
Phaser_BitmapText.prototype._text = new String();
Phaser_BitmapText.prototype.fresh = new Boolean();
Phaser_BitmapText.prototype.font = new String();
Phaser_BitmapText.prototype.purgeGlyphs = function () { return new Number(); };
Phaser_BitmapText.prototype.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_BitmapText.prototype.postUpdate = function () {};
Phaser_BitmapText.prototype.destroy = function (destroyChildren) {};
Phaser_BitmapText.prototype.reset = function (x, y, health) { return new PIXI_DisplayObject(); };
Phaser_BitmapText.prototype.updateTransform = function () {};
Phaser_BitmapText.prototype.preUpdate = function () { return new Boolean(); };
Phaser_BitmapText.prototype.update = function () {};
Phaser_BitmapText.prototype.updateText = function () {};
Phaser_BitmapText.prototype.kill = function () { return new PIXI_DisplayObject(); };
Phaser_BitmapText.prototype.scanLine = function (data, scale, text) { return new Object(); };
Phaser_BitmapText.prototype.setText = function (text) {};

var Phaser_Polygon = function (points) {};
Phaser_Polygon.prototype.area = new Number();
Phaser_Polygon.prototype.closed = new Boolean();
Phaser_Polygon.prototype.type = new Number();
Phaser_Polygon.prototype._points = new Array();
Phaser_Polygon.prototype.points = new Array__Phaser_Point_();
Phaser_Polygon.prototype.flatten = function () { return new Phaser_Polygon(); };
Phaser_Polygon.prototype.contains = function (x, y) { return new Boolean(); };
Phaser_Polygon.prototype.calculateArea = function (y0) { return new Number(); };
Phaser_Polygon.prototype.toNumberArray = function (output) { return new Array(); };
Phaser_Polygon.prototype.clone = function (output) { return new Phaser_Polygon(); };
Phaser_Polygon.prototype.setTo = function (points) { return new Phaser_Polygon(); };

var Phaser_AudioSprite = function (game, key) {};
Phaser_AudioSprite.prototype.game = new Phaser_Game();
Phaser_AudioSprite.prototype.sounds = new Object();
Phaser_AudioSprite.prototype.config = new Object();
Phaser_AudioSprite.prototype.autoplayKey = new String();
Phaser_AudioSprite.prototype.key = new String();
Phaser_AudioSprite.prototype.autoplay = new Boolean();
Phaser_AudioSprite.prototype.play = function (marker, volume) { return new Phaser_Sound(); };
Phaser_AudioSprite.prototype.stop = function (marker) {};
Phaser_AudioSprite.prototype.get = function (marker) { return new Phaser_Sound(); };

var Phaser_Cache = function (game) {};
Phaser_Cache.TEXT = new Number();
Phaser_Cache.IMAGE = new Number();
Phaser_Cache.SHADER = new Number();
Phaser_Cache.CANVAS = new Number();
Phaser_Cache.SOUND = new Number();
Phaser_Cache.BITMAPDATA = new Number();
Phaser_Cache.VIDEO = new Number();
Phaser_Cache.RENDER_TEXTURE = new Number();
Phaser_Cache.TILEMAP = new Number();
Phaser_Cache.TEXTURE = new Number();
Phaser_Cache.BINARY = new Number();
Phaser_Cache.JSON = new Number();
Phaser_Cache.BITMAPFONT = new Number();
Phaser_Cache.XML = new Number();
Phaser_Cache.PHYSICS = new Number();
Phaser_Cache.prototype._urlMap = new Object();
Phaser_Cache.prototype._cache = new Object();
Phaser_Cache.prototype._urlResolver = new Phaser_Image();
Phaser_Cache.prototype._cacheMap = new Array();
Phaser_Cache.prototype.onSoundUnlock = new Phaser_Signal();
Phaser_Cache.prototype.game = new Phaser_Game();
Phaser_Cache.prototype._urlTemp = new String();
Phaser_Cache.prototype.autoResolveURL = new Boolean();
Phaser_Cache.prototype.removeBitmapFont = function (key) {};
Phaser_Cache.prototype._resolveURL = function (url, data) { return new String(); };
Phaser_Cache.prototype.getItem = function (key, cache, method, property) { return new Object(); };
Phaser_Cache.prototype.addPhysicsData = function (key, url, JSONData, format) {};
Phaser_Cache.prototype.getFrameCount = function (key, cache) { return new Number(); };
Phaser_Cache.prototype.addTextureAtlas = function (key, url, data, atlasData, format) {};
Phaser_Cache.prototype.reloadSound = function (key) {};
Phaser_Cache.prototype.checkTextKey = function (key) { return new Boolean(); };
Phaser_Cache.prototype.addRenderTexture = function (key, texture) {};
Phaser_Cache.prototype.removeJSON = function (key) {};
Phaser_Cache.prototype.checkBitmapFontKey = function (key) { return new Boolean(); };
Phaser_Cache.prototype.addSpriteSheet = function (key, url, data, frameWidth, frameHeight, frameMax, margin, spacing) {};
Phaser_Cache.prototype.addDefaultImage = function () {};
Phaser_Cache.prototype.getBitmapData = function (key) { return new Phaser_BitmapData(); };
Phaser_Cache.prototype.removeRenderTexture = function (key) {};
Phaser_Cache.prototype.getText = function (key) { return new Object(); };
Phaser_Cache.prototype.addImage = function (key, url, data) { return new Object(); };
Phaser_Cache.prototype.removeBinary = function (key) {};
Phaser_Cache.prototype.removeTilemap = function (key) {};
Phaser_Cache.prototype.destroy = function () {};
Phaser_Cache.prototype.getRenderTexture = function (key) { return new Object(); };
Phaser_Cache.prototype.checkSoundKey = function (key) { return new Boolean(); };
Phaser_Cache.prototype.removeCanvas = function (key) {};
Phaser_Cache.prototype.getImage = function (key, full) { return new Phaser_Image(); };
Phaser_Cache.prototype.checkBitmapDataKey = function (key) { return new Boolean(); };
Phaser_Cache.prototype.removeSound = function (key) {};
Phaser_Cache.prototype.getBitmapFont = function (key) { return new Phaser_BitmapFont(); };
Phaser_Cache.prototype.addSound = function (key, url, data, webAudio, audioTag) {};
Phaser_Cache.prototype.addTilemap = function (key, url, mapData, format) {};
Phaser_Cache.prototype.getBaseTexture = function (key, cache) { return new PIXI_BaseTexture(); };
Phaser_Cache.prototype.getPhysicsData = function (key, object, fixtureKey) { return new Object(); };
Phaser_Cache.prototype.checkBinaryKey = function (key) { return new Boolean(); };
Phaser_Cache.prototype.checkTextureKey = function (key) { return new Boolean(); };
Phaser_Cache.prototype.getXML = function (key) { return new Object(); };
Phaser_Cache.prototype.getFrameByIndex = function (key, index, cache) { return new Phaser_Frame(); };
Phaser_Cache.prototype.addBinary = function (key, binaryData) {};
Phaser_Cache.prototype.removeImage = function (key, removeFromPixi) {};
Phaser_Cache.prototype.removePhysics = function (key) {};
Phaser_Cache.prototype.removeTextureAtlas = function (key) {};
Phaser_Cache.prototype.getTextureFrame = function (key) { return new Phaser_Frame(); };
Phaser_Cache.prototype.getPixiBaseTexture = function (key) { return new PIXI_BaseTexture(); };
Phaser_Cache.prototype.getSound = function (key) { return new Phaser_Sound(); };
Phaser_Cache.prototype.addXML = function (key, url, data) {};
Phaser_Cache.prototype.checkVideoKey = function (key) { return new Boolean(); };
Phaser_Cache.prototype.checkImageKey = function (key) { return new Boolean(); };
Phaser_Cache.prototype.hasFrameData = function (key, cache) { return new Boolean(); };
Phaser_Cache.prototype.addVideo = function (key, url, data, isBlob) {};
Phaser_Cache.prototype.getVideo = function (key) { return new Phaser_Video(); };
Phaser_Cache.prototype.addJSON = function (key, url, data) {};
Phaser_Cache.prototype.checkJSONKey = function (key) { return new Boolean(); };
Phaser_Cache.prototype.checkShaderKey = function (key) { return new Boolean(); };
Phaser_Cache.prototype.removeXML = function (key) {};
Phaser_Cache.prototype.decodedSound = function (key, data) {};
Phaser_Cache.prototype.checkPhysicsKey = function (key) { return new Boolean(); };
Phaser_Cache.prototype.getFrameByName = function (key, name, cache) { return new Phaser_Frame(); };
Phaser_Cache.prototype.getTilemapData = function (key) { return new Object(); };
Phaser_Cache.prototype.removeText = function (key) {};
Phaser_Cache.prototype.removeVideo = function (key) {};
Phaser_Cache.prototype.checkKey = function (cache, key) { return new Boolean(); };
Phaser_Cache.prototype.getURL = function (url) { return new Object(); };
Phaser_Cache.prototype.removeSpriteSheet = function (key) {};
Phaser_Cache.prototype.addBitmapData = function (key, bitmapData, frameData) { return new Phaser_BitmapData(); };
Phaser_Cache.prototype.addShader = function (key, url, data) {};
Phaser_Cache.prototype.getBinary = function (key) { return new Object(); };
Phaser_Cache.prototype.getJSON = function (key, clone) { return new Object(); };
Phaser_Cache.prototype.updateFrameData = function (key, frameData, cache) {};
Phaser_Cache.prototype.checkTilemapKey = function (key) { return new Boolean(); };
Phaser_Cache.prototype.clearGLTextures = function () {};
Phaser_Cache.prototype.reloadSoundComplete = function (key) {};
Phaser_Cache.prototype.getFrame = function (key, cache) { return new Phaser_Frame(); };
Phaser_Cache.prototype.checkXMLKey = function (key) { return new Boolean(); };
Phaser_Cache.prototype.isSoundDecoded = function (key) { return new Boolean(); };
Phaser_Cache.prototype.addBitmapFont = function (key, url, data, atlasData, xSpacing, ySpacing) {};
Phaser_Cache.prototype.isSoundReady = function (key) { return new Boolean(); };
Phaser_Cache.prototype.checkURL = function (url) { return new Boolean(); };
Phaser_Cache.prototype.getCanvas = function (key) { return new Object(); };
Phaser_Cache.prototype.removeBitmapData = function (key) {};
Phaser_Cache.prototype.updateSound = function (key) {};
Phaser_Cache.prototype.getShader = function (key) { return new String(); };
Phaser_Cache.prototype.getFrameData = function (key, cache) { return new Phaser_FrameData(); };
Phaser_Cache.prototype.addMissingImage = function () {};
Phaser_Cache.prototype.addText = function (key, url, data) {};
Phaser_Cache.prototype.addCanvas = function (key, canvas, context) {};
Phaser_Cache.prototype.getKeys = function (cache) { return new Array(); };
Phaser_Cache.prototype.getPixiTexture = function (key) { return new PIXI_Texture(); };
Phaser_Cache.prototype.checkRenderTextureKey = function (key) { return new Boolean(); };
Phaser_Cache.prototype.checkCanvasKey = function (key) { return new Boolean(); };
Phaser_Cache.prototype.removeShader = function (key) {};
Phaser_Cache.prototype.getSoundData = function (key) { return new Object(); };

var Phaser_MSPointer = function (game) {};
Phaser_MSPointer.prototype.pointerMoveCallback = new Function();
Phaser_MSPointer.prototype._onMSPointerOver = new Function();
Phaser_MSPointer.prototype.game = new Phaser_Game();
Phaser_MSPointer.prototype.pointerDownCallback = new Function();
Phaser_MSPointer.prototype._onMSPointerOut = new Function();
Phaser_MSPointer.prototype._onMSPointerMove = new Function();
Phaser_MSPointer.prototype.capture = new Boolean();
Phaser_MSPointer.prototype.callbackContext = new Object();
Phaser_MSPointer.prototype.pointerUpCallback = new Function();
Phaser_MSPointer.prototype.enabled = new Boolean();
Phaser_MSPointer.prototype.button = new Number();
Phaser_MSPointer.prototype.input = new Phaser_Input();
Phaser_MSPointer.prototype._onMSPointerUp = new Function();
Phaser_MSPointer.prototype._onMSPointerDown = new Function();
Phaser_MSPointer.prototype._onMSPointerUpGlobal = new Function();
Phaser_MSPointer.prototype.event = new MSPointerEvent();
Phaser_MSPointer.prototype.start = function () {};
Phaser_MSPointer.prototype.onPointerUp = function (event) {};
Phaser_MSPointer.prototype.onPointerMove = function (event) {};
Phaser_MSPointer.prototype.stop = function () {};
Phaser_MSPointer.prototype.onPointerDown = function (event) {};
Phaser_MSPointer.prototype.onPointerOut = function (event) {};
Phaser_MSPointer.prototype.onPointerUpGlobal = function (event) {};

var Phaser_Plugin = function (game, parent) {};
Phaser_Plugin.prototype.hasPostRender = new Boolean();
Phaser_Plugin.prototype.parent = new Object();
Phaser_Plugin.prototype.hasPreUpdate = new Boolean();
Phaser_Plugin.prototype.game = new Phaser_Game();
Phaser_Plugin.prototype.visible = new Boolean();
Phaser_Plugin.prototype.hasPostUpdate = new Boolean();
Phaser_Plugin.prototype.active = new Boolean();
Phaser_Plugin.prototype.hasRender = new Boolean();
Phaser_Plugin.prototype.hasUpdate = new Boolean();
Phaser_Plugin.prototype.postRender = function () {};
Phaser_Plugin.prototype.update = function () {};
Phaser_Plugin.prototype.destroy = function () {};
Phaser_Plugin.prototype.preUpdate = function () {};
Phaser_Plugin.prototype.render = function () {};

var Phaser_Component_Core = function () {};
Phaser_Component_Core.prototype.previousRotation = new Number();
Phaser_Component_Core.prototype.game = new Phaser_Game();
Phaser_Component_Core.prototype.components = new Object();
Phaser_Component_Core.prototype.debug = new Boolean();
Phaser_Component_Core.prototype._bounds = new Phaser_Rectangle();
Phaser_Component_Core.prototype.previousPosition = new Phaser_Point();
Phaser_Component_Core.prototype._exists = new Boolean();
Phaser_Component_Core.prototype.pendingDestroy = new Boolean();
Phaser_Component_Core.prototype.world = new Phaser_Point();
Phaser_Component_Core.prototype.animations = new Phaser_AnimationManager();
Phaser_Component_Core.prototype.name = new String();
Phaser_Component_Core.prototype.exists = new Boolean();
Phaser_Component_Core.prototype.z = new Number();
Phaser_Component_Core.prototype.renderOrderID = new Number();
Phaser_Component_Core.prototype.fresh = new Boolean();
Phaser_Component_Core.prototype.events = new Phaser_Events();
Phaser_Component_Core.prototype.key = new String();
Phaser_Component_Core.prototype.init = function () {};
Phaser_Component_Core.prototype.postUpdate = function () {};
Phaser_Component_Core.prototype.update = function () {};
Phaser_Component_Core.prototype.install = function () {};

var Phaser_Sprite = function (game, x, y, key, frame) {};
Phaser_Sprite.prototype._frame = new Phaser_Rectangle();
Phaser_Sprite.prototype._crop = new Phaser_Rectangle();
Phaser_Sprite.prototype.lifespan = new Number();
Phaser_Sprite.prototype.outOfBoundsKill = new Boolean();
Phaser_Sprite.prototype.type = new Number();
Phaser_Sprite.prototype.body = new Phaser_Physics_Arcade_Body();
Phaser_Sprite.prototype.inCamera = new Boolean();
Phaser_Sprite.prototype.offsetX = new Number();
Phaser_Sprite.prototype.tintedTexture = new Phaser_Canvas();
Phaser_Sprite.prototype.offsetY = new Number();
Phaser_Sprite.prototype.maxHealth = new Number();
Phaser_Sprite.prototype.fixedToCamera = new Boolean();
Phaser_Sprite.prototype.renderOrderID = new Number();
Phaser_Sprite.prototype._width = new Number();
Phaser_Sprite.prototype.events = new Phaser_Events();
Phaser_Sprite.prototype.physicsType = new Number();
Phaser_Sprite.prototype.previousRotation = new Number();
Phaser_Sprite.prototype.bottom = new Number();
Phaser_Sprite.prototype.cameraOffset = new Phaser_Point();
Phaser_Sprite.prototype.smoothed = new Boolean();
Phaser_Sprite.prototype._bounds = new Phaser_Rectangle();
Phaser_Sprite.prototype.input = new Phaser_InputHandler();
Phaser_Sprite.prototype.left = new Number();
Phaser_Sprite.prototype.name = new String();
Phaser_Sprite.prototype.frame = new Number();
Phaser_Sprite.prototype.shader = new PIXI_AbstractFilter();
Phaser_Sprite.prototype.cropRect = new Phaser_Rectangle();
Phaser_Sprite.prototype.game = new Phaser_Game();
Phaser_Sprite.prototype.components = new Object();
Phaser_Sprite.prototype.deltaZ = new Number();
Phaser_Sprite.prototype.alive = new Boolean();
Phaser_Sprite.prototype.transformCallbackContext = new Object();
Phaser_Sprite.prototype.deltaX = new Number();
Phaser_Sprite.prototype.deltaY = new Number();
Phaser_Sprite.prototype._outOfBoundsFired = new Boolean();
Phaser_Sprite.prototype._fixedToCamera = new Boolean();
Phaser_Sprite.prototype.transformCallback = new Function();
Phaser_Sprite.prototype.inWorld = new Boolean();
Phaser_Sprite.prototype.tint = new Number();
Phaser_Sprite.prototype.inputEnabled = new Boolean();
Phaser_Sprite.prototype.cachedTint = new Number();
Phaser_Sprite.prototype.world = new Phaser_Point();
Phaser_Sprite.prototype.top = new Number();
Phaser_Sprite.prototype.animations = new Phaser_AnimationManager();
Phaser_Sprite.prototype.angle = new Number();
Phaser_Sprite.prototype.checkWorldBounds = new Boolean();
Phaser_Sprite.prototype.key = new String();
Phaser_Sprite.prototype.debug = new Boolean();
Phaser_Sprite.prototype.frameName = new String();
Phaser_Sprite.prototype.texture = new PIXI_Texture();
Phaser_Sprite.prototype.health = new Number();
Phaser_Sprite.prototype.destroyPhase = new Boolean();
Phaser_Sprite.prototype.right = new Number();
Phaser_Sprite.prototype.previousPosition = new Phaser_Point();
Phaser_Sprite.prototype.scaleMax = new Phaser_Point();
Phaser_Sprite.prototype._height = new Number();
Phaser_Sprite.prototype._exists = new Boolean();
Phaser_Sprite.prototype.pendingDestroy = new Boolean();
Phaser_Sprite.prototype.blendMode = new Number();
Phaser_Sprite.prototype.customRender = new Boolean();
Phaser_Sprite.prototype.anchor = new Phaser_Point();
Phaser_Sprite.prototype.autoCull = new Boolean();
Phaser_Sprite.prototype.x = new Number();
Phaser_Sprite.prototype.exists = new Boolean();
Phaser_Sprite.prototype.y = new Number();
Phaser_Sprite.prototype.z = new Number();
Phaser_Sprite.prototype.fresh = new Boolean();
Phaser_Sprite.prototype.scaleMin = new Phaser_Point();
Phaser_Sprite.prototype.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_Sprite.prototype.resizeFrame = function (parent, width, height) {};
Phaser_Sprite.prototype.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Sprite.prototype.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_Sprite.prototype.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_Sprite.prototype.postUpdate = function () {};
Phaser_Sprite.prototype.destroy = function (destroyChildren) {};
Phaser_Sprite.prototype.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_Sprite.prototype.updateCrop = function () {};
Phaser_Sprite.prototype.checkTransform = function (wt) {};
Phaser_Sprite.prototype.overlap = function (displayObject) { return new Boolean(); };
Phaser_Sprite.prototype.loadTexture = function (key, frame, stopAnimation) {};
Phaser_Sprite.prototype.reset = function (x, y, health) { return new PIXI_DisplayObject(); };
Phaser_Sprite.prototype.preUpdate = function () { return new Boolean(); };
Phaser_Sprite.prototype.crop = function (rect, copy) {};
Phaser_Sprite.prototype.damage = function (amount) { return new Phaser_Sprite(); };
Phaser_Sprite.prototype.update = function () {};
Phaser_Sprite.prototype.setFrame = function (frame) {};
Phaser_Sprite.prototype.heal = function (amount) { return new Phaser_Sprite(); };
Phaser_Sprite.prototype.setScaleMinMax = function (minX, minY, maxX, maxY) {};
Phaser_Sprite.prototype.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_Sprite.prototype.kill = function () { return new PIXI_DisplayObject(); };
Phaser_Sprite.prototype.resetFrame = function () {};

var Phaser_Color = function () {};
Phaser_Color.prototype.webToColor = function (web, out) { return new Object(); };
Phaser_Color.prototype.getAlphaFloat = function (color) { return new Number(); };
Phaser_Color.prototype.RGBtoHSL = function (r, g, b, out) { return new Object(); };
Phaser_Color.prototype.valueToColor = function (value, out) { return new Object(); };
Phaser_Color.prototype.blendLinearBurn = function (a, b) { return new Number(); };
Phaser_Color.prototype.blendVividLight = function (a, b) { return new Number(); };
Phaser_Color.prototype.getAlpha = function (color) { return new Number(); };
Phaser_Color.prototype.fromRGBA = function (rgba, out) { return new Object(); };
Phaser_Color.prototype.blendReflect = function (a, b) { return new Number(); };
Phaser_Color.prototype.HSLtoRGB = function (h, s, l, out) { return new Object(); };
Phaser_Color.prototype.packPixel = function (r, g, b, a) { return new Number(); };
Phaser_Color.prototype.blendLighten = function (a, b) { return new Number(); };
Phaser_Color.prototype.toRGBA = function (r, g, b, a) { return new Number(); };
Phaser_Color.prototype.blendDarken = function (a, b) { return new Number(); };
Phaser_Color.prototype.blendScreen = function (a, b) { return new Number(); };
Phaser_Color.prototype.hexToRGB = function (hex) { return new Number(); };
Phaser_Color.prototype.getRGB = function (color) { return new Object(); };
Phaser_Color.prototype.blendGlow = function (a, b) { return new Number(); };
Phaser_Color.prototype.blendSoftLight = function (a, b) { return new Number(); };
Phaser_Color.prototype.interpolateColorWithRGB = function (color, r, g, b, steps, currentStep) { return new Number(); };
Phaser_Color.prototype.blendSubtract = function (a, b) { return new Number(); };
Phaser_Color.prototype.getColor32 = function (a, r, g, b) { return new Number(); };
Phaser_Color.prototype.HSLColorWheel = function (s, l) { return new Array(); };
Phaser_Color.prototype.getWebRGB = function (color) { return new String(); };
Phaser_Color.prototype.componentToHex = function (color) { return new String(); };
Phaser_Color.prototype.blendDifference = function (a, b) { return new Number(); };
Phaser_Color.prototype.getBlue = function (color) { return new Number(); };
Phaser_Color.prototype.hexToColor = function (hex, out) { return new Object(); };
Phaser_Color.prototype.blendLinearDodge = function (a, b) { return new Number(); };
Phaser_Color.prototype.getGreen = function (color) { return new Number(); };
Phaser_Color.prototype.blendColorBurn = function (a, b) { return new Number(); };
Phaser_Color.prototype.blendNegation = function (a, b) { return new Number(); };
Phaser_Color.prototype.blendNormal = function (a, b) { return new Number(); };
Phaser_Color.prototype.getRandomColor = function (min, max, alpha) { return new Number(); };
Phaser_Color.prototype.blendOverlay = function (a, b) { return new Number(); };
Phaser_Color.prototype.createColor = function (r, g, b, a, h, s, l, v) { return new Object(); };
Phaser_Color.prototype.HSVColorWheel = function (s, v) { return new Array(); };
Phaser_Color.prototype.RGBtoString = function (r, g, b, a, prefix) { return new String(); };
Phaser_Color.prototype.blendExclusion = function (a, b) { return new Number(); };
Phaser_Color.prototype.blendHardLight = function (a, b) { return new Number(); };
Phaser_Color.prototype.getRed = function (color) { return new Number(); };
Phaser_Color.prototype.HSVtoRGB = function (h, s, v, out) { return new Object(); };
Phaser_Color.prototype.hueToColor = function (p, q, t) { return new Number(); };
Phaser_Color.prototype.updateColor = function (out) { return new Number(); };
Phaser_Color.prototype.blendLinearLight = function (a, b) { return new Number(); };
Phaser_Color.prototype.blendMultiply = function (a, b) { return new Number(); };
Phaser_Color.prototype.blendAverage = function (a, b) { return new Number(); };
Phaser_Color.prototype.getColor = function (r, g, b) { return new Number(); };
Phaser_Color.prototype.interpolateColor = function (color1, color2, steps, currentStep, alpha) { return new Number(); };
Phaser_Color.prototype.blendHardMix = function (a, b) { return new Number(); };
Phaser_Color.prototype.interpolateRGB = function (r1, g1, b1, r2, g2, b2, steps, currentStep) { return new Number(); };
Phaser_Color.prototype.blendPinLight = function (a, b) { return new Number(); };
Phaser_Color.prototype.RGBtoHSV = function (r, g, b, out) { return new Object(); };
Phaser_Color.prototype.blendPhoenix = function (a, b) { return new Number(); };
Phaser_Color.prototype.blendAdd = function (a, b) { return new Number(); };
Phaser_Color.prototype.unpackPixel = function (rgba, out, hsl, hsv) { return new Object(); };
Phaser_Color.prototype.blendColorDodge = function (a, b) { return new Number(); };

var Phaser_World = function (game) {};
Phaser_World.prototype = new Phaser.Group();
Phaser_World.prototype.centerY = new Number();
Phaser_World.prototype.centerX = new Number();
Phaser_World.prototype.type = new Number();
Phaser_World.prototype.enableBody = new Boolean();
Phaser_World.prototype.children = new Array_DisplayObject_();
Phaser_World.prototype.enableBodyDebug = new Boolean();
Phaser_World.prototype.height = new Number();
Phaser_World.prototype.physicsType = new Number();
Phaser_World.prototype._definedSize = new Boolean();
Phaser_World.prototype.cursorIndex = new Number();
Phaser_World.prototype.physicsSortDirection = new Number();
Phaser_World.prototype.bounds = new Phaser_Rectangle();
Phaser_World.prototype.hash = new Array();
Phaser_World.prototype.alive = new Boolean();
Phaser_World.prototype.angle = new Number();
Phaser_World.prototype.camera = new Phaser_Camera();
Phaser_World.prototype.onDestroy = new Phaser_Signal();
Phaser_World.prototype.width = new Number();
Phaser_World.prototype.ignoreDestroy = new Boolean();
Phaser_World.prototype.x = new Number();
Phaser_World.prototype.exists = new Boolean();
Phaser_World.prototype.y = new Number();
Phaser_World.prototype.z = new Number();
Phaser_World.prototype.physicsBodyType = new Number();
Phaser_World.prototype._sortProperty = new String();
Phaser_World.prototype.fixedToCamera = new Boolean();
Phaser_World.prototype.visible = new Boolean();
Phaser_World.prototype.cameraOffset = new Phaser_Point();
Phaser_World.prototype.name = new String();
Phaser_World.prototype.randomX = new Number();
Phaser_World.prototype.classType = new Object();
Phaser_World.prototype.randomY = new Number();
Phaser_World.prototype.cursor = new PIXI_DisplayObject();
Phaser_World.prototype.game = new Phaser_Game();
Phaser_World.prototype.total = new Number();
Phaser_World.prototype.alpha = new Number();
Phaser_World.prototype.rotation = new Number();
Phaser_World.prototype.length = new Number();
Phaser_World.prototype.pendingDestroy = new Boolean();
Phaser_World.prototype.xy = function (index, x, y) {};
Phaser_World.prototype.descendingSortHandler = function (a, b) {};
Phaser_World.prototype.moveAll = function (group, silent) { return new Phaser_Group(); };
Phaser_World.prototype.removeAll = function (destroy, silent) {};
Phaser_World.prototype.customSort = function (sortHandler, context) {};
Phaser_World.prototype.bringToTop = function (child) { return new Object(); };
Phaser_World.prototype.moveUp = function (child) { return new Object(); };
Phaser_World.prototype.postUpdate = function () {};
Phaser_World.prototype.destroy = function (destroyChildren, soft) {};
Phaser_World.prototype.getFirstDead = function () { return new Object(); };
Phaser_World.prototype.addAt = function (child, index, silent) { return new PIXI_DisplayObject(); };
Phaser_World.prototype.forEachAlive = function (callback, callbackContext, args) {};
Phaser_World.prototype.resetCursor = function (index) { return new Object(); };
Phaser_World.prototype.addMultiple = function (children, silent) { return new Array__DisplayObject_(); };
Phaser_World.prototype.setProperty = function (child, key, value, operation, force) { return new Boolean(); };
Phaser_World.prototype.preUpdate = function () {};
Phaser_World.prototype.addToHash = function (child) { return new Boolean(); };
Phaser_World.prototype.checkProperty = function (child, key, value, force) { return new Boolean(); };
Phaser_World.prototype.callbackFromArray = function (child, callback, length) {};
Phaser_World.prototype.multiplyAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_World.prototype.iterate = function (key, value, returnType, callback, callbackContext, args) { return new Object(); };
Phaser_World.prototype.set = function (child, key, value, checkAlive, checkVisible, operation, force) { return new Boolean(); };
Phaser_World.prototype.getFirstExists = function (exists) { return new Object(); };
Phaser_World.prototype.reverse = function () {};
Phaser_World.prototype.setBounds = function (x, y, width, height) {};
Phaser_World.prototype.filter = function (predicate, checkExists) { return new Phaser_ArraySet(); };
Phaser_World.prototype.addAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_World.prototype.divideAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_World.prototype.setAllChildren = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_World.prototype.wrap = function (sprite, padding, useBounds, horizontal, vertical) {};
Phaser_World.prototype.getIndex = function (child) { return new Number(); };
Phaser_World.prototype.getBottom = function () { return new Object(); };
Phaser_World.prototype.replace = function (oldChild, newChild) { return new Object(); };
Phaser_World.prototype.getRandom = function (startIndex, length) { return new Object(); };
Phaser_World.prototype.forEachExists = function (callback, callbackContext, args) {};
Phaser_World.prototype.getTop = function () { return new Object(); };
Phaser_World.prototype.create = function (x, y, key, frame, exists) { return new PIXI_DisplayObject(); };
Phaser_World.prototype.countDead = function () { return new Number(); };
Phaser_World.prototype.subAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_World.prototype.add = function (child, silent) { return new PIXI_DisplayObject(); };
Phaser_World.prototype.swap = function (child1, child2) {};
Phaser_World.prototype.stateChange = function () {};
Phaser_World.prototype.sort = function (key, order) {};
Phaser_World.prototype.moveDown = function (child) { return new Object(); };
Phaser_World.prototype.hasProperty = function (child, key) { return new Boolean(); };
Phaser_World.prototype.updateZ = function () {};
Phaser_World.prototype.ascendingSortHandler = function (a, b) {};
Phaser_World.prototype.removeBetween = function (startIndex, endIndex, destroy, silent) {};
Phaser_World.prototype.removeFromHash = function (child) { return new Boolean(); };
Phaser_World.prototype.shutdown = function () {};
Phaser_World.prototype.next = function () { return new Object(); };
Phaser_World.prototype.forEachDead = function (callback, callbackContext, args) {};
Phaser_World.prototype.update = function () {};
Phaser_World.prototype.countLiving = function () { return new Number(); };
Phaser_World.prototype.remove = function (child, destroy, silent) { return new Boolean(); };
Phaser_World.prototype.callAll = function (method, context, args) {};
Phaser_World.prototype.createMultiple = function (quantity, key, frame, exists) {};
Phaser_World.prototype.boot = function () {};
Phaser_World.prototype.setAll = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_World.prototype.callAllExists = function (callback, existsValue, parameter) {};
Phaser_World.prototype.checkAll = function (key, value, checkAlive, checkVisible, force) {};
Phaser_World.prototype.previous = function () { return new Object(); };
Phaser_World.prototype.forEach = function (callback, callbackContext, checkExists, args) {};
Phaser_World.prototype.sendToBack = function (child) { return new Object(); };
Phaser_World.prototype.getAt = function (index) { return new PIXI_DisplayObject(); };
Phaser_World.prototype.getFirstAlive = function () { return new Object(); };
Phaser_World.prototype.resize = function (width, height) {};

var CanvasPool = function () {};

var Phaser_FlexGrid = function (manager, width, height) {};
Phaser_FlexGrid.prototype.game = new Phaser_Game();
Phaser_FlexGrid.prototype.manager = new Phaser_ScaleManager();
Phaser_FlexGrid.prototype.scaleFactor = new Phaser_Point();
Phaser_FlexGrid.prototype.position = new Phaser_Point();
Phaser_FlexGrid.prototype.fitSprite = function (sprite) {};
Phaser_FlexGrid.prototype.debug = function () {};
Phaser_FlexGrid.prototype.createFullLayer = function (children) { return new Phaser_FlexLayer(); };
Phaser_FlexGrid.prototype.createFluidLayer = function (children) { return new Phaser_FlexLayer(); };
Phaser_FlexGrid.prototype.refresh = function () {};
Phaser_FlexGrid.prototype.onResize = function (width, height) {};
Phaser_FlexGrid.prototype.setSize = function (width, height) {};
Phaser_FlexGrid.prototype.createCustomLayer = function (width, height, children) { return new Phaser_FlexLayer(); };
Phaser_FlexGrid.prototype.reset = function () {};
Phaser_FlexGrid.prototype.createFixedLayer = function (children) { return new Phaser_FlexLayer(); };

var Phaser_Component_Health = function () {};
Phaser_Component_Health.prototype.health = new Number();
Phaser_Component_Health.prototype.maxHealth = new Number();
Phaser_Component_Health.prototype.damage = function (amount) { return new Phaser_Sprite(); };
Phaser_Component_Health.prototype.heal = function (amount) { return new Phaser_Sprite(); };

var Phaser_Component_Angle = function () {};
Phaser_Component_Angle.prototype.angle = new Number();

var Phaser_RoundedRectangle = function (x, y, width, height, radius) {};
Phaser_RoundedRectangle.prototype.x = new Number();
Phaser_RoundedRectangle.prototype.width = new Number();
Phaser_RoundedRectangle.prototype.y = new Number();
Phaser_RoundedRectangle.prototype.radius = new Number();
Phaser_RoundedRectangle.prototype.type = new Number();
Phaser_RoundedRectangle.prototype.height = new Number();
Phaser_RoundedRectangle.prototype.contains = function (x, y) { return new Boolean(); };
Phaser_RoundedRectangle.prototype.clone = function () { return new Phaser_RoundedRectangle(); };

var Phaser_Particle = function (game, x, y, key, frame) {};
Phaser_Particle.prototype = new Phaser.Sprite();
Phaser_Particle.prototype._crop = new Phaser_Rectangle();
Phaser_Particle.prototype.lifespan = new Number();
Phaser_Particle.prototype.outOfBoundsKill = new Boolean();
Phaser_Particle.prototype.type = new Number();
Phaser_Particle.prototype.maxHealth = new Number();
Phaser_Particle.prototype.scaleData = new Array();
Phaser_Particle.prototype._width = new Number();
Phaser_Particle.prototype.events = new Phaser_Events();
Phaser_Particle.prototype.physicsType = new Number();
Phaser_Particle.prototype.smoothed = new Boolean();
Phaser_Particle.prototype._bounds = new Phaser_Rectangle();
Phaser_Particle.prototype.input = new Phaser_InputHandler();
Phaser_Particle.prototype.left = new Number();
Phaser_Particle.prototype.components = new Object();
Phaser_Particle.prototype.alive = new Boolean();
Phaser_Particle.prototype.transformCallback = new Function();
Phaser_Particle.prototype.inWorld = new Boolean();
Phaser_Particle.prototype.world = new Phaser_Point();
Phaser_Particle.prototype.top = new Number();
Phaser_Particle.prototype.angle = new Number();
Phaser_Particle.prototype.checkWorldBounds = new Boolean();
Phaser_Particle.prototype.key = new String();
Phaser_Particle.prototype.texture = new PIXI_Texture();
Phaser_Particle.prototype.health = new Number();
Phaser_Particle.prototype.destroyPhase = new Boolean();
Phaser_Particle.prototype.right = new Number();
Phaser_Particle.prototype.previousPosition = new Phaser_Point();
Phaser_Particle.prototype.scaleMax = new Phaser_Point();
Phaser_Particle.prototype.anchor = new Phaser_Point();
Phaser_Particle.prototype.autoCull = new Boolean();
Phaser_Particle.prototype.x = new Number();
Phaser_Particle.prototype.exists = new Boolean();
Phaser_Particle.prototype.y = new Number();
Phaser_Particle.prototype.z = new Number();
Phaser_Particle.prototype.scaleMin = new Phaser_Point();
Phaser_Particle.prototype._frame = new Phaser_Rectangle();
Phaser_Particle.prototype.body = new Phaser_Physics_Arcade_Body();
Phaser_Particle.prototype.inCamera = new Boolean();
Phaser_Particle.prototype.autoScale = new Boolean();
Phaser_Particle.prototype.offsetX = new Number();
Phaser_Particle.prototype.tintedTexture = new Phaser_Canvas();
Phaser_Particle.prototype.offsetY = new Number();
Phaser_Particle.prototype.fixedToCamera = new Boolean();
Phaser_Particle.prototype.renderOrderID = new Number();
Phaser_Particle.prototype.previousRotation = new Number();
Phaser_Particle.prototype.bottom = new Number();
Phaser_Particle.prototype.cameraOffset = new Phaser_Point();
Phaser_Particle.prototype.autoAlpha = new Boolean();
Phaser_Particle.prototype.name = new String();
Phaser_Particle.prototype.alphaData = new Array();
Phaser_Particle.prototype.frame = new Number();
Phaser_Particle.prototype.shader = new PIXI_AbstractFilter();
Phaser_Particle.prototype.cropRect = new Phaser_Rectangle();
Phaser_Particle.prototype.game = new Phaser_Game();
Phaser_Particle.prototype.deltaZ = new Number();
Phaser_Particle.prototype.transformCallbackContext = new Object();
Phaser_Particle.prototype.deltaX = new Number();
Phaser_Particle.prototype.deltaY = new Number();
Phaser_Particle.prototype._outOfBoundsFired = new Boolean();
Phaser_Particle.prototype._fixedToCamera = new Boolean();
Phaser_Particle.prototype.tint = new Number();
Phaser_Particle.prototype.inputEnabled = new Boolean();
Phaser_Particle.prototype.cachedTint = new Number();
Phaser_Particle.prototype.animations = new Phaser_AnimationManager();
Phaser_Particle.prototype._a = new Number();
Phaser_Particle.prototype.debug = new Boolean();
Phaser_Particle.prototype.frameName = new String();
Phaser_Particle.prototype._height = new Number();
Phaser_Particle.prototype._exists = new Boolean();
Phaser_Particle.prototype.pendingDestroy = new Boolean();
Phaser_Particle.prototype._s = new Number();
Phaser_Particle.prototype.blendMode = new Number();
Phaser_Particle.prototype.customRender = new Boolean();
Phaser_Particle.prototype.fresh = new Boolean();
Phaser_Particle.prototype.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_Particle.prototype.resizeFrame = function (parent, width, height) {};
Phaser_Particle.prototype.setScaleData = function () {};
Phaser_Particle.prototype.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Particle.prototype.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_Particle.prototype.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_Particle.prototype.postUpdate = function () {};
Phaser_Particle.prototype.destroy = function (destroyChildren) {};
Phaser_Particle.prototype.checkTransform = function (wt) {};
Phaser_Particle.prototype.reset = function (x, y, health) { return new _Phaser_Particle__This_instance_(); };
Phaser_Particle.prototype.preUpdate = function () { return new Boolean(); };
Phaser_Particle.prototype.damage = function (amount) { return new Phaser_Sprite(); };
Phaser_Particle.prototype.setScaleMinMax = function (minX, minY, maxX, maxY) {};
Phaser_Particle.prototype.kill = function () { return new PIXI_DisplayObject(); };
Phaser_Particle.prototype.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_Particle.prototype.updateCrop = function () {};
Phaser_Particle.prototype.setAlphaData = function () {};
Phaser_Particle.prototype.overlap = function (displayObject) { return new Boolean(); };
Phaser_Particle.prototype.loadTexture = function (key, frame, stopAnimation) {};
Phaser_Particle.prototype.crop = function (rect, copy) {};
Phaser_Particle.prototype.update = function () {};
Phaser_Particle.prototype.onEmit = function () {};
Phaser_Particle.prototype.setFrame = function (frame) {};
Phaser_Particle.prototype.heal = function (amount) { return new Phaser_Sprite(); };
Phaser_Particle.prototype.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_Particle.prototype.resetFrame = function () {};

var Phaser_Creature = function (game, x, y, key, mesh, animation) {};
Phaser_Creature.prototype.lifespan = new Number();
Phaser_Creature.prototype.type = new Number();
Phaser_Creature.prototype.inCamera = new Boolean();
Phaser_Creature.prototype.children = new Array_DisplayObject_();
Phaser_Creature.prototype.loop = new Boolean();
Phaser_Creature.prototype.fixedToCamera = new Boolean();
Phaser_Creature.prototype.renderOrderID = new Number();
Phaser_Creature.prototype.events = new Phaser_Events();
Phaser_Creature.prototype.previousRotation = new Number();
Phaser_Creature.prototype.isPlaying = new Boolean();
Phaser_Creature.prototype.cameraOffset = new Phaser_Point();
Phaser_Creature.prototype._bounds = new Phaser_Rectangle();
Phaser_Creature.prototype.animation = new CreatureAnimation();
Phaser_Creature.prototype.name = new String();
Phaser_Creature.prototype.game = new Phaser_Game();
Phaser_Creature.prototype.components = new Object();
Phaser_Creature.prototype.alive = new Boolean();
Phaser_Creature.prototype.vertices = new PIXI_Float32Array();
Phaser_Creature.prototype.timeDelta = new Number();
Phaser_Creature.prototype._fixedToCamera = new Boolean();
Phaser_Creature.prototype.colors = new PIXI_Uint16Array();
Phaser_Creature.prototype.creatureBoundsMin = new Phaser_Point();
Phaser_Creature.prototype.world = new Phaser_Point();
Phaser_Creature.prototype.animations = new Phaser_AnimationManager();
Phaser_Creature.prototype.angle = new Number();
Phaser_Creature.prototype.key = new String();
Phaser_Creature.prototype.debug = new Boolean();
Phaser_Creature.prototype.manager = new CreatureManager();
Phaser_Creature.prototype.texture = new PIXI_Texture();
Phaser_Creature.prototype.destroyPhase = new Boolean();
Phaser_Creature.prototype.previousPosition = new Phaser_Point();
Phaser_Creature.prototype._exists = new Boolean();
Phaser_Creature.prototype.indices = new PIXI_Uint16Array();
Phaser_Creature.prototype.pendingDestroy = new Boolean();
Phaser_Creature.prototype.uvs = new PIXI_Float32Array();
Phaser_Creature.prototype._creature = new Phaser_Creature();
Phaser_Creature.prototype.autoCull = new Boolean();
Phaser_Creature.prototype.exists = new Boolean();
Phaser_Creature.prototype.z = new Number();
Phaser_Creature.prototype.creatureBoundsMax = new Phaser_Point();
Phaser_Creature.prototype.fresh = new Boolean();
Phaser_Creature.prototype.play = function (loop) {};
Phaser_Creature.prototype.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Creature.prototype.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_Creature.prototype.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_Creature.prototype.postUpdate = function () {};
Phaser_Creature.prototype.updateRenderData = function () {};
Phaser_Creature.prototype.destroy = function (destroyChildren) {};
Phaser_Creature.prototype.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_Creature.prototype.setAnimation = function (key) {};
Phaser_Creature.prototype.stop = function () {};
Phaser_Creature.prototype.reset = function (x, y, health) { return new PIXI_DisplayObject(); };
Phaser_Creature.prototype.preUpdate = function () {};
Phaser_Creature.prototype.updateCreatureBounds = function () {};
Phaser_Creature.prototype.updateData = function () {};
Phaser_Creature.prototype.update = function () {};
Phaser_Creature.prototype._renderCreature = function () {};
Phaser_Creature.prototype._initWebGL = function () {};
Phaser_Creature.prototype.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_Creature.prototype.kill = function () { return new PIXI_DisplayObject(); };
Phaser_Creature.prototype._renderWebGL = function () {};

var Phaser_Camera = function (game, id, x, y, width, height) {};
Phaser_Camera.FOLLOW_LOCKON = new Number();
Phaser_Camera.FOLLOW_TOPDOWN = new Number();
Phaser_Camera.FOLLOW_PLATFORMER = new Number();
Phaser_Camera.FOLLOW_TOPDOWN_TIGHT = new Number();
Phaser_Camera.prototype.game = new Phaser_Game();
Phaser_Camera.prototype.atLimit = new Boolean();
Phaser_Camera.prototype.scale = new Phaser_Point();
Phaser_Camera.prototype.view = new Phaser_Rectangle();
Phaser_Camera.prototype.edge = new Number();
Phaser_Camera.prototype.world = new Phaser_World();
Phaser_Camera.prototype.id = new Number();
Phaser_Camera.prototype.deadzone = new Phaser_Rectangle();
Phaser_Camera.prototype.height = new Number();
Phaser_Camera.prototype._targetPosition = new Phaser_Point();
Phaser_Camera.prototype.roundPx = new Boolean();
Phaser_Camera.prototype.visible = new Boolean();
Phaser_Camera.prototype.target = new Phaser_Sprite();
Phaser_Camera.prototype.displayObject = new PIXI_DisplayObject();
Phaser_Camera.prototype.bounds = new Phaser_Rectangle();
Phaser_Camera.prototype.totalInView = new Number();
Phaser_Camera.prototype.x = new Number();
Phaser_Camera.prototype.width = new Number();
Phaser_Camera.prototype.y = new Number();
Phaser_Camera.prototype.position = new Phaser_Point();
Phaser_Camera.prototype.focusOnXY = function (x, y) {};
Phaser_Camera.prototype.update = function () {};
Phaser_Camera.prototype.setPosition = function (x, y) {};
Phaser_Camera.prototype.setSize = function (width, height) {};
Phaser_Camera.prototype.checkBounds = function () {};
Phaser_Camera.prototype.focusOn = function (displayObject) {};
Phaser_Camera.prototype.updateTarget = function () {};
Phaser_Camera.prototype.follow = function (target, style) {};
Phaser_Camera.prototype.setBoundsToWorld = function () {};
Phaser_Camera.prototype.reset = function () {};
Phaser_Camera.prototype.preUpdate = function () {};
Phaser_Camera.prototype.unfollow = function () {};

var Phaser_Ellipse = function (x, y, width, height) {};
Phaser_Ellipse.prototype.bottom = new Number();
Phaser_Ellipse.prototype.right = new Number();
Phaser_Ellipse.prototype.type = new Number();
Phaser_Ellipse.prototype.empty = new Boolean();
Phaser_Ellipse.prototype.top = new Number();
Phaser_Ellipse.prototype.left = new Object();
Phaser_Ellipse.prototype.x = new Number();
Phaser_Ellipse.prototype.width = new Number();
Phaser_Ellipse.prototype.y = new Number();
Phaser_Ellipse.prototype.height = new Number();
Phaser_Ellipse.prototype.getBounds = function () { return new Phaser_Rectangle(); };
Phaser_Ellipse.prototype.copyFrom = function (source) { return new Phaser_Ellipse(); };
Phaser_Ellipse.prototype.copyTo = function (dest) { return new Object(); };
Phaser_Ellipse.prototype.random = function (out) { return new Phaser_Point(); };
Phaser_Ellipse.prototype.contains = function (x, y) { return new Boolean(); };
Phaser_Ellipse.prototype.clone = function (output) { return new Phaser_Ellipse(); };
Phaser_Ellipse.prototype.setTo = function (x, y, width, height) { return new Phaser_Ellipse(); };
Phaser_Ellipse.prototype.toString = function () { return new String(); };

var Phaser_Graphics = function (game, x, y) {};
Phaser_Graphics.prototype.lifespan = new Number();
Phaser_Graphics.prototype.outOfBoundsKill = new Boolean();
Phaser_Graphics.prototype.type = new Number();
Phaser_Graphics.prototype.body = new Phaser_Physics_Arcade_Body();
Phaser_Graphics.prototype.inCamera = new Boolean();
Phaser_Graphics.prototype.offsetX = new Number();
Phaser_Graphics.prototype.offsetY = new Number();
Phaser_Graphics.prototype.fixedToCamera = new Boolean();
Phaser_Graphics.prototype.renderOrderID = new Number();
Phaser_Graphics.prototype.events = new Phaser_Events();
Phaser_Graphics.prototype.physicsType = new Number();
Phaser_Graphics.prototype.previousRotation = new Number();
Phaser_Graphics.prototype.bottom = new Number();
Phaser_Graphics.prototype.cameraOffset = new Phaser_Point();
Phaser_Graphics.prototype._bounds = new Phaser_Rectangle();
Phaser_Graphics.prototype.input = new Phaser_InputHandler();
Phaser_Graphics.prototype.left = new Number();
Phaser_Graphics.prototype.name = new String();
Phaser_Graphics.prototype.game = new Phaser_Game();
Phaser_Graphics.prototype.components = new Object();
Phaser_Graphics.prototype.alive = new Boolean();
Phaser_Graphics.prototype._outOfBoundsFired = new Boolean();
Phaser_Graphics.prototype._fixedToCamera = new Boolean();
Phaser_Graphics.prototype.inWorld = new Boolean();
Phaser_Graphics.prototype.inputEnabled = new Boolean();
Phaser_Graphics.prototype.world = new Phaser_Point();
Phaser_Graphics.prototype.top = new Number();
Phaser_Graphics.prototype.animations = new Phaser_AnimationManager();
Phaser_Graphics.prototype.angle = new Number();
Phaser_Graphics.prototype.checkWorldBounds = new Boolean();
Phaser_Graphics.prototype.key = new String();
Phaser_Graphics.prototype.debug = new Boolean();
Phaser_Graphics.prototype.destroyPhase = new Boolean();
Phaser_Graphics.prototype.right = new Number();
Phaser_Graphics.prototype.previousPosition = new Phaser_Point();
Phaser_Graphics.prototype._exists = new Boolean();
Phaser_Graphics.prototype.pendingDestroy = new Boolean();
Phaser_Graphics.prototype.autoCull = new Boolean();
Phaser_Graphics.prototype.x = new Number();
Phaser_Graphics.prototype.exists = new Boolean();
Phaser_Graphics.prototype.y = new Number();
Phaser_Graphics.prototype.z = new Number();
Phaser_Graphics.prototype.fresh = new Boolean();
Phaser_Graphics.prototype.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Graphics.prototype.postUpdate = function () {};
Phaser_Graphics.prototype.destroy = function (destroyChildren) {};
Phaser_Graphics.prototype.reset = function (x, y, health) { return new PIXI_DisplayObject(); };
Phaser_Graphics.prototype.preUpdate = function () {};
Phaser_Graphics.prototype.update = function () {};
Phaser_Graphics.prototype.kill = function () { return new PIXI_DisplayObject(); };

var Phaser_Physics_P2_LockConstraint = function (world, bodyA, bodyB, offset, angle, maxForce) {};
Phaser_Physics_P2_LockConstraint.prototype.game = new Phaser_Game();
Phaser_Physics_P2_LockConstraint.prototype.world = new Phaser_Physics_P2();

var Phaser_ScaleManager = function (game, width, height) {};
Phaser_ScaleManager.RESIZE = new Number();
Phaser_ScaleManager.NO_SCALE = new Number();
Phaser_ScaleManager.USER_SCALE = new Number();
Phaser_ScaleManager.SHOW_ALL = new Number();
Phaser_ScaleManager.EXACT_FIT = new Number();
Phaser_ScaleManager.prototype.onResizeContext = new Object();
Phaser_ScaleManager.prototype.scaleMode = new Number();
Phaser_ScaleManager.prototype.boundingParent = new DOMElement();
Phaser_ScaleManager.prototype.minHeight = new Number();
Phaser_ScaleManager.prototype.fullScreenScaleMode = new Number();
Phaser_ScaleManager.prototype.scaleFactorInversed = new Phaser_Point();
Phaser_ScaleManager.prototype.height = new Number();
Phaser_ScaleManager.prototype.maxWidth = new Number();
Phaser_ScaleManager.prototype.margin = new Bounds_like();
Phaser_ScaleManager.prototype.parentIsWindow = new Boolean();
Phaser_ScaleManager.prototype.onFullScreenInit = new Phaser_Signal();
Phaser_ScaleManager.prototype._userScaleFactor = new Phaser_Point();
Phaser_ScaleManager.prototype.onResize = new Function();
Phaser_ScaleManager.prototype.isLandscape = new Boolean();
Phaser_ScaleManager.prototype.bounds = new Phaser_Rectangle();
Phaser_ScaleManager.prototype._lastUpdate = new Number();
Phaser_ScaleManager.prototype.dom = new Phaser_DOM();
Phaser_ScaleManager.prototype.pageAlignVertically = new Boolean();
Phaser_ScaleManager.prototype.screenOrientation = new String();
Phaser_ScaleManager.prototype.maxHeight = new Number();
Phaser_ScaleManager.prototype.onFullScreenError = new Phaser_Signal();
Phaser_ScaleManager.prototype.event = new Object();
Phaser_ScaleManager.prototype.pageAlignHorizontally = new Boolean();
Phaser_ScaleManager.prototype._updateThrottleReset = new Number();
Phaser_ScaleManager.prototype._parentBounds = new Phaser_Rectangle();
Phaser_ScaleManager.prototype.leaveIncorrectOrientation = new Phaser_Signal();
Phaser_ScaleManager.prototype.minWidth = new Number();
Phaser_ScaleManager.prototype._createdFullScreenTarget = new DOMElement();
Phaser_ScaleManager.prototype.forcePortrait = new Boolean();
Phaser_ScaleManager.prototype._userScaleTrim = new Phaser_Point();
Phaser_ScaleManager.prototype.incorrectOrientation = new Boolean();
Phaser_ScaleManager.prototype.grid = new Phaser_FlexGrid();
Phaser_ScaleManager.prototype.width = new Number();
Phaser_ScaleManager.prototype.currentScaleMode = new Number();
Phaser_ScaleManager.prototype.forceLandscape = new Boolean();
Phaser_ScaleManager.prototype._pageAlignVertically = new Boolean();
Phaser_ScaleManager.prototype._pendingScaleMode = new Number();
Phaser_ScaleManager.prototype._gameSize = new Phaser_Rectangle();
Phaser_ScaleManager.prototype.onOrientationChange = new Phaser_Signal();
Phaser_ScaleManager.prototype._updateThrottle = new Number();
Phaser_ScaleManager.prototype.isGameLandscape = new Boolean();
Phaser_ScaleManager.prototype.aspectRatio = new Number();
Phaser_ScaleManager.prototype._lastReportedGameSize = new Phaser_Rectangle();
Phaser_ScaleManager.prototype.enterIncorrectOrientation = new Phaser_Signal();
Phaser_ScaleManager.prototype.onFullScreenChange = new Phaser_Signal();
Phaser_ScaleManager.prototype.windowConstraints = new Object();
Phaser_ScaleManager.prototype.isGamePortrait = new Boolean();
Phaser_ScaleManager.prototype.offset = new Phaser_Point();
Phaser_ScaleManager.prototype.sourceAspectRatio = new Number();
Phaser_ScaleManager.prototype.parentNode = new DOMElement();
Phaser_ScaleManager.prototype._fullScreenRestore = new Object();
Phaser_ScaleManager.prototype.compatibility = new Object();
Phaser_ScaleManager.prototype._scaleMode = new Number();
Phaser_ScaleManager.prototype.game = new Phaser_Game();
Phaser_ScaleManager.prototype.isPortrait = new Boolean();
Phaser_ScaleManager.prototype._booted = new Boolean();
Phaser_ScaleManager.prototype.onSizeChange = new Phaser_Signal();
Phaser_ScaleManager.prototype.trackParentInterval = new Number();
Phaser_ScaleManager.prototype.scaleFactor = new Phaser_Point();
Phaser_ScaleManager.prototype.fullScreenTarget = new DOMElement();
Phaser_ScaleManager.prototype.parentScaleFactor = new Phaser_Point();
Phaser_ScaleManager.prototype._pageAlignHorizontally = new Boolean();
Phaser_ScaleManager.prototype.isFullScreen = new Boolean();
Phaser_ScaleManager.prototype._lastReportedCanvasSize = new Phaser_Rectangle();
Phaser_ScaleManager.prototype.classifyOrientation = function (orientation) { return new String(); };
Phaser_ScaleManager.prototype.orientationChange = function (event) {};
Phaser_ScaleManager.prototype.resetCanvas = function (cssWidth, cssHeight) {};
Phaser_ScaleManager.prototype.parseConfig = function (config) {};
Phaser_ScaleManager.prototype.destroy = function () {};
Phaser_ScaleManager.prototype.cleanupCreatedTarget = function () {};
Phaser_ScaleManager.prototype.setResizeCallback = function (callback, context) {};
Phaser_ScaleManager.prototype.reset = function () {};
Phaser_ScaleManager.prototype.preUpdate = function () {};
Phaser_ScaleManager.prototype.updateOrientationState = function () { return new Boolean(); };
Phaser_ScaleManager.prototype.scaleSprite = function (sprite, width, height, letterBox) { return new Phaser_Sprite(); };
Phaser_ScaleManager.prototype.prepScreenMode = function (enteringFullscreen) {};
Phaser_ScaleManager.prototype.updateDimensions = function (width, height, resize) {};
Phaser_ScaleManager.prototype.reflowCanvas = function () {};
Phaser_ScaleManager.prototype.refresh = function () {};
Phaser_ScaleManager.prototype.getParentBounds = function (target) { return new Phaser_Rectangle(); };
Phaser_ScaleManager.prototype.forceOrientation = function (forceLandscape, forcePortrait) {};
Phaser_ScaleManager.prototype.fullScreenError = function (event) {};
Phaser_ScaleManager.prototype.setGameSize = function (width, height) {};
Phaser_ScaleManager.prototype.setExactFit = function () {};
Phaser_ScaleManager.prototype.fullScreenChange = function (event) {};
Phaser_ScaleManager.prototype.updateScalingAndBounds = function () {};
Phaser_ScaleManager.prototype.queueUpdate = function (force) {};
Phaser_ScaleManager.prototype.stopFullScreen = function () { return new Boolean(); };
Phaser_ScaleManager.prototype._gameResumed = function () {};
Phaser_ScaleManager.prototype.alignCanvas = function (horizontal, vertical) {};
Phaser_ScaleManager.prototype.updateLayout = function () {};
Phaser_ScaleManager.prototype.createFullScreenTarget = function () {};
Phaser_ScaleManager.prototype.scrollTop = function () {};
Phaser_ScaleManager.prototype.setUserScale = function (hScale, vScale, hTrim, vTrim) {};
Phaser_ScaleManager.prototype.windowResize = function (event) {};
Phaser_ScaleManager.prototype.signalSizeChange = function () {};
Phaser_ScaleManager.prototype.setMaximum = function () {};
Phaser_ScaleManager.prototype.setupScale = function (width, height) {};
Phaser_ScaleManager.prototype.setShowAll = function (expanding) {};
Phaser_ScaleManager.prototype.pauseUpdate = function () {};
Phaser_ScaleManager.prototype.reflowGame = function () {};
Phaser_ScaleManager.prototype.boot = function () {};
Phaser_ScaleManager.prototype.startFullScreen = function (antialias, allowTrampoline) { return new Boolean(); };
Phaser_ScaleManager.prototype.setMinMax = function (minWidth, minHeight, maxWidth, maxHeight) {};

var Phaser_TilemapLayer = function (game, tilemap, index, width, height) {};
Phaser_TilemapLayer.prototype = new Phaser.Sprite();
Phaser_TilemapLayer.prototype._crop = new Phaser_Rectangle();
Phaser_TilemapLayer.prototype.lifespan = new Number();
Phaser_TilemapLayer.prototype.outOfBoundsKill = new Boolean();
Phaser_TilemapLayer.prototype.type = new Number();
Phaser_TilemapLayer.prototype.rayStepRate = new Number();
Phaser_TilemapLayer.prototype.context = new CanvasRenderingContext2D();
Phaser_TilemapLayer.prototype.maxHealth = new Number();
Phaser_TilemapLayer.prototype.scrollFactorX = new Number();
Phaser_TilemapLayer.prototype.scrollFactorY = new Number();
Phaser_TilemapLayer.prototype._width = new Number();
Phaser_TilemapLayer.prototype.events = new Phaser_Events();
Phaser_TilemapLayer.prototype.physicsType = new Number();
Phaser_TilemapLayer.prototype.canvas = new HTMLCanvasElement();
Phaser_TilemapLayer.prototype.smoothed = new Boolean();
Phaser_TilemapLayer.prototype.index = new Number();
Phaser_TilemapLayer.prototype.renderSettings = new Object();
Phaser_TilemapLayer.prototype._bounds = new Phaser_Rectangle();
Phaser_TilemapLayer.prototype.input = new Phaser_InputHandler();
Phaser_TilemapLayer.prototype._mc = new Object();
Phaser_TilemapLayer.prototype.left = new Number();
Phaser_TilemapLayer.prototype.components = new Object();
Phaser_TilemapLayer.prototype.alive = new Boolean();
Phaser_TilemapLayer.prototype.transformCallback = new Function();
Phaser_TilemapLayer.prototype.inWorld = new Boolean();
Phaser_TilemapLayer.prototype._results = new Array__Phaser_Tile_();
Phaser_TilemapLayer.prototype.layer = new Object();
Phaser_TilemapLayer.prototype.world = new Phaser_Point();
Phaser_TilemapLayer.prototype.top = new Number();
Phaser_TilemapLayer.prototype.angle = new Number();
Phaser_TilemapLayer.prototype._wrap = new Boolean();
Phaser_TilemapLayer.prototype.checkWorldBounds = new Boolean();
Phaser_TilemapLayer.prototype.map = new Phaser_Tilemap();
Phaser_TilemapLayer.prototype.key = new String();
Phaser_TilemapLayer.prototype.dirty = new Boolean();
Phaser_TilemapLayer.prototype.texture = new PIXI_Texture();
Phaser_TilemapLayer.prototype.health = new Number();
Phaser_TilemapLayer.prototype.destroyPhase = new Boolean();
Phaser_TilemapLayer.prototype.right = new Number();
Phaser_TilemapLayer.prototype.previousPosition = new Phaser_Point();
Phaser_TilemapLayer.prototype.scaleMax = new Phaser_Point();
Phaser_TilemapLayer.prototype.anchor = new Phaser_Point();
Phaser_TilemapLayer.prototype.autoCull = new Boolean();
Phaser_TilemapLayer.prototype.x = new Number();
Phaser_TilemapLayer.prototype.exists = new Boolean();
Phaser_TilemapLayer.prototype.y = new Number();
Phaser_TilemapLayer.prototype.z = new Number();
Phaser_TilemapLayer.prototype.scaleMin = new Phaser_Point();
Phaser_TilemapLayer.prototype._frame = new Phaser_Rectangle();
Phaser_TilemapLayer.prototype._scrollX = new Number();
Phaser_TilemapLayer.prototype._scrollY = new Object();
Phaser_TilemapLayer.prototype.body = new Phaser_Physics_Arcade_Body();
Phaser_TilemapLayer.prototype.inCamera = new Boolean();
Phaser_TilemapLayer.prototype.offsetX = new Number();
Phaser_TilemapLayer.prototype.tintedTexture = new Phaser_Canvas();
Phaser_TilemapLayer.prototype.offsetY = new Number();
Phaser_TilemapLayer.prototype.fixedToCamera = new Boolean();
Phaser_TilemapLayer.prototype.renderOrderID = new Number();
Phaser_TilemapLayer.prototype.previousRotation = new Number();
Phaser_TilemapLayer.prototype.bottom = new Number();
Phaser_TilemapLayer.prototype.cameraOffset = new Phaser_Point();
Phaser_TilemapLayer.prototype.name = new String();
Phaser_TilemapLayer.prototype.frame = new Number();
Phaser_TilemapLayer.prototype.shader = new PIXI_AbstractFilter();
Phaser_TilemapLayer.prototype.cropRect = new Phaser_Rectangle();
Phaser_TilemapLayer.prototype.game = new Phaser_Game();
Phaser_TilemapLayer.prototype.deltaZ = new Number();
Phaser_TilemapLayer.prototype.transformCallbackContext = new Object();
Phaser_TilemapLayer.prototype.deltaX = new Number();
Phaser_TilemapLayer.prototype.deltaY = new Number();
Phaser_TilemapLayer.prototype._outOfBoundsFired = new Boolean();
Phaser_TilemapLayer.prototype._fixedToCamera = new Boolean();
Phaser_TilemapLayer.prototype.tint = new Number();
Phaser_TilemapLayer.prototype.inputEnabled = new Boolean();
Phaser_TilemapLayer.prototype.cachedTint = new Number();
Phaser_TilemapLayer.prototype.debugSettings = new Object();
Phaser_TilemapLayer.prototype.animations = new Phaser_AnimationManager();
Phaser_TilemapLayer.prototype.debug = new Boolean();
Phaser_TilemapLayer.prototype.sharedCopyCanvas = new Object();
Phaser_TilemapLayer.prototype.frameName = new String();
Phaser_TilemapLayer.prototype._height = new Number();
Phaser_TilemapLayer.prototype._exists = new Boolean();
Phaser_TilemapLayer.prototype.pendingDestroy = new Boolean();
Phaser_TilemapLayer.prototype.blendMode = new Number();
Phaser_TilemapLayer.prototype.customRender = new Boolean();
Phaser_TilemapLayer.prototype.fresh = new Boolean();
Phaser_TilemapLayer.prototype.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_TilemapLayer.prototype.resizeFrame = function (parent, width, height) {};
Phaser_TilemapLayer.prototype.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_TilemapLayer.prototype.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_TilemapLayer.prototype.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_TilemapLayer.prototype.renderDebug = function () {};
Phaser_TilemapLayer.prototype.postUpdate = function () {};
Phaser_TilemapLayer.prototype.getRayCastTiles = function (line, stepRate, collides, interestingFace) { return new Array__Phaser_Tile_(); };
Phaser_TilemapLayer.prototype.getTileXY = function (x, y, point) { return new Phaser_Point(); };
Phaser_TilemapLayer.prototype.destroy = function () {};
Phaser_TilemapLayer.prototype.checkTransform = function (wt) {};
Phaser_TilemapLayer.prototype.reset = function (x, y, health) { return new PIXI_DisplayObject(); };
Phaser_TilemapLayer.prototype.preUpdate = function () {};
Phaser_TilemapLayer.prototype.renderDeltaScroll = function () {};
Phaser_TilemapLayer.prototype.damage = function (amount) { return new Phaser_Sprite(); };
Phaser_TilemapLayer.prototype._unfixY = function (y) { return new Number(); };
Phaser_TilemapLayer.prototype._unfixX = function (x) { return new Number(); };
Phaser_TilemapLayer.prototype.setScaleMinMax = function (minX, minY, maxX, maxY) {};
Phaser_TilemapLayer.prototype.resetTilesetCache = function () {};
Phaser_TilemapLayer.prototype.renderFull = function () {};
Phaser_TilemapLayer.prototype.kill = function () { return new PIXI_DisplayObject(); };
Phaser_TilemapLayer.prototype.renderRegion = function (scrollX, scrollY, left, top, right, bottom) {};
Phaser_TilemapLayer.prototype.getTileY = function (y) { return new Number(); };
Phaser_TilemapLayer.prototype.getTileX = function (x) { return new Number(); };
Phaser_TilemapLayer.prototype.ensureSharedCopyCanvas = function () {};
Phaser_TilemapLayer.prototype.setScale = function (xScale, yScale) {};
Phaser_TilemapLayer.prototype._fixX = function (x) { return new Number(); };
Phaser_TilemapLayer.prototype._fixY = function (y) { return new Number(); };
Phaser_TilemapLayer.prototype.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_TilemapLayer.prototype.updateCrop = function () {};
Phaser_TilemapLayer.prototype.overlap = function (displayObject) { return new Boolean(); };
Phaser_TilemapLayer.prototype.loadTexture = function (key, frame, stopAnimation) {};
Phaser_TilemapLayer.prototype.crop = function (rect, copy) {};
Phaser_TilemapLayer.prototype.resizeWorld = function () {};
Phaser_TilemapLayer.prototype.update = function () {};
Phaser_TilemapLayer.prototype.resolveTileset = function (Tile) { return new Phaser_Tileset(); };
Phaser_TilemapLayer.prototype.setFrame = function (frame) {};
Phaser_TilemapLayer.prototype.heal = function (amount) { return new Phaser_Sprite(); };
Phaser_TilemapLayer.prototype.render = function () {};
Phaser_TilemapLayer.prototype.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_TilemapLayer.prototype.resetFrame = function () {};
Phaser_TilemapLayer.prototype.shiftCanvas = function (context, x, y) {};
Phaser_TilemapLayer.prototype.resize = function (width, height) {};
Phaser_TilemapLayer.prototype.getTiles = function (x, y, width, height, collides, interestingFace) { return new array__Phaser_Tile_(); };

var Phaser_Utils_Debug = function (game) {};
Phaser_Utils_Debug.prototype.game = new Phaser_Game();
Phaser_Utils_Debug.prototype.currentAlpha = new Number();
Phaser_Utils_Debug.prototype.currentY = new Number();
Phaser_Utils_Debug.prototype.renderShadow = new Boolean();
Phaser_Utils_Debug.prototype.sprite = new Phaser_Image();
Phaser_Utils_Debug.prototype.context = new CanvasRenderingContext2D();
Phaser_Utils_Debug.prototype.columnWidth = new Number();
Phaser_Utils_Debug.prototype.dirty = new Boolean();
Phaser_Utils_Debug.prototype.canvas = new HTMLCanvasElement();
Phaser_Utils_Debug.prototype.currentX = new Number();
Phaser_Utils_Debug.prototype.bmd = new Phaser_BitmapData();
Phaser_Utils_Debug.prototype.lineHeight = new Number();
Phaser_Utils_Debug.prototype.font = new String();
Phaser_Utils_Debug.prototype.ropeSegments = function (rope, color, filled) {};
Phaser_Utils_Debug.prototype.line = function () {};
Phaser_Utils_Debug.prototype.spriteInputInfo = function (sprite, x, y, color) {};
Phaser_Utils_Debug.prototype.bodyInfo = function (sprite, x, y, color) {};
Phaser_Utils_Debug.prototype.quadTree = function (quadtree, color) {};
Phaser_Utils_Debug.prototype.geom = function (object, color, filled, forceType) {};
Phaser_Utils_Debug.prototype.body = function (sprite, color, filled) {};
Phaser_Utils_Debug.prototype.box2dBody = function (sprite, color) {};
Phaser_Utils_Debug.prototype.timer = function (timer, x, y, color) {};
Phaser_Utils_Debug.prototype.spriteInfo = function (sprite, x, y, color) {};
Phaser_Utils_Debug.prototype.lineInfo = function (line, x, y, color) {};
Phaser_Utils_Debug.prototype.text = function (text, x, y, color, font) {};
Phaser_Utils_Debug.prototype.boot = function () {};
Phaser_Utils_Debug.prototype.pixel = function (x, y, color, size) {};
Phaser_Utils_Debug.prototype.key = function (key, x, y, color) {};
Phaser_Utils_Debug.prototype.inputInfo = function (x, y, color) {};
Phaser_Utils_Debug.prototype.pointer = function (pointer, hideIfUp, downColor, upColor, color) {};
Phaser_Utils_Debug.prototype.box2dWorld = function () {};
Phaser_Utils_Debug.prototype.spriteCoords = function (sprite, x, y, color) {};
Phaser_Utils_Debug.prototype.start = function (x, y, color, columnWidth) {};
Phaser_Utils_Debug.prototype.destroy = function () {};
Phaser_Utils_Debug.prototype.spriteBounds = function (sprite, color, filled) {};
Phaser_Utils_Debug.prototype.soundInfo = function (sound, x, y, color) {};
Phaser_Utils_Debug.prototype.stop = function () {};
Phaser_Utils_Debug.prototype.reset = function () {};
Phaser_Utils_Debug.prototype.preUpdate = function () {};
Phaser_Utils_Debug.prototype.cameraInfo = function (camera, x, y, color) {};

var Phaser_Easing_Back = function () {};
Phaser_Easing_Back.prototype.In = function (k) { return new Number(); };
Phaser_Easing_Back.prototype.InOut = function (k) { return new Number(); };
Phaser_Easing_Back.prototype.Out = function (k) { return new Number(); };

var Phaser_ArrayUtils = function () {};
Phaser_ArrayUtils.prototype.rotate = function (array) { return new Object(); };
Phaser_ArrayUtils.prototype.numberArray = function (start, end) { return new Array__number_(); };
Phaser_ArrayUtils.prototype.rotateMatrix = function (matrix, direction) { return new Array__Array__any__(); };
Phaser_ArrayUtils.prototype.removeRandomItem = function (objects, startIndex, length) { return new Object(); };
Phaser_ArrayUtils.prototype.transposeMatrix = function (array) { return new Array__Array__any__(); };
Phaser_ArrayUtils.prototype.findClosest = function (value, arr) { return new Number(); };
Phaser_ArrayUtils.prototype.getRandomItem = function (objects, startIndex, length) { return new Object(); };
Phaser_ArrayUtils.prototype.shuffle = function (array) { return new Array__any_(); };
Phaser_ArrayUtils.prototype.numberArrayStep = function (start, end, step) { return new Array(); };

var Phaser_FlexLayer = function (manager, position, bounds, scale) {};
Phaser_FlexLayer.prototype = new Phaser.Group();
Phaser_FlexLayer.prototype.type = new Number();
Phaser_FlexLayer.prototype.enableBody = new Boolean();
Phaser_FlexLayer.prototype.children = new Array_DisplayObject_();
Phaser_FlexLayer.prototype.enableBodyDebug = new Boolean();
Phaser_FlexLayer.prototype.physicsType = new Number();
Phaser_FlexLayer.prototype.cursorIndex = new Number();
Phaser_FlexLayer.prototype.physicsSortDirection = new Number();
Phaser_FlexLayer.prototype.bounds = new Phaser_Rectangle();
Phaser_FlexLayer.prototype.hash = new Array();
Phaser_FlexLayer.prototype.alive = new Boolean();
Phaser_FlexLayer.prototype.bottomRight = new Phaser_Point();
Phaser_FlexLayer.prototype.angle = new Number();
Phaser_FlexLayer.prototype.persist = new Boolean();
Phaser_FlexLayer.prototype.bottomLeft = new Phaser_Point();
Phaser_FlexLayer.prototype.onDestroy = new Phaser_Signal();
Phaser_FlexLayer.prototype.topRight = new Phaser_Point();
Phaser_FlexLayer.prototype.grid = new Phaser_FlexGrid();
Phaser_FlexLayer.prototype.ignoreDestroy = new Boolean();
Phaser_FlexLayer.prototype.x = new Number();
Phaser_FlexLayer.prototype.exists = new Boolean();
Phaser_FlexLayer.prototype.y = new Number();
Phaser_FlexLayer.prototype.z = new Number();
Phaser_FlexLayer.prototype.physicsBodyType = new Number();
Phaser_FlexLayer.prototype._sortProperty = new String();
Phaser_FlexLayer.prototype.fixedToCamera = new Boolean();
Phaser_FlexLayer.prototype.visible = new Boolean();
Phaser_FlexLayer.prototype.cameraOffset = new Phaser_Point();
Phaser_FlexLayer.prototype.name = new String();
Phaser_FlexLayer.prototype.position = new Phaser_Point();
Phaser_FlexLayer.prototype.classType = new Object();
Phaser_FlexLayer.prototype.cursor = new PIXI_DisplayObject();
Phaser_FlexLayer.prototype.game = new Phaser_Game();
Phaser_FlexLayer.prototype.scale = new Phaser_ScaleManager();
Phaser_FlexLayer.prototype.total = new Number();
Phaser_FlexLayer.prototype.alpha = new Number();
Phaser_FlexLayer.prototype.bottomMiddle = new Phaser_Point();
Phaser_FlexLayer.prototype.rotation = new Number();
Phaser_FlexLayer.prototype.length = new Number();
Phaser_FlexLayer.prototype.topMiddle = new Phaser_Point();
Phaser_FlexLayer.prototype.pendingDestroy = new Boolean();
Phaser_FlexLayer.prototype.topLeft = new Phaser_Point();
Phaser_FlexLayer.prototype.xy = function (index, x, y) {};
Phaser_FlexLayer.prototype.descendingSortHandler = function (a, b) {};
Phaser_FlexLayer.prototype.moveAll = function (group, silent) { return new Phaser_Group(); };
Phaser_FlexLayer.prototype.removeAll = function (destroy, silent) {};
Phaser_FlexLayer.prototype.customSort = function (sortHandler, context) {};
Phaser_FlexLayer.prototype.bringToTop = function (child) { return new Object(); };
Phaser_FlexLayer.prototype.moveUp = function (child) { return new Object(); };
Phaser_FlexLayer.prototype.postUpdate = function () {};
Phaser_FlexLayer.prototype.destroy = function (destroyChildren, soft) {};
Phaser_FlexLayer.prototype.getFirstDead = function () { return new Object(); };
Phaser_FlexLayer.prototype.addAt = function (child, index, silent) { return new PIXI_DisplayObject(); };
Phaser_FlexLayer.prototype.forEachAlive = function (callback, callbackContext, args) {};
Phaser_FlexLayer.prototype.resetCursor = function (index) { return new Object(); };
Phaser_FlexLayer.prototype.addMultiple = function (children, silent) { return new Array__DisplayObject_(); };
Phaser_FlexLayer.prototype.setProperty = function (child, key, value, operation, force) { return new Boolean(); };
Phaser_FlexLayer.prototype.preUpdate = function () {};
Phaser_FlexLayer.prototype.addToHash = function (child) { return new Boolean(); };
Phaser_FlexLayer.prototype.checkProperty = function (child, key, value, force) { return new Boolean(); };
Phaser_FlexLayer.prototype.callbackFromArray = function (child, callback, length) {};
Phaser_FlexLayer.prototype.multiplyAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_FlexLayer.prototype.iterate = function (key, value, returnType, callback, callbackContext, args) { return new Object(); };
Phaser_FlexLayer.prototype.set = function (child, key, value, checkAlive, checkVisible, operation, force) { return new Boolean(); };
Phaser_FlexLayer.prototype.getFirstExists = function (exists) { return new Object(); };
Phaser_FlexLayer.prototype.reverse = function () {};
Phaser_FlexLayer.prototype.filter = function (predicate, checkExists) { return new Phaser_ArraySet(); };
Phaser_FlexLayer.prototype.addAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_FlexLayer.prototype.divideAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_FlexLayer.prototype.setAllChildren = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_FlexLayer.prototype.getIndex = function (child) { return new Number(); };
Phaser_FlexLayer.prototype.getBottom = function () { return new Object(); };
Phaser_FlexLayer.prototype.replace = function (oldChild, newChild) { return new Object(); };
Phaser_FlexLayer.prototype.getRandom = function (startIndex, length) { return new Object(); };
Phaser_FlexLayer.prototype.forEachExists = function (callback, callbackContext, args) {};
Phaser_FlexLayer.prototype.getTop = function () { return new Object(); };
Phaser_FlexLayer.prototype.create = function (x, y, key, frame, exists) { return new PIXI_DisplayObject(); };
Phaser_FlexLayer.prototype.countDead = function () { return new Number(); };
Phaser_FlexLayer.prototype.subAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_FlexLayer.prototype.add = function (child, silent) { return new PIXI_DisplayObject(); };
Phaser_FlexLayer.prototype.swap = function (child1, child2) {};
Phaser_FlexLayer.prototype.sort = function (key, order) {};
Phaser_FlexLayer.prototype.moveDown = function (child) { return new Object(); };
Phaser_FlexLayer.prototype.hasProperty = function (child, key) { return new Boolean(); };
Phaser_FlexLayer.prototype.updateZ = function () {};
Phaser_FlexLayer.prototype.ascendingSortHandler = function (a, b) {};
Phaser_FlexLayer.prototype.removeBetween = function (startIndex, endIndex, destroy, silent) {};
Phaser_FlexLayer.prototype.removeFromHash = function (child) { return new Boolean(); };
Phaser_FlexLayer.prototype.next = function () { return new Object(); };
Phaser_FlexLayer.prototype.forEachDead = function (callback, callbackContext, args) {};
Phaser_FlexLayer.prototype.update = function () {};
Phaser_FlexLayer.prototype.countLiving = function () { return new Number(); };
Phaser_FlexLayer.prototype.remove = function (child, destroy, silent) { return new Boolean(); };
Phaser_FlexLayer.prototype.callAll = function (method, context, args) {};
Phaser_FlexLayer.prototype.createMultiple = function (quantity, key, frame, exists) {};
Phaser_FlexLayer.prototype.setAll = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_FlexLayer.prototype.callAllExists = function (callback, existsValue, parameter) {};
Phaser_FlexLayer.prototype.debug = function () {};
Phaser_FlexLayer.prototype.checkAll = function (key, value, checkAlive, checkVisible, force) {};
Phaser_FlexLayer.prototype.previous = function () { return new Object(); };
Phaser_FlexLayer.prototype.forEach = function (callback, callbackContext, checkExists, args) {};
Phaser_FlexLayer.prototype.sendToBack = function (child) { return new Object(); };
Phaser_FlexLayer.prototype.getAt = function (index) { return new PIXI_DisplayObject(); };
Phaser_FlexLayer.prototype.getFirstAlive = function () { return new Object(); };
Phaser_FlexLayer.prototype.resize = function () {};

var CanvasTinter = function () {};

var Phaser_Physics_Ninja_Tile = function (body, x, y, width, height, type) {};
Phaser_Physics_Ninja_Tile.prototype.sx = new Number();
Phaser_Physics_Ninja_Tile.prototype.sy = new Number();
Phaser_Physics_Ninja_Tile.prototype.bottom = new Number();
Phaser_Physics_Ninja_Tile.prototype.oldpos = new Phaser_Point();
Phaser_Physics_Ninja_Tile.prototype.velocity = new Phaser_Point();
Phaser_Physics_Ninja_Tile.prototype.right = new Number();
Phaser_Physics_Ninja_Tile.prototype.type = new Number();
Phaser_Physics_Ninja_Tile.prototype.system = new Phaser_Physics_Ninja_Body();
Phaser_Physics_Ninja_Tile.prototype.pos = new Phaser_Point();
Phaser_Physics_Ninja_Tile.prototype.width = new Number();
Phaser_Physics_Ninja_Tile.prototype.x = new Number();
Phaser_Physics_Ninja_Tile.prototype.signy = new Number();
Phaser_Physics_Ninja_Tile.prototype.y = new Number();
Phaser_Physics_Ninja_Tile.prototype.id = new Number();
Phaser_Physics_Ninja_Tile.prototype.signx = new Number();
Phaser_Physics_Ninja_Tile.prototype.xw = new Number();
Phaser_Physics_Ninja_Tile.prototype.height = new Number();
Phaser_Physics_Ninja_Tile.prototype.clear = function () {};
Phaser_Physics_Ninja_Tile.prototype.destroy = function () {};
Phaser_Physics_Ninja_Tile.prototype.setType = function (id) {};
Phaser_Physics_Ninja_Tile.prototype.integrate = function () {};
Phaser_Physics_Ninja_Tile.prototype.reportCollisionVsWorld = function (px, py, dx, dy, obj) {};
Phaser_Physics_Ninja_Tile.prototype.collideWorldBounds = function () {};
Phaser_Physics_Ninja_Tile.prototype.updateType = function () {};

var Phaser_Component_Bounds = function () {};
Phaser_Component_Bounds.prototype.offsetX = new Number();
Phaser_Component_Bounds.prototype.offsetY = new Number();
Phaser_Component_Bounds.prototype.top = new Number();
Phaser_Component_Bounds.prototype.left = new Number();
Phaser_Component_Bounds.prototype.bottom = new Number();
Phaser_Component_Bounds.prototype.right = new Number();

var Phaser_Component_PhysicsBody = function () {};
Phaser_Component_PhysicsBody.prototype.x = new Number();
Phaser_Component_PhysicsBody.prototype.y = new Number();
Phaser_Component_PhysicsBody.prototype.body = new Phaser_Physics_Arcade_Body();
Phaser_Component_PhysicsBody.prototype.postUpdate = function () {};
Phaser_Component_PhysicsBody.prototype.preUpdate = function () {};

var Phaser_Easing_Quintic = function () {};
Phaser_Easing_Quintic.prototype.In = function (k) { return new Number(); };
Phaser_Easing_Quintic.prototype.InOut = function (k) { return new Number(); };
Phaser_Easing_Quintic.prototype.Out = function (k) { return new Number(); };

var Phaser_Rope = function (game, x, y, key, frame, points) {};
Phaser_Rope.prototype._frame = new Phaser_Rectangle();
Phaser_Rope.prototype._crop = new Phaser_Rectangle();
Phaser_Rope.prototype.lifespan = new Number();
Phaser_Rope.prototype.outOfBoundsKill = new Boolean();
Phaser_Rope.prototype.type = new Number();
Phaser_Rope.prototype.body = new Phaser_Physics_Arcade_Body();
Phaser_Rope.prototype.inCamera = new Boolean();
Phaser_Rope.prototype.offsetX = new Number();
Phaser_Rope.prototype.offsetY = new Number();
Phaser_Rope.prototype.fixedToCamera = new Boolean();
Phaser_Rope.prototype.renderOrderID = new Number();
Phaser_Rope.prototype.events = new Phaser_Events();
Phaser_Rope.prototype.previousRotation = new Number();
Phaser_Rope.prototype.bottom = new Number();
Phaser_Rope.prototype.cameraOffset = new Phaser_Point();
Phaser_Rope.prototype.smoothed = new Boolean();
Phaser_Rope.prototype._bounds = new Phaser_Rectangle();
Phaser_Rope.prototype.input = new Phaser_InputHandler();
Phaser_Rope.prototype.left = new Number();
Phaser_Rope.prototype.name = new String();
Phaser_Rope.prototype._scroll = new Phaser_Point();
Phaser_Rope.prototype.updateAnimation = new Function();
Phaser_Rope.prototype.frame = new Number();
Phaser_Rope.prototype.cropRect = new Phaser_Rectangle();
Phaser_Rope.prototype.game = new Phaser_Game();
Phaser_Rope.prototype.components = new Object();
Phaser_Rope.prototype.deltaZ = new Number();
Phaser_Rope.prototype.alive = new Boolean();
Phaser_Rope.prototype.transformCallbackContext = new Object();
Phaser_Rope.prototype.deltaX = new Number();
Phaser_Rope.prototype.deltaY = new Number();
Phaser_Rope.prototype._outOfBoundsFired = new Boolean();
Phaser_Rope.prototype._fixedToCamera = new Boolean();
Phaser_Rope.prototype.transformCallback = new Function();
Phaser_Rope.prototype.inWorld = new Boolean();
Phaser_Rope.prototype.inputEnabled = new Boolean();
Phaser_Rope.prototype.world = new Phaser_Point();
Phaser_Rope.prototype.top = new Number();
Phaser_Rope.prototype.animations = new Phaser_AnimationManager();
Phaser_Rope.prototype.angle = new Number();
Phaser_Rope.prototype.checkWorldBounds = new Boolean();
Phaser_Rope.prototype.key = new String();
Phaser_Rope.prototype.debug = new Boolean();
Phaser_Rope.prototype.frameName = new String();
Phaser_Rope.prototype.destroyPhase = new Boolean();
Phaser_Rope.prototype.right = new Number();
Phaser_Rope.prototype.previousPosition = new Phaser_Point();
Phaser_Rope.prototype.scaleMax = new Phaser_Point();
Phaser_Rope.prototype._exists = new Boolean();
Phaser_Rope.prototype.pendingDestroy = new Boolean();
Phaser_Rope.prototype.customRender = new Boolean();
Phaser_Rope.prototype.autoCull = new Boolean();
Phaser_Rope.prototype.x = new Number();
Phaser_Rope.prototype.exists = new Boolean();
Phaser_Rope.prototype.y = new Number();
Phaser_Rope.prototype.z = new Number();
Phaser_Rope.prototype.fresh = new Boolean();
Phaser_Rope.prototype.scaleMin = new Phaser_Point();
Phaser_Rope.prototype.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_Rope.prototype.resizeFrame = function (parent, width, height) {};
Phaser_Rope.prototype.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Rope.prototype.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_Rope.prototype.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_Rope.prototype.postUpdate = function () {};
Phaser_Rope.prototype.destroy = function (destroyChildren) {};
Phaser_Rope.prototype.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_Rope.prototype.updateCrop = function () {};
Phaser_Rope.prototype.checkTransform = function (wt) {};
Phaser_Rope.prototype.overlap = function (displayObject) { return new Boolean(); };
Phaser_Rope.prototype.loadTexture = function (key, frame, stopAnimation) {};
Phaser_Rope.prototype.reset = function (x, y) { return new _Phaser_Rope__This_instance_(); };
Phaser_Rope.prototype.preUpdate = function () {};
Phaser_Rope.prototype.crop = function (rect, copy) {};
Phaser_Rope.prototype.update = function () {};
Phaser_Rope.prototype.setFrame = function (frame) {};
Phaser_Rope.prototype.setScaleMinMax = function (minX, minY, maxX, maxY) {};
Phaser_Rope.prototype.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_Rope.prototype.kill = function () { return new PIXI_DisplayObject(); };
Phaser_Rope.prototype.resetFrame = function () {};

var Phaser_Easing_Quadratic = function () {};
Phaser_Easing_Quadratic.prototype.In = function (k) { return new Number(); };
Phaser_Easing_Quadratic.prototype.InOut = function (k) { return new Number(); };
Phaser_Easing_Quadratic.prototype.Out = function (k) { return new Number(); };

var Phaser_Filter = function (game, uniforms, fragmentSrc) {};
Phaser_Filter.prototype.dirty = new Boolean();
Phaser_Filter.prototype.padding = new Number();
Phaser_Filter.prototype.game = new Phaser_Game();
Phaser_Filter.prototype.shaders = new Array();
Phaser_Filter.prototype.uniforms = new Object();
Phaser_Filter.prototype.fragmentSrc = new Array();
Phaser_Filter.prototype.type = new Number();
Phaser_Filter.prototype.passes = new Array();
Phaser_Filter.prototype.width = new Number();
Phaser_Filter.prototype.prevPoint = new Phaser_Point();
Phaser_Filter.prototype.height = new Number();
Phaser_Filter.prototype.init = function () {};
Phaser_Filter.prototype.setResolution = function (width, height) {};
Phaser_Filter.prototype.update = function (pointer) {};
Phaser_Filter.prototype.destroy = function () {};

var Phaser_Button = function (game, x, y, key, callback, callbackContext, overFrame, outFrame, downFrame, upFrame) {};
Phaser_Button.prototype = new Phaser.Image();
Phaser_Button.prototype._crop = new Phaser_Rectangle();
Phaser_Button.prototype.lifespan = new Number();
Phaser_Button.prototype.onInputOut = new Phaser_Signal();
Phaser_Button.prototype.type = new Number();
Phaser_Button.prototype.onInputUp = new Phaser_Signal();
Phaser_Button.prototype._width = new Number();
Phaser_Button.prototype.events = new Phaser_Events();
Phaser_Button.prototype.physicsType = new Number();
Phaser_Button.prototype.smoothed = new Boolean();
Phaser_Button.prototype._bounds = new Phaser_Rectangle();
Phaser_Button.prototype.onOverSoundMarker = new String();
Phaser_Button.prototype.input = new Phaser_InputHandler();
Phaser_Button.prototype.left = new Number();
Phaser_Button.prototype.components = new Object();
Phaser_Button.prototype.alive = new Boolean();
Phaser_Button.prototype.onOutFrame = new String();
Phaser_Button.prototype.world = new Phaser_Point();
Phaser_Button.prototype.top = new Number();
Phaser_Button.prototype.angle = new Number();
Phaser_Button.prototype.key = new String();
Phaser_Button.prototype.onUpSoundMarker = new String();
Phaser_Button.prototype.onDownSound = new Phaser_Sound();
Phaser_Button.prototype.texture = new PIXI_Texture();
Phaser_Button.prototype.destroyPhase = new Boolean();
Phaser_Button.prototype.right = new Number();
Phaser_Button.prototype.previousPosition = new Phaser_Point();
Phaser_Button.prototype.anchor = new Phaser_Point();
Phaser_Button.prototype.autoCull = new Boolean();
Phaser_Button.prototype.onInputOver = new Phaser_Signal();
Phaser_Button.prototype.exists = new Boolean();
Phaser_Button.prototype.z = new Number();
Phaser_Button.prototype._frame = new Phaser_Rectangle();
Phaser_Button.prototype.onOutSoundMarker = new String();
Phaser_Button.prototype.onInputDown = new Phaser_Signal();
Phaser_Button.prototype.inCamera = new Boolean();
Phaser_Button.prototype.offsetX = new Number();
Phaser_Button.prototype.tintedTexture = new Phaser_Canvas();
Phaser_Button.prototype.offsetY = new Number();
Phaser_Button.prototype.onUpSound = new Phaser_Sound();
Phaser_Button.prototype.fixedToCamera = new Boolean();
Phaser_Button.prototype.renderOrderID = new Number();
Phaser_Button.prototype.onDownFrame = new String();
Phaser_Button.prototype.previousRotation = new Number();
Phaser_Button.prototype.onDownSoundMarker = new String();
Phaser_Button.prototype.bottom = new Number();
Phaser_Button.prototype.cameraOffset = new Phaser_Point();
Phaser_Button.prototype.onOverSound = new Phaser_Sound();
Phaser_Button.prototype.freezeFrames = new Boolean();
Phaser_Button.prototype.name = new String();
Phaser_Button.prototype.onUpFrame = new String();
Phaser_Button.prototype.frame = new Number();
Phaser_Button.prototype.shader = new PIXI_AbstractFilter();
Phaser_Button.prototype.cropRect = new Phaser_Rectangle();
Phaser_Button.prototype.game = new Phaser_Game();
Phaser_Button.prototype._fixedToCamera = new Boolean();
Phaser_Button.prototype.onOverMouseOnly = new Boolean();
Phaser_Button.prototype.onOutSound = new Phaser_Sound();
Phaser_Button.prototype.tint = new Number();
Phaser_Button.prototype.inputEnabled = new Boolean();
Phaser_Button.prototype.cachedTint = new Number();
Phaser_Button.prototype.onOverFrame = new String();
Phaser_Button.prototype.forceOut = new Boolean();
Phaser_Button.prototype.animations = new Phaser_AnimationManager();
Phaser_Button.prototype.debug = new Boolean();
Phaser_Button.prototype.frameName = new String();
Phaser_Button.prototype._height = new Number();
Phaser_Button.prototype._exists = new Boolean();
Phaser_Button.prototype.pendingDestroy = new Boolean();
Phaser_Button.prototype.blendMode = new Number();
Phaser_Button.prototype.customRender = new Boolean();
Phaser_Button.prototype.fresh = new Boolean();
Phaser_Button.prototype.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_Button.prototype.setOverSound = function (sound, marker) {};
Phaser_Button.prototype.resizeFrame = function (parent, width, height) {};
Phaser_Button.prototype.onInputUpHandler = function (sprite, pointer) {};
Phaser_Button.prototype.onInputOverHandler = function (sprite, pointer) {};
Phaser_Button.prototype.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Button.prototype.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_Button.prototype.playStateSound = function (state) { return new Boolean(); };
Phaser_Button.prototype.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_Button.prototype.postUpdate = function () {};
Phaser_Button.prototype.setStateSound = function (state, sound, marker) {};
Phaser_Button.prototype.destroy = function (destroyChildren) {};
Phaser_Button.prototype.setStateFrame = function (state, frame, switchImmediately) {};
Phaser_Button.prototype.setUpSound = function (sound, marker) {};
Phaser_Button.prototype.onInputDownHandler = function (sprite, pointer) {};
Phaser_Button.prototype.reset = function (x, y, health) { return new PIXI_DisplayObject(); };
Phaser_Button.prototype.preUpdate = function () {};
Phaser_Button.prototype.changeStateFrame = function (state) { return new Boolean(); };
Phaser_Button.prototype.setFrames = function (overFrame, outFrame, downFrame, upFrame) {};
Phaser_Button.prototype.kill = function () { return new PIXI_DisplayObject(); };
Phaser_Button.prototype.onInputOutHandler = function (sprite, pointer) {};
Phaser_Button.prototype.clearFrames = function () {};
Phaser_Button.prototype.setSounds = function (overSound, overMarker, downSound, downMarker, outSound, outMarker, upSound, upMarker) {};
Phaser_Button.prototype.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_Button.prototype.updateCrop = function () {};
Phaser_Button.prototype.overlap = function (displayObject) { return new Boolean(); };
Phaser_Button.prototype.loadTexture = function (key, frame, stopAnimation) {};
Phaser_Button.prototype.crop = function (rect, copy) {};
Phaser_Button.prototype.setOutSound = function (sound, marker) {};
Phaser_Button.prototype.update = function () {};
Phaser_Button.prototype.setDownSound = function (sound, marker) {};
Phaser_Button.prototype.setFrame = function (frame) {};
Phaser_Button.prototype.removedFromWorld = function () {};
Phaser_Button.prototype.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_Button.prototype.resetFrame = function () {};

var Phaser_SoundManager = function (game) {};
Phaser_SoundManager.prototype.game = new Phaser_Game();
Phaser_SoundManager.prototype.onMute = new Phaser_Signal();
Phaser_SoundManager.prototype._watchCallback = new Function();
Phaser_SoundManager.prototype._watchList = new Phaser_ArraySet();
Phaser_SoundManager.prototype.usingAudioTag = new Boolean();
Phaser_SoundManager.prototype.context = new AudioContext();
Phaser_SoundManager.prototype.onSoundDecode = new Phaser_Signal();
Phaser_SoundManager.prototype.onUnMute = new Phaser_Signal();
Phaser_SoundManager.prototype._unlockSource = new AudioContext();
Phaser_SoundManager.prototype._volume = new Number();
Phaser_SoundManager.prototype._sounds = new Array();
Phaser_SoundManager.prototype._codeMuted = new Boolean();
Phaser_SoundManager.prototype.mute = new Boolean();
Phaser_SoundManager.prototype.onVolumeChange = new Phaser_Signal();
Phaser_SoundManager.prototype.volume = new Number();
Phaser_SoundManager.prototype._watching = new Boolean();
Phaser_SoundManager.prototype.usingWebAudio = new Boolean();
Phaser_SoundManager.prototype.channels = new Number();
Phaser_SoundManager.prototype.connectToMaster = new Boolean();
Phaser_SoundManager.prototype.noAudio = new Boolean();
Phaser_SoundManager.prototype._watchContext = new Object();
Phaser_SoundManager.prototype.touchLocked = new Boolean();
Phaser_SoundManager.prototype._muted = new Boolean();
Phaser_SoundManager.prototype.play = function (key, volume, loop) { return new Phaser_Sound(); };
Phaser_SoundManager.prototype.update = function () {};
Phaser_SoundManager.prototype.decode = function (key, sound) {};
Phaser_SoundManager.prototype.removeByKey = function (key) { return new Number(); };
Phaser_SoundManager.prototype.remove = function (sound) { return new Boolean(); };
Phaser_SoundManager.prototype.stopAll = function () {};
Phaser_SoundManager.prototype.addSprite = function (key) { return new Phaser_AudioSprite(); };
Phaser_SoundManager.prototype.setMute = function () {};
Phaser_SoundManager.prototype.setDecodedCallback = function (files, callback, callbackContext) {};
Phaser_SoundManager.prototype.boot = function () {};
Phaser_SoundManager.prototype.add = function (key, volume, loop, connect) { return new Phaser_Sound(); };
Phaser_SoundManager.prototype.pauseAll = function () {};
Phaser_SoundManager.prototype.unlock = function () { return new Boolean(); };
Phaser_SoundManager.prototype.setTouchLock = function () {};
Phaser_SoundManager.prototype.resumeAll = function () {};
Phaser_SoundManager.prototype.destroy = function () {};
Phaser_SoundManager.prototype.unsetMute = function () {};

var Phaser_Loader = function (game) {};
Phaser_Loader.TEXTURE_ATLAS_JSON_HASH = new Number();
Phaser_Loader.TEXTURE_ATLAS_JSON_ARRAY = new Number();
Phaser_Loader.PHYSICS_LIME_CORONA_JSON = new Number();
Phaser_Loader.PHYSICS_PHASER_JSON = new Number();
Phaser_Loader.TEXTURE_ATLAS_XML_STARLING = new Number();
Phaser_Loader.prototype.progressFloat = new Number();
Phaser_Loader.prototype._withSyncPointDepth_ = new Number();
Phaser_Loader.prototype.resetLocked = new Boolean();
Phaser_Loader.prototype.onFileError = new Phaser_Signal();
Phaser_Loader.prototype.path = new String();
Phaser_Loader.prototype._fileList = new Array__file_();
Phaser_Loader.prototype._flightQueue = new Array__file_();
Phaser_Loader.prototype.useXDomainRequest = new Boolean();
Phaser_Loader.prototype.cache = new Phaser_Cache();
Phaser_Loader.prototype.onFileComplete = new Phaser_Signal();
Phaser_Loader.prototype._processingHead = new Number();
Phaser_Loader.prototype._totalPackCount = new Number();
Phaser_Loader.prototype.onLoadStart = new Phaser_Signal();
Phaser_Loader.prototype.crossOrigin = new Boolean();
Phaser_Loader.prototype.onFileStart = new Phaser_Signal();
Phaser_Loader.prototype.isLoading = new Boolean();
Phaser_Loader.prototype.maxParallelDownloads = new Number();
Phaser_Loader.prototype.onLoadComplete = new Phaser_Signal();
Phaser_Loader.prototype.onPackComplete = new Phaser_Signal();
Phaser_Loader.prototype.hasLoaded = new Boolean();
Phaser_Loader.prototype._loadedPackCount = new Number();
Phaser_Loader.prototype.preloadSprite = new Object();
Phaser_Loader.prototype.game = new Phaser_Game();
Phaser_Loader.prototype._warnedAboutXDomainRequest = new Boolean();
Phaser_Loader.prototype._totalFileCount = new Number();
Phaser_Loader.prototype._loadedFileCount = new Number();
Phaser_Loader.prototype.baseURL = new String();
Phaser_Loader.prototype._initialPacksLoaded = new Boolean();
Phaser_Loader.prototype.progress = new Number();
Phaser_Loader.prototype.enableParallel = new Number();
Phaser_Loader.prototype.loadVideoTag = function () {};
Phaser_Loader.prototype.atlas = function (key, textureURL, atlasURL, atlasData, format) { return new Phaser_Loader(); };
Phaser_Loader.prototype.atlasJSONHash = function (key, textureURL, atlasURL, atlasData) { return new Phaser_Loader(); };
Phaser_Loader.prototype.checkKeyExists = function (type, key) { return new Boolean(); };
Phaser_Loader.prototype.loadImageTag = function () {};
Phaser_Loader.prototype.bitmapFont = function (key, textureURL, atlasURL, atlasData, xSpacing, ySpacing) { return new Phaser_Loader(); };
Phaser_Loader.prototype.getAsset = function (type, key) { return new Object(); };
Phaser_Loader.prototype.getVideoURL = function (urls) { return new String(); };
Phaser_Loader.prototype.totalLoadedPacks = function () { return new Number(); };
Phaser_Loader.prototype.removeAll = function () {};
Phaser_Loader.prototype.csvLoadComplete = function (file, xhr) {};
Phaser_Loader.prototype.xml = function (key, url, overwrite) { return new Phaser_Loader(); };
Phaser_Loader.prototype.text = function (key, url, overwrite) { return new Phaser_Loader(); };
Phaser_Loader.prototype.atlasJSONArray = function (key, textureURL, atlasURL, atlasData) { return new Phaser_Loader(); };
Phaser_Loader.prototype.image = function (key, url, overwrite) { return new Phaser_Loader(); };
Phaser_Loader.prototype.images = function (keys, urls) { return new Phaser_Loader(); };
Phaser_Loader.prototype.audiosprite = function (key, urls, jsonURL, jsonData, autoDecode) { return new Phaser_Loader(); };
Phaser_Loader.prototype.setPreloadSprite = function (sprite, direction) {};
Phaser_Loader.prototype.getAudioURL = function (urls) { return new String(); };
Phaser_Loader.prototype.pack = function (key, url, data, callbackContext) { return new Phaser_Loader(); };
Phaser_Loader.prototype.script = function (key, url, callback, callbackContext) { return new Phaser_Loader(); };
Phaser_Loader.prototype.processLoadQueue = function () {};
Phaser_Loader.prototype.finishedLoading = function (abnormal) {};
Phaser_Loader.prototype.binary = function (key, url, callback, callbackContext) { return new Phaser_Loader(); };
Phaser_Loader.prototype.processPack = function (pack) {};
Phaser_Loader.prototype.reset = function (hard, clearEvents) {};
Phaser_Loader.prototype.transformUrl = function (url, file) { return new String(); };
Phaser_Loader.prototype.getAssetIndex = function (type, key) { return new Number(); };
Phaser_Loader.prototype.shader = function (key, url, overwrite) { return new Phaser_Loader(); };
Phaser_Loader.prototype.jsonLoadComplete = function (file, xhr) {};
Phaser_Loader.prototype.withSyncPoints = function (callback, callbackContext) { return new Phaser_Loader(); };
Phaser_Loader.prototype.loadAudioTag = function () {};
Phaser_Loader.prototype.xhrLoad = function (file, url, type, onload, onerror) {};
Phaser_Loader.prototype.video = function (key, urls, loadEvent, asBlob) { return new Phaser_Loader(); };
Phaser_Loader.prototype.totalQueuedFiles = function () { return new Number(); };
Phaser_Loader.prototype.tilemap = function (key, url, data, format) { return new Phaser_Loader(); };
Phaser_Loader.prototype.xmlLoadComplete = function (file, xhr) {};
Phaser_Loader.prototype.removeFile = function (type, key) {};
Phaser_Loader.prototype.totalQueuedPacks = function () { return new Number(); };
Phaser_Loader.prototype.physics = function (key, url, data, format) { return new Phaser_Loader(); };
Phaser_Loader.prototype.json = function (key, url, overwrite) { return new Phaser_Loader(); };
Phaser_Loader.prototype.audio = function (key, urls, autoDecode) { return new Phaser_Loader(); };
Phaser_Loader.prototype.spritesheet = function (key, url, frameWidth, frameHeight, frameMax, margin, spacing) { return new Phaser_Loader(); };
Phaser_Loader.prototype.asyncComplete = function (file, error) {};
Phaser_Loader.prototype.fileComplete = function (file, xhr) {};
Phaser_Loader.prototype.start = function () {};
Phaser_Loader.prototype.nextFile = function (previousFile, success) {};
Phaser_Loader.prototype.atlasXML = function (key, textureURL, atlasURL, atlasData) { return new Phaser_Loader(); };
Phaser_Loader.prototype.addToFileList = function (type, key, url, properties, overwrite, extension) { return new Phaser_Loader(); };
Phaser_Loader.prototype.totalLoadedFiles = function () { return new Number(); };
Phaser_Loader.prototype.fileError = function (file, xhr, reason) {};
Phaser_Loader.prototype.addSyncPoint = function (type, key) { return new Phaser_Loader(); };
Phaser_Loader.prototype.resize = function () {};
Phaser_Loader.prototype.loadFile = function (file) {};
Phaser_Loader.prototype.replaceInFileList = function (type, key, url, properties) {};

var Phaser_PluginManager = function (game) {};
Phaser_PluginManager.prototype.game = new Phaser_Game();
Phaser_PluginManager.prototype.plugins = new Array__Phaser_Plugin_();
Phaser_PluginManager.prototype._i = new Number();
Phaser_PluginManager.prototype._len = new Number();
Phaser_PluginManager.prototype.add = function (plugin, parameter) { return new Phaser_Plugin(); };
Phaser_PluginManager.prototype.postRender = function () {};
Phaser_PluginManager.prototype.postUpdate = function () {};
Phaser_PluginManager.prototype.update = function () {};
Phaser_PluginManager.prototype.destroy = function () {};
Phaser_PluginManager.prototype.remove = function (plugin) {};
Phaser_PluginManager.prototype.removeAll = function () {};
Phaser_PluginManager.prototype.preUpdate = function () {};
Phaser_PluginManager.prototype.render = function () {};

var Phaser_TweenData = function (parent) {};
Phaser_TweenData.COMPLETE = new Number();
Phaser_TweenData.RUNNING = new Number();
Phaser_TweenData.PENDING = new Number();
Phaser_TweenData.LOOPED = new Number();
Phaser_TweenData.prototype.parent = new Phaser_Tween();
Phaser_TweenData.prototype.game = new Phaser_Game();
Phaser_TweenData.prototype.percent = new Number();
Phaser_TweenData.prototype.duration = new Number();
Phaser_TweenData.prototype.dt = new Number();
Phaser_TweenData.prototype.vEndCache = new Object();
Phaser_TweenData.prototype.interpolationFunction = new Function();
Phaser_TweenData.prototype.yoyoDelay = new Number();
Phaser_TweenData.prototype.yoyo = new Boolean();
Phaser_TweenData.prototype.isRunning = new Boolean();
Phaser_TweenData.prototype.isFrom = new Boolean();
Phaser_TweenData.prototype.startTime = new Number();
Phaser_TweenData.prototype.repeatCounter = new Number();
Phaser_TweenData.prototype.repeatDelay = new Number();
Phaser_TweenData.prototype.value = new Number();
Phaser_TweenData.prototype.easingFunction = new Function();
Phaser_TweenData.prototype.inReverse = new Boolean();
Phaser_TweenData.prototype.interpolate = new Boolean();
Phaser_TweenData.prototype.interpolationContext = new Object();
Phaser_TweenData.prototype.vStart = new Object();
Phaser_TweenData.prototype.vStartCache = new Object();
Phaser_TweenData.prototype.vEnd = new Object();
Phaser_TweenData.prototype.delay = new Number();
Phaser_TweenData.prototype.update = function (time) { return new Number(); };
Phaser_TweenData.prototype.repeat = function () { return new Number(); };
Phaser_TweenData.prototype.generateData = function (frameRate) { return new Array(); };
Phaser_TweenData.prototype.from = function (properties, duration, ease, delay, repeat, yoyo) { return new Phaser_TweenData(); };
Phaser_TweenData.prototype.loadValues = function () { return new Phaser_TweenData(); };
Phaser_TweenData.prototype.start = function () { return new Phaser_TweenData(); };
Phaser_TweenData.prototype.to = function (properties, duration, ease, delay, repeat, yoyo) { return new Phaser_TweenData(); };

var Phaser_Text = function (game, x, y, text, style, style_font, style_fontStyle, style_fontVariant, style_fontWeight, style_fontSize, style_backgroundColor, style_fill, style_align, style_boundsAlignH, style_boundsAlignV, style_stroke, style_strokeThickness, style_wordWrap, style_wordWrapWidth, style_tabs) {};
Phaser_Text.prototype = new Phaser.Sprite();
Phaser_Text.prototype._charCount = new Number();
Phaser_Text.prototype._crop = new Phaser_Rectangle();
Phaser_Text.prototype.lifespan = new Number();
Phaser_Text.prototype.outOfBoundsKill = new Boolean();
Phaser_Text.prototype.type = new Number();
Phaser_Text.prototype.resolution = new Number();
Phaser_Text.prototype.context = new HTMLCanvasElement();
Phaser_Text.prototype.maxHealth = new Number();
Phaser_Text.prototype.text = new String();
Phaser_Text.prototype._width = new Number();
Phaser_Text.prototype.shadowColor = new String();
Phaser_Text.prototype.events = new Phaser_Events();
Phaser_Text.prototype.physicsType = new Number();
Phaser_Text.prototype.height = new Number();
Phaser_Text.prototype.canvas = new HTMLCanvasElement();
Phaser_Text.prototype.smoothed = new Boolean();
Phaser_Text.prototype._bounds = new Phaser_Rectangle();
Phaser_Text.prototype.fontStyle = new String();
Phaser_Text.prototype.input = new Phaser_InputHandler();
Phaser_Text.prototype.left = new Number();
Phaser_Text.prototype.fontSize = new Number();
Phaser_Text.prototype.shadowOffsetX = new Number();
Phaser_Text.prototype.shadowOffsetY = new Number();
Phaser_Text.prototype.components = new Object();
Phaser_Text.prototype.alive = new Boolean();
Phaser_Text.prototype.tabs = new Number();
Phaser_Text.prototype.transformCallback = new Function();
Phaser_Text.prototype.inWorld = new Boolean();
Phaser_Text.prototype.colors = new Array();
Phaser_Text.prototype.cssFont = new String();
Phaser_Text.prototype.fontStyles = new Array();
Phaser_Text.prototype.autoRound = new Boolean();
Phaser_Text.prototype._fontComponents = new Object();
Phaser_Text.prototype.world = new Phaser_Point();
Phaser_Text.prototype.top = new Number();
Phaser_Text.prototype.angle = new Number();
Phaser_Text.prototype.fontWeights = new Array();
Phaser_Text.prototype.textBounds = new Phaser_Rectangle();
Phaser_Text.prototype.checkWorldBounds = new Boolean();
Phaser_Text.prototype.key = new String();
Phaser_Text.prototype.shadowStroke = new Boolean();
Phaser_Text.prototype.texture = new PIXI_Texture();
Phaser_Text.prototype.health = new Number();
Phaser_Text.prototype.destroyPhase = new Boolean();
Phaser_Text.prototype.boundsAlignH = new String();
Phaser_Text.prototype.right = new Number();
Phaser_Text.prototype.previousPosition = new Phaser_Point();
Phaser_Text.prototype.scaleMax = new Phaser_Point();
Phaser_Text.prototype.anchor = new Phaser_Point();
Phaser_Text.prototype.strokeThickness = new Number();
Phaser_Text.prototype.width = new Number();
Phaser_Text.prototype.autoCull = new Boolean();
Phaser_Text.prototype.x = new Number();
Phaser_Text.prototype.exists = new Boolean();
Phaser_Text.prototype.y = new Number();
Phaser_Text.prototype.z = new Number();
Phaser_Text.prototype._text = new String();
Phaser_Text.prototype.font = new String();
Phaser_Text.prototype.scaleMin = new Phaser_Point();
Phaser_Text.prototype._frame = new Phaser_Rectangle();
Phaser_Text.prototype.shadowBlur = new Number();
Phaser_Text.prototype.fontVariant = new String();
Phaser_Text.prototype.align = new String();
Phaser_Text.prototype.body = new Phaser_Physics_Arcade_Body();
Phaser_Text.prototype.lineSpacing = new Number();
Phaser_Text.prototype.inCamera = new Boolean();
Phaser_Text.prototype.offsetX = new Number();
Phaser_Text.prototype.tintedTexture = new Phaser_Canvas();
Phaser_Text.prototype.offsetY = new Number();
Phaser_Text.prototype.boundsAlignV = new String();
Phaser_Text.prototype.fixedToCamera = new Boolean();
Phaser_Text.prototype.renderOrderID = new Number();
Phaser_Text.prototype.fontWeight = new String();
Phaser_Text.prototype.previousRotation = new Number();
Phaser_Text.prototype.bottom = new Number();
Phaser_Text.prototype.cameraOffset = new Phaser_Point();
Phaser_Text.prototype.fill = new Object();
Phaser_Text.prototype.strokeColors = new Array();
Phaser_Text.prototype.name = new String();
Phaser_Text.prototype.frame = new Number();
Phaser_Text.prototype.shader = new PIXI_AbstractFilter();
Phaser_Text.prototype.cropRect = new Phaser_Rectangle();
Phaser_Text.prototype.game = new Phaser_Game();
Phaser_Text.prototype.deltaZ = new Number();
Phaser_Text.prototype.transformCallbackContext = new Object();
Phaser_Text.prototype.wordWrap = new Boolean();
Phaser_Text.prototype.deltaX = new Number();
Phaser_Text.prototype.deltaY = new Number();
Phaser_Text.prototype._outOfBoundsFired = new Boolean();
Phaser_Text.prototype._fixedToCamera = new Boolean();
Phaser_Text.prototype._res = new Number();
Phaser_Text.prototype.tint = new Number();
Phaser_Text.prototype.inputEnabled = new Boolean();
Phaser_Text.prototype.cachedTint = new Number();
Phaser_Text.prototype.animations = new Phaser_AnimationManager();
Phaser_Text.prototype.padding = new Phaser_Point();
Phaser_Text.prototype.debug = new Boolean();
Phaser_Text.prototype.frameName = new String();
Phaser_Text.prototype.wordWrapWidth = new Number();
Phaser_Text.prototype.shadowFill = new Boolean();
Phaser_Text.prototype.stroke = new String();
Phaser_Text.prototype._height = new Number();
Phaser_Text.prototype._exists = new Boolean();
Phaser_Text.prototype.pendingDestroy = new Boolean();
Phaser_Text.prototype.blendMode = new Number();
Phaser_Text.prototype.customRender = new Boolean();
Phaser_Text.prototype.fresh = new Boolean();
Phaser_Text.prototype.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_Text.prototype.updateLine = function () {};
Phaser_Text.prototype.updateShadow = function (state) {};
Phaser_Text.prototype.getBounds = function (matrix) { return new Phaser_Rectangle(); };
Phaser_Text.prototype._renderCanvas = function (renderSession) {};
Phaser_Text.prototype.resizeFrame = function (parent, width, height) {};
Phaser_Text.prototype.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_Text.prototype.clearFontValues = function () { return new Phaser_Text(); };
Phaser_Text.prototype.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_Text.prototype.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_Text.prototype.componentsToFont = function (components) {};
Phaser_Text.prototype.postUpdate = function () {};
Phaser_Text.prototype.destroy = function (destroyChildren) {};
Phaser_Text.prototype.determineFontProperties = function (fontStyle) {};
Phaser_Text.prototype.checkTransform = function (wt) {};
Phaser_Text.prototype.addStrokeColor = function (color, position) { return new Phaser_Text(); };
Phaser_Text.prototype.reset = function (x, y, health) { return new PIXI_DisplayObject(); };
Phaser_Text.prototype.setTextBounds = function (x, y, width, height) { return new Phaser_Text(); };
Phaser_Text.prototype.preUpdate = function () {};
Phaser_Text.prototype.updateTexture = function () {};
Phaser_Text.prototype.damage = function (amount) { return new Phaser_Sprite(); };
Phaser_Text.prototype.addFontWeight = function (style, position) { return new Phaser_Text(); };
Phaser_Text.prototype.runWordWrap = function (text) {};
Phaser_Text.prototype.parseList = function (list) { return new Phaser_Text(); };
Phaser_Text.prototype.setShadow = function (x, y, color, blur, shadowStroke, shadowFill) { return new Phaser_Text(); };
Phaser_Text.prototype.addFontStyle = function (style, position) { return new Phaser_Text(); };
Phaser_Text.prototype.setScaleMinMax = function (minX, minY, maxX, maxY) {};
Phaser_Text.prototype.fontToComponents = function (font) {};
Phaser_Text.prototype.kill = function () { return new PIXI_DisplayObject(); };
Phaser_Text.prototype.addColor = function (color, position) { return new Phaser_Text(); };
Phaser_Text.prototype.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_Text.prototype.updateCrop = function () {};
Phaser_Text.prototype.overlap = function (displayObject) { return new Boolean(); };
Phaser_Text.prototype.loadTexture = function (key, frame, stopAnimation) {};
Phaser_Text.prototype.crop = function (rect, copy) {};
Phaser_Text.prototype.update = function () {};
Phaser_Text.prototype.updateText = function () {};
Phaser_Text.prototype.setFrame = function (frame) {};
Phaser_Text.prototype.heal = function (amount) { return new Phaser_Sprite(); };
Phaser_Text.prototype.setStyle = function (style, style_font, style_fontStyle, style_fontVariant, style_fontWeight, style_fontSize, style_backgroundColor, style_fill, style_align, style_boundsAlignH, style_boundsAlignV, style_stroke, style_strokeThickness, style_wordWrap, style_wordWrapWidth, style_tabs) { return new Phaser_Text(); };
Phaser_Text.prototype.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_Text.prototype.resetFrame = function () {};
Phaser_Text.prototype.updateFont = function (components) {};
Phaser_Text.prototype.clearColors = function () { return new Phaser_Text(); };
Phaser_Text.prototype._renderWebGL = function (renderSession) {};
Phaser_Text.prototype.renderTabLine = function (line, x, y, fill) {};
Phaser_Text.prototype.setText = function (text) { return new Phaser_Text(); };

var Phaser_Component_AutoCull = function () {};
Phaser_Component_AutoCull.prototype.autoCull = new Boolean();
Phaser_Component_AutoCull.prototype.inCamera = new Boolean();

var Phaser_RetroFont = function (game, key, characterWidth, characterHeight, chars, charsPerRow, xSpacing, ySpacing, xOffset, yOffset) {};
Phaser_RetroFont.prototype = new Phaser.RenderTexture();
Phaser_RetroFont.TEXT_SET2 = new String();
Phaser_RetroFont.TEXT_SET3 = new String();
Phaser_RetroFont.TEXT_SET1 = new String();
Phaser_RetroFont.TEXT_SET10 = new String();
Phaser_RetroFont.TEXT_SET6 = new String();
Phaser_RetroFont.TEXT_SET7 = new String();
Phaser_RetroFont.TEXT_SET4 = new String();
Phaser_RetroFont.TEXT_SET5 = new String();
Phaser_RetroFont.TEXT_SET8 = new String();
Phaser_RetroFont.TEXT_SET9 = new String();
Phaser_RetroFont.ALIGN_CENTER = new String();
Phaser_RetroFont.ALIGN_RIGHT = new String();
Phaser_RetroFont.TEXT_SET11 = new String();
Phaser_RetroFont.ALIGN_LEFT = new String();
Phaser_RetroFont.prototype.frameData = new Phaser_FrameData();
Phaser_RetroFont.prototype.game = new Phaser_Game();
Phaser_RetroFont.prototype.multiLine = new Boolean();
Phaser_RetroFont.prototype.autoUpperCase = new Boolean();
Phaser_RetroFont.prototype.stamp = new Phaser_Image();
Phaser_RetroFont.prototype.align = new String();
Phaser_RetroFont.prototype.type = new Number();
Phaser_RetroFont.prototype.characterWidth = new Number();
Phaser_RetroFont.prototype.offsetX = new Number();
Phaser_RetroFont.prototype.characterSpacingX = new Number();
Phaser_RetroFont.prototype.characterSpacingY = new Number();
Phaser_RetroFont.prototype.offsetY = new Number();
Phaser_RetroFont.prototype.text = new String();
Phaser_RetroFont.prototype.key = new String();
Phaser_RetroFont.prototype.fixedWidth = new Number();
Phaser_RetroFont.prototype._tempMatrix = new PIXI_Matrix();
Phaser_RetroFont.prototype.characterPerRow = new Number();
Phaser_RetroFont.prototype.characterHeight = new Number();
Phaser_RetroFont.prototype.customSpacingX = new Number();
Phaser_RetroFont.prototype.customSpacingY = new Number();
Phaser_RetroFont.prototype.fontSet = new Phaser_Image();
Phaser_RetroFont.prototype._text = new String();
Phaser_RetroFont.prototype.grabData = new Array();
Phaser_RetroFont.prototype.removeUnsupportedCharacters = function (stripCR) { return new String(); };
Phaser_RetroFont.prototype.renderRawXY = function (displayObject, x, y, clear) {};
Phaser_RetroFont.prototype.setFixedWidth = function (width, lineAlignment) {};
Phaser_RetroFont.prototype.renderXY = function (displayObject, x, y, clear) {};
Phaser_RetroFont.prototype.render = function (displayObject, matrix, clear) {};
Phaser_RetroFont.prototype.getLongestLine = function () { return new Number(); };
Phaser_RetroFont.prototype.updateOffset = function (xOffset, yOffset) {};
Phaser_RetroFont.prototype.pasteLine = function (line, x, y, customSpacingX) {};
Phaser_RetroFont.prototype.buildRetroFontText = function () {};
Phaser_RetroFont.prototype.setText = function (content, multiLine, characterSpacing, lineSpacing, lineAlignment, allowLowerCase) {};

var Phaser_Physics_P2_PrismaticConstraint = function (world, bodyA, bodyB, lockRotation, anchorA, anchorB, axis, maxForce) {};
Phaser_Physics_P2_PrismaticConstraint.prototype.game = new Phaser_Game();
Phaser_Physics_P2_PrismaticConstraint.prototype.world = new Phaser_Physics_P2();

var Phaser_Easing_Elastic = function () {};
Phaser_Easing_Elastic.prototype.In = function (k) { return new Number(); };
Phaser_Easing_Elastic.prototype.InOut = function (k) { return new Number(); };
Phaser_Easing_Elastic.prototype.Out = function (k) { return new Number(); };

var Phaser_Physics_Arcade_TilemapCollision = function () {};
Phaser_Physics_Arcade_TilemapCollision.prototype.TILE_BIAS = new Number();

var Phaser_Component_Overlap = function () {};
Phaser_Component_Overlap.prototype.overlap = function (displayObject) { return new Boolean(); };

var Phaser_Particles_Arcade_Emitter = function (game, x, y, maxParticles) {};
Phaser_Particles_Arcade_Emitter.prototype = new Phaser.Group();
Phaser_Particles_Arcade_Emitter.prototype.minParticleSpeed = new Phaser_Point();
Phaser_Particles_Arcade_Emitter.prototype.bounce = new Phaser_Point();
Phaser_Particles_Arcade_Emitter.prototype.lifespan = new Number();
Phaser_Particles_Arcade_Emitter.prototype._flowTotal = new Number();
Phaser_Particles_Arcade_Emitter.prototype.type = new Number();
Phaser_Particles_Arcade_Emitter.prototype.minParticleScale = new Number();
Phaser_Particles_Arcade_Emitter.prototype.enableBody = new Boolean();
Phaser_Particles_Arcade_Emitter.prototype.children = new Array_DisplayObject_();
Phaser_Particles_Arcade_Emitter.prototype.enableBodyDebug = new Boolean();
Phaser_Particles_Arcade_Emitter.prototype._counter = new Number();
Phaser_Particles_Arcade_Emitter.prototype.scaleData = new Array();
Phaser_Particles_Arcade_Emitter.prototype.physicsType = new Number();
Phaser_Particles_Arcade_Emitter.prototype.height = new Number();
Phaser_Particles_Arcade_Emitter.prototype.emitY = new Number();
Phaser_Particles_Arcade_Emitter.prototype._explode = new Boolean();
Phaser_Particles_Arcade_Emitter.prototype.particleBringToTop = new Boolean();
Phaser_Particles_Arcade_Emitter.prototype.particleAnchor = new Phaser_Point();
Phaser_Particles_Arcade_Emitter.prototype.emitX = new Number();
Phaser_Particles_Arcade_Emitter.prototype._quantity = new Number();
Phaser_Particles_Arcade_Emitter.prototype.cursorIndex = new Number();
Phaser_Particles_Arcade_Emitter.prototype.physicsSortDirection = new Number();
Phaser_Particles_Arcade_Emitter.prototype.left = new Number();
Phaser_Particles_Arcade_Emitter.prototype._frames = new Object();
Phaser_Particles_Arcade_Emitter.prototype.hash = new Array();
Phaser_Particles_Arcade_Emitter.prototype._maxParticleScale = new Phaser_Point();
Phaser_Particles_Arcade_Emitter.prototype.alive = new Boolean();
Phaser_Particles_Arcade_Emitter.prototype.top = new Number();
Phaser_Particles_Arcade_Emitter.prototype.angle = new Number();
Phaser_Particles_Arcade_Emitter.prototype.onDestroy = new Phaser_Signal();
Phaser_Particles_Arcade_Emitter.prototype.minParticleAlpha = new Number();
Phaser_Particles_Arcade_Emitter.prototype.right = new Number();
Phaser_Particles_Arcade_Emitter.prototype.maxParticles = new Number();
Phaser_Particles_Arcade_Emitter.prototype._flowQuantity = new Number();
Phaser_Particles_Arcade_Emitter.prototype.width = new Number();
Phaser_Particles_Arcade_Emitter.prototype.x = new Number();
Phaser_Particles_Arcade_Emitter.prototype.ignoreDestroy = new Boolean();
Phaser_Particles_Arcade_Emitter.prototype.y = new Number();
Phaser_Particles_Arcade_Emitter.prototype.exists = new Boolean();
Phaser_Particles_Arcade_Emitter.prototype.z = new Number();
Phaser_Particles_Arcade_Emitter.prototype.physicsBodyType = new Number();
Phaser_Particles_Arcade_Emitter.prototype.angularDrag = new Number();
Phaser_Particles_Arcade_Emitter.prototype._sortProperty = new String();
Phaser_Particles_Arcade_Emitter.prototype.maxParticleAlpha = new Number();
Phaser_Particles_Arcade_Emitter.prototype.frequency = new Number();
Phaser_Particles_Arcade_Emitter.prototype.autoScale = new Boolean();
Phaser_Particles_Arcade_Emitter.prototype.maxParticleScale = new Number();
Phaser_Particles_Arcade_Emitter.prototype.fixedToCamera = new Boolean();
Phaser_Particles_Arcade_Emitter.prototype.area = new Phaser_Rectangle();
Phaser_Particles_Arcade_Emitter.prototype._minParticleScale = new Phaser_Point();
Phaser_Particles_Arcade_Emitter.prototype.maxParticleSpeed = new Phaser_Point();
Phaser_Particles_Arcade_Emitter.prototype.particleSendToBack = new Boolean();
Phaser_Particles_Arcade_Emitter.prototype.visible = new Boolean();
Phaser_Particles_Arcade_Emitter.prototype.bottom = new Number();
Phaser_Particles_Arcade_Emitter.prototype.cameraOffset = new Phaser_Point();
Phaser_Particles_Arcade_Emitter.prototype.minRotation = new Number();
Phaser_Particles_Arcade_Emitter.prototype.particleDrag = new Phaser_Point();
Phaser_Particles_Arcade_Emitter.prototype.autoAlpha = new Boolean();
Phaser_Particles_Arcade_Emitter.prototype.name = new String();
Phaser_Particles_Arcade_Emitter.prototype.maxRotation = new Number();
Phaser_Particles_Arcade_Emitter.prototype.alphaData = new Array();
Phaser_Particles_Arcade_Emitter.prototype.classType = new Object();
Phaser_Particles_Arcade_Emitter.prototype.cursor = new PIXI_DisplayObject();
Phaser_Particles_Arcade_Emitter.prototype.game = new Phaser_Game();
Phaser_Particles_Arcade_Emitter.prototype.total = new Number();
Phaser_Particles_Arcade_Emitter.prototype.particleClass = new Object();
Phaser_Particles_Arcade_Emitter.prototype.alpha = new Number();
Phaser_Particles_Arcade_Emitter.prototype.on = new Boolean();
Phaser_Particles_Arcade_Emitter.prototype.rotation = new Number();
Phaser_Particles_Arcade_Emitter.prototype.length = new Number();
Phaser_Particles_Arcade_Emitter.prototype.pendingDestroy = new Boolean();
Phaser_Particles_Arcade_Emitter.prototype.blendMode = new Number();
Phaser_Particles_Arcade_Emitter.prototype.gravity = new Number();
Phaser_Particles_Arcade_Emitter.prototype._timer = new Number();
Phaser_Particles_Arcade_Emitter.prototype.xy = function (index, x, y) {};
Phaser_Particles_Arcade_Emitter.prototype.descendingSortHandler = function (a, b) {};
Phaser_Particles_Arcade_Emitter.prototype.moveAll = function (group, silent) { return new Phaser_Group(); };
Phaser_Particles_Arcade_Emitter.prototype.removeAll = function (destroy, silent) {};
Phaser_Particles_Arcade_Emitter.prototype.explode = function (lifespan, quantity) {};
Phaser_Particles_Arcade_Emitter.prototype.customSort = function (sortHandler, context) {};
Phaser_Particles_Arcade_Emitter.prototype.revive = function () {};
Phaser_Particles_Arcade_Emitter.prototype.flow = function (lifespan, frequency, quantity, total, immediate) {};
Phaser_Particles_Arcade_Emitter.prototype.bringToTop = function (child) { return new Object(); };
Phaser_Particles_Arcade_Emitter.prototype.moveUp = function (child) { return new Object(); };
Phaser_Particles_Arcade_Emitter.prototype.postUpdate = function () {};
Phaser_Particles_Arcade_Emitter.prototype.destroy = function () {};
Phaser_Particles_Arcade_Emitter.prototype.setRotation = function (min, max) {};
Phaser_Particles_Arcade_Emitter.prototype.getFirstDead = function () { return new Object(); };
Phaser_Particles_Arcade_Emitter.prototype.addAt = function (child, index, silent) { return new PIXI_DisplayObject(); };
Phaser_Particles_Arcade_Emitter.prototype.forEachAlive = function (callback, callbackContext, args) {};
Phaser_Particles_Arcade_Emitter.prototype.at = function (object) {};
Phaser_Particles_Arcade_Emitter.prototype.resetCursor = function (index) { return new Object(); };
Phaser_Particles_Arcade_Emitter.prototype.emitParticle = function () { return new Boolean(); };
Phaser_Particles_Arcade_Emitter.prototype.addMultiple = function (children, silent) { return new Array__DisplayObject_(); };
Phaser_Particles_Arcade_Emitter.prototype.setProperty = function (child, key, value, operation, force) { return new Boolean(); };
Phaser_Particles_Arcade_Emitter.prototype.preUpdate = function () {};
Phaser_Particles_Arcade_Emitter.prototype.addToHash = function (child) { return new Boolean(); };
Phaser_Particles_Arcade_Emitter.prototype.checkProperty = function (child, key, value, force) { return new Boolean(); };
Phaser_Particles_Arcade_Emitter.prototype.callbackFromArray = function (child, callback, length) {};
Phaser_Particles_Arcade_Emitter.prototype.multiplyAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Particles_Arcade_Emitter.prototype.iterate = function (key, value, returnType, callback, callbackContext, args) { return new Object(); };
Phaser_Particles_Arcade_Emitter.prototype.set = function (child, key, value, checkAlive, checkVisible, operation, force) { return new Boolean(); };
Phaser_Particles_Arcade_Emitter.prototype.getFirstExists = function (exists) { return new Object(); };
Phaser_Particles_Arcade_Emitter.prototype.setXSpeed = function (min, max) {};
Phaser_Particles_Arcade_Emitter.prototype.kill = function () {};
Phaser_Particles_Arcade_Emitter.prototype.reverse = function () {};
Phaser_Particles_Arcade_Emitter.prototype.filter = function (predicate, checkExists) { return new Phaser_ArraySet(); };
Phaser_Particles_Arcade_Emitter.prototype.addAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Particles_Arcade_Emitter.prototype.divideAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Particles_Arcade_Emitter.prototype.setAllChildren = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_Particles_Arcade_Emitter.prototype.getIndex = function (child) { return new Number(); };
Phaser_Particles_Arcade_Emitter.prototype.getBottom = function () { return new Object(); };
Phaser_Particles_Arcade_Emitter.prototype.replace = function (oldChild, newChild) { return new Object(); };
Phaser_Particles_Arcade_Emitter.prototype.makeParticles = function (keys, frames, quantity, collide, collideWorldBounds) { return new Phaser_Particles_Arcade_Emitter(); };
Phaser_Particles_Arcade_Emitter.prototype.getRandom = function (startIndex, length) { return new Object(); };
Phaser_Particles_Arcade_Emitter.prototype.forEachExists = function (callback, callbackContext, args) {};
Phaser_Particles_Arcade_Emitter.prototype.getTop = function () { return new Object(); };
Phaser_Particles_Arcade_Emitter.prototype.create = function (x, y, key, frame, exists) { return new PIXI_DisplayObject(); };
Phaser_Particles_Arcade_Emitter.prototype.countDead = function () { return new Number(); };
Phaser_Particles_Arcade_Emitter.prototype.subAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Particles_Arcade_Emitter.prototype.add = function (child, silent) { return new PIXI_DisplayObject(); };
Phaser_Particles_Arcade_Emitter.prototype.swap = function (child1, child2) {};
Phaser_Particles_Arcade_Emitter.prototype.setScale = function (minX, maxX, minY, maxY, rate, ease, yoyo) {};
Phaser_Particles_Arcade_Emitter.prototype.setAlpha = function (min, max, rate, ease, yoyo) {};
Phaser_Particles_Arcade_Emitter.prototype.sort = function (key, order) {};
Phaser_Particles_Arcade_Emitter.prototype.moveDown = function (child) { return new Object(); };
Phaser_Particles_Arcade_Emitter.prototype.hasProperty = function (child, key) { return new Boolean(); };
Phaser_Particles_Arcade_Emitter.prototype.updateZ = function () {};
Phaser_Particles_Arcade_Emitter.prototype.ascendingSortHandler = function (a, b) {};
Phaser_Particles_Arcade_Emitter.prototype.removeBetween = function (startIndex, endIndex, destroy, silent) {};
Phaser_Particles_Arcade_Emitter.prototype.removeFromHash = function (child) { return new Boolean(); };
Phaser_Particles_Arcade_Emitter.prototype.next = function () { return new Object(); };
Phaser_Particles_Arcade_Emitter.prototype.forEachDead = function (callback, callbackContext, args) {};
Phaser_Particles_Arcade_Emitter.prototype.update = function () {};
Phaser_Particles_Arcade_Emitter.prototype.countLiving = function () { return new Number(); };
Phaser_Particles_Arcade_Emitter.prototype.remove = function (child, destroy, silent) { return new Boolean(); };
Phaser_Particles_Arcade_Emitter.prototype.callAll = function (method, context, args) {};
Phaser_Particles_Arcade_Emitter.prototype.setSize = function (width, height) {};
Phaser_Particles_Arcade_Emitter.prototype.createMultiple = function (quantity, key, frame, exists) {};
Phaser_Particles_Arcade_Emitter.prototype.setYSpeed = function (min, max) {};
Phaser_Particles_Arcade_Emitter.prototype.setAll = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_Particles_Arcade_Emitter.prototype.callAllExists = function (callback, existsValue, parameter) {};
Phaser_Particles_Arcade_Emitter.prototype.checkAll = function (key, value, checkAlive, checkVisible, force) {};
Phaser_Particles_Arcade_Emitter.prototype.previous = function () { return new Object(); };
Phaser_Particles_Arcade_Emitter.prototype.forEach = function (callback, callbackContext, checkExists, args) {};
Phaser_Particles_Arcade_Emitter.prototype.start = function (explode, lifespan, frequency, quantity, forceQuantity) {};
Phaser_Particles_Arcade_Emitter.prototype.sendToBack = function (child) { return new Object(); };
Phaser_Particles_Arcade_Emitter.prototype.getAt = function (index) { return new PIXI_DisplayObject(); };
Phaser_Particles_Arcade_Emitter.prototype.getFirstAlive = function () { return new Object(); };

var Phaser_Physics_P2_RotationalSpring = function (world, bodyA, bodyB, restAngle, stiffness, damping) {};
Phaser_Physics_P2_RotationalSpring.prototype.game = new Phaser_Game();
Phaser_Physics_P2_RotationalSpring.prototype.world = new Phaser_Physics_P2();
Phaser_Physics_P2_RotationalSpring.prototype.data = new p2_RotationalSpring();

var Phaser_TileSprite = function (game, x, y, width, height, key, frame) {};
Phaser_TileSprite.prototype._frame = new Phaser_Rectangle();
Phaser_TileSprite.prototype.tilePattern = new PIXI_Texture();
Phaser_TileSprite.prototype.lifespan = new Number();
Phaser_TileSprite.prototype.outOfBoundsKill = new Boolean();
Phaser_TileSprite.prototype.type = new Number();
Phaser_TileSprite.prototype.body = new Phaser_Physics_Arcade_Body();
Phaser_TileSprite.prototype.inCamera = new Boolean();
Phaser_TileSprite.prototype.offsetX = new Number();
Phaser_TileSprite.prototype.offsetY = new Number();
Phaser_TileSprite.prototype.maxHealth = new Number();
Phaser_TileSprite.prototype.fixedToCamera = new Boolean();
Phaser_TileSprite.prototype.renderOrderID = new Number();
Phaser_TileSprite.prototype.events = new Phaser_Events();
Phaser_TileSprite.prototype.physicsType = new Number();
Phaser_TileSprite.prototype.height = new Number();
Phaser_TileSprite.prototype.previousRotation = new Number();
Phaser_TileSprite.prototype.tileScale = new Phaser_Point();
Phaser_TileSprite.prototype.bottom = new Number();
Phaser_TileSprite.prototype.cameraOffset = new Phaser_Point();
Phaser_TileSprite.prototype.textureDebug = new Boolean();
Phaser_TileSprite.prototype.smoothed = new Boolean();
Phaser_TileSprite.prototype._bounds = new Phaser_Rectangle();
Phaser_TileSprite.prototype.input = new Phaser_InputHandler();
Phaser_TileSprite.prototype.left = new Number();
Phaser_TileSprite.prototype.name = new String();
Phaser_TileSprite.prototype._scroll = new Phaser_Point();
Phaser_TileSprite.prototype.refreshTexture = new Boolean();
Phaser_TileSprite.prototype.tilingTexture = new PIXI_Texture();
Phaser_TileSprite.prototype.frame = new Number();
Phaser_TileSprite.prototype.renderable = new Boolean();
Phaser_TileSprite.prototype.game = new Phaser_Game();
Phaser_TileSprite.prototype.components = new Object();
Phaser_TileSprite.prototype.tileScaleOffset = new Phaser_Point();
Phaser_TileSprite.prototype.tilePosition = new Phaser_Point();
Phaser_TileSprite.prototype.alive = new Boolean();
Phaser_TileSprite.prototype._outOfBoundsFired = new Boolean();
Phaser_TileSprite.prototype._fixedToCamera = new Boolean();
Phaser_TileSprite.prototype.canvasBuffer = new PIXI_CanvasBuffer();
Phaser_TileSprite.prototype.inWorld = new Boolean();
Phaser_TileSprite.prototype.tint = new Number();
Phaser_TileSprite.prototype.inputEnabled = new Boolean();
Phaser_TileSprite.prototype.world = new Phaser_Point();
Phaser_TileSprite.prototype.top = new Number();
Phaser_TileSprite.prototype.animations = new Phaser_AnimationManager();
Phaser_TileSprite.prototype.angle = new Number();
Phaser_TileSprite.prototype.checkWorldBounds = new Boolean();
Phaser_TileSprite.prototype.key = new String();
Phaser_TileSprite.prototype.debug = new Boolean();
Phaser_TileSprite.prototype.frameName = new String();
Phaser_TileSprite.prototype.health = new Number();
Phaser_TileSprite.prototype.destroyPhase = new Boolean();
Phaser_TileSprite.prototype.right = new Number();
Phaser_TileSprite.prototype.previousPosition = new Phaser_Point();
Phaser_TileSprite.prototype._exists = new Boolean();
Phaser_TileSprite.prototype.pendingDestroy = new Boolean();
Phaser_TileSprite.prototype.blendMode = new Number();
Phaser_TileSprite.prototype.customRender = new Boolean();
Phaser_TileSprite.prototype.width = new Number();
Phaser_TileSprite.prototype.autoCull = new Boolean();
Phaser_TileSprite.prototype.x = new Number();
Phaser_TileSprite.prototype.exists = new Boolean();
Phaser_TileSprite.prototype.y = new Number();
Phaser_TileSprite.prototype.z = new Number();
Phaser_TileSprite.prototype.fresh = new Boolean();
Phaser_TileSprite.prototype.play = function (name, frameRate, loop, killOnComplete) { return new Phaser_Animation(); };
Phaser_TileSprite.prototype.resizeFrame = function (parent, width, height) {};
Phaser_TileSprite.prototype.revive = function (health) { return new PIXI_DisplayObject(); };
Phaser_TileSprite.prototype.autoScroll = function (x, y) {};
Phaser_TileSprite.prototype.bringToTop = function () { return new PIXI_DisplayObject(); };
Phaser_TileSprite.prototype.moveUp = function () { return new PIXI_DisplayObject(); };
Phaser_TileSprite.prototype.postUpdate = function () {};
Phaser_TileSprite.prototype.destroy = function (destroyChildren) {};
Phaser_TileSprite.prototype.moveDown = function () { return new PIXI_DisplayObject(); };
Phaser_TileSprite.prototype.overlap = function (displayObject) { return new Boolean(); };
Phaser_TileSprite.prototype.loadTexture = function (key, frame, stopAnimation) {};
Phaser_TileSprite.prototype.reset = function (x, y) { return new _Phaser_TileSprite__This_instance_(); };
Phaser_TileSprite.prototype.preUpdate = function () {};
Phaser_TileSprite.prototype.damage = function (amount) { return new Phaser_Sprite(); };
Phaser_TileSprite.prototype.stopScroll = function () {};
Phaser_TileSprite.prototype.update = function () {};
Phaser_TileSprite.prototype.setFrame = function (frame) {};
Phaser_TileSprite.prototype.heal = function (amount) { return new Phaser_Sprite(); };
Phaser_TileSprite.prototype.sendToBack = function () { return new PIXI_DisplayObject(); };
Phaser_TileSprite.prototype.kill = function () { return new PIXI_DisplayObject(); };
Phaser_TileSprite.prototype.resetFrame = function () {};

var Phaser_Physics_P2_BodyDebug = function (game, body, settings) {};
Phaser_Physics_P2_BodyDebug.prototype = new Phaser.Group();
Phaser_Physics_P2_BodyDebug.prototype.type = new Number();
Phaser_Physics_P2_BodyDebug.prototype.enableBody = new Boolean();
Phaser_Physics_P2_BodyDebug.prototype.children = new Array_DisplayObject_();
Phaser_Physics_P2_BodyDebug.prototype.enableBodyDebug = new Boolean();
Phaser_Physics_P2_BodyDebug.prototype.defaultSettings = new Object();
Phaser_Physics_P2_BodyDebug.prototype.physicsType = new Number();
Phaser_Physics_P2_BodyDebug.prototype.canvas = new Phaser_Graphics();
Phaser_Physics_P2_BodyDebug.prototype.cursorIndex = new Number();
Phaser_Physics_P2_BodyDebug.prototype.physicsSortDirection = new Number();
Phaser_Physics_P2_BodyDebug.prototype.hash = new Array();
Phaser_Physics_P2_BodyDebug.prototype.alive = new Boolean();
Phaser_Physics_P2_BodyDebug.prototype.angle = new Number();
Phaser_Physics_P2_BodyDebug.prototype.onDestroy = new Phaser_Signal();
Phaser_Physics_P2_BodyDebug.prototype.ppu = new Number();
Phaser_Physics_P2_BodyDebug.prototype.ignoreDestroy = new Boolean();
Phaser_Physics_P2_BodyDebug.prototype.x = new Number();
Phaser_Physics_P2_BodyDebug.prototype.exists = new Boolean();
Phaser_Physics_P2_BodyDebug.prototype.y = new Number();
Phaser_Physics_P2_BodyDebug.prototype.z = new Number();
Phaser_Physics_P2_BodyDebug.prototype.physicsBodyType = new Number();
Phaser_Physics_P2_BodyDebug.prototype._sortProperty = new String();
Phaser_Physics_P2_BodyDebug.prototype.body = new Phaser_Physics_P2_Body();
Phaser_Physics_P2_BodyDebug.prototype.fixedToCamera = new Boolean();
Phaser_Physics_P2_BodyDebug.prototype.visible = new Boolean();
Phaser_Physics_P2_BodyDebug.prototype.cameraOffset = new Phaser_Point();
Phaser_Physics_P2_BodyDebug.prototype.name = new String();
Phaser_Physics_P2_BodyDebug.prototype.classType = new Object();
Phaser_Physics_P2_BodyDebug.prototype.cursor = new PIXI_DisplayObject();
Phaser_Physics_P2_BodyDebug.prototype.game = new Phaser_Game();
Phaser_Physics_P2_BodyDebug.prototype.total = new Number();
Phaser_Physics_P2_BodyDebug.prototype.alpha = new Number();
Phaser_Physics_P2_BodyDebug.prototype.rotation = new Number();
Phaser_Physics_P2_BodyDebug.prototype.length = new Number();
Phaser_Physics_P2_BodyDebug.prototype.pendingDestroy = new Boolean();
Phaser_Physics_P2_BodyDebug.prototype.xy = function (index, x, y) {};
Phaser_Physics_P2_BodyDebug.prototype.descendingSortHandler = function (a, b) {};
Phaser_Physics_P2_BodyDebug.prototype.moveAll = function (group, silent) { return new Phaser_Group(); };
Phaser_Physics_P2_BodyDebug.prototype.removeAll = function (destroy, silent) {};
Phaser_Physics_P2_BodyDebug.prototype.customSort = function (sortHandler, context) {};
Phaser_Physics_P2_BodyDebug.prototype.bringToTop = function (child) { return new Object(); };
Phaser_Physics_P2_BodyDebug.prototype.moveUp = function (child) { return new Object(); };
Phaser_Physics_P2_BodyDebug.prototype.updateSpriteTransform = function () {};
Phaser_Physics_P2_BodyDebug.prototype.rgbToHex = function () {};
Phaser_Physics_P2_BodyDebug.prototype.postUpdate = function () {};
Phaser_Physics_P2_BodyDebug.prototype.destroy = function (destroyChildren, soft) {};
Phaser_Physics_P2_BodyDebug.prototype.randomPastelHex = function () {};
Phaser_Physics_P2_BodyDebug.prototype.getFirstDead = function () { return new Object(); };
Phaser_Physics_P2_BodyDebug.prototype.addAt = function (child, index, silent) { return new PIXI_DisplayObject(); };
Phaser_Physics_P2_BodyDebug.prototype.forEachAlive = function (callback, callbackContext, args) {};
Phaser_Physics_P2_BodyDebug.prototype.resetCursor = function (index) { return new Object(); };
Phaser_Physics_P2_BodyDebug.prototype.addMultiple = function (children, silent) { return new Array__DisplayObject_(); };
Phaser_Physics_P2_BodyDebug.prototype.setProperty = function (child, key, value, operation, force) { return new Boolean(); };
Phaser_Physics_P2_BodyDebug.prototype.drawPath = function () {};
Phaser_Physics_P2_BodyDebug.prototype.preUpdate = function () {};
Phaser_Physics_P2_BodyDebug.prototype.addToHash = function (child) { return new Boolean(); };
Phaser_Physics_P2_BodyDebug.prototype.checkProperty = function (child, key, value, force) { return new Boolean(); };
Phaser_Physics_P2_BodyDebug.prototype.callbackFromArray = function (child, callback, length) {};
Phaser_Physics_P2_BodyDebug.prototype.multiplyAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Physics_P2_BodyDebug.prototype.iterate = function (key, value, returnType, callback, callbackContext, args) { return new Object(); };
Phaser_Physics_P2_BodyDebug.prototype.set = function (child, key, value, checkAlive, checkVisible, operation, force) { return new Boolean(); };
Phaser_Physics_P2_BodyDebug.prototype.getFirstExists = function (exists) { return new Object(); };
Phaser_Physics_P2_BodyDebug.prototype.draw = function () {};
Phaser_Physics_P2_BodyDebug.prototype.reverse = function () {};
Phaser_Physics_P2_BodyDebug.prototype.drawConvex = function () {};
Phaser_Physics_P2_BodyDebug.prototype.filter = function (predicate, checkExists) { return new Phaser_ArraySet(); };
Phaser_Physics_P2_BodyDebug.prototype.addAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Physics_P2_BodyDebug.prototype.divideAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Physics_P2_BodyDebug.prototype.setAllChildren = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_Physics_P2_BodyDebug.prototype.getIndex = function (child) { return new Number(); };
Phaser_Physics_P2_BodyDebug.prototype.drawCapsule = function () {};
Phaser_Physics_P2_BodyDebug.prototype.getBottom = function () { return new Object(); };
Phaser_Physics_P2_BodyDebug.prototype.replace = function (oldChild, newChild) { return new Object(); };
Phaser_Physics_P2_BodyDebug.prototype.drawPlane = function () {};
Phaser_Physics_P2_BodyDebug.prototype.getRandom = function (startIndex, length) { return new Object(); };
Phaser_Physics_P2_BodyDebug.prototype.forEachExists = function (callback, callbackContext, args) {};
Phaser_Physics_P2_BodyDebug.prototype.getTop = function () { return new Object(); };
Phaser_Physics_P2_BodyDebug.prototype.create = function (x, y, key, frame, exists) { return new PIXI_DisplayObject(); };
Phaser_Physics_P2_BodyDebug.prototype.countDead = function () { return new Number(); };
Phaser_Physics_P2_BodyDebug.prototype.subAll = function (property, amount, checkAlive, checkVisible) {};
Phaser_Physics_P2_BodyDebug.prototype.add = function (child, silent) { return new PIXI_DisplayObject(); };
Phaser_Physics_P2_BodyDebug.prototype.swap = function (child1, child2) {};
Phaser_Physics_P2_BodyDebug.prototype.sort = function (key, order) {};
Phaser_Physics_P2_BodyDebug.prototype.componentToHex = function () {};
Phaser_Physics_P2_BodyDebug.prototype.moveDown = function (child) { return new Object(); };
Phaser_Physics_P2_BodyDebug.prototype.hasProperty = function (child, key) { return new Boolean(); };
Phaser_Physics_P2_BodyDebug.prototype.updateZ = function () {};
Phaser_Physics_P2_BodyDebug.prototype.ascendingSortHandler = function (a, b) {};
Phaser_Physics_P2_BodyDebug.prototype.removeBetween = function (startIndex, endIndex, destroy, silent) {};
Phaser_Physics_P2_BodyDebug.prototype.removeFromHash = function (child) { return new Boolean(); };
Phaser_Physics_P2_BodyDebug.prototype.next = function () { return new Object(); };
Phaser_Physics_P2_BodyDebug.prototype.forEachDead = function (callback, callbackContext, args) {};
Phaser_Physics_P2_BodyDebug.prototype.update = function () {};
Phaser_Physics_P2_BodyDebug.prototype.countLiving = function () { return new Number(); };
Phaser_Physics_P2_BodyDebug.prototype.remove = function (child, destroy, silent) { return new Boolean(); };
Phaser_Physics_P2_BodyDebug.prototype.callAll = function (method, context, args) {};
Phaser_Physics_P2_BodyDebug.prototype.drawRectangle = function () {};
Phaser_Physics_P2_BodyDebug.prototype.createMultiple = function (quantity, key, frame, exists) {};
Phaser_Physics_P2_BodyDebug.prototype.setAll = function (key, value, checkAlive, checkVisible, operation, force) {};
Phaser_Physics_P2_BodyDebug.prototype.callAllExists = function (callback, existsValue, parameter) {};
Phaser_Physics_P2_BodyDebug.prototype.checkAll = function (key, value, checkAlive, checkVisible, force) {};
Phaser_Physics_P2_BodyDebug.prototype.previous = function () { return new Object(); };
Phaser_Physics_P2_BodyDebug.prototype.drawCircle = function () {};
Phaser_Physics_P2_BodyDebug.prototype.forEach = function (callback, callbackContext, checkExists, args) {};
Phaser_Physics_P2_BodyDebug.prototype.sendToBack = function (child) { return new Object(); };
Phaser_Physics_P2_BodyDebug.prototype.drawLine = function () {};
Phaser_Physics_P2_BodyDebug.prototype.getAt = function (index) { return new PIXI_DisplayObject(); };
Phaser_Physics_P2_BodyDebug.prototype.getFirstAlive = function () { return new Object(); };

var Phaser_Physics_P2_PointProxy = function (world, destination) {};
Phaser_Physics_P2_PointProxy.prototype.x = new Number();
Phaser_Physics_P2_PointProxy.prototype.y = new Number();
Phaser_Physics_P2_PointProxy.prototype.mx = new Number();
Phaser_Physics_P2_PointProxy.prototype.my = new Number();

var Phaser_GameObjectCreator = function (game) {};
Phaser_GameObjectCreator.prototype.game = new Phaser_Game();
Phaser_GameObjectCreator.prototype.world = new Phaser_World();
Phaser_GameObjectCreator.prototype.image = function (x, y, key, frame) { return new Phaser_Image(); };
Phaser_GameObjectCreator.prototype.retroFont = function (font, characterWidth, characterHeight, chars, charsPerRow, xSpacing, ySpacing, xOffset, yOffset) { return new Phaser_RetroFont(); };
Phaser_GameObjectCreator.prototype.renderTexture = function (width, height, key, addToCache) { return new Phaser_RenderTexture(); };
Phaser_GameObjectCreator.prototype.sound = function (key, volume, loop, connect) { return new Phaser_Sound(); };
Phaser_GameObjectCreator.prototype.rope = function (x, y, width, height, key, frame) { return new Phaser_Rope(); };
Phaser_GameObjectCreator.prototype.bitmapText = function (x, y, font, text, size, align) { return new Phaser_BitmapText(); };
Phaser_GameObjectCreator.prototype.graphics = function (x, y) { return new Phaser_Graphics(); };
Phaser_GameObjectCreator.prototype.tilemap = function (key, tileWidth, tileHeight, width, height) {};
Phaser_GameObjectCreator.prototype.button = function (x, y, key, callback, callbackContext, overFrame, outFrame, downFrame, upFrame) { return new Phaser_Button(); };
Phaser_GameObjectCreator.prototype.filter = function (filter, _any) { return new Phaser_Filter(); };
Phaser_GameObjectCreator.prototype.tween = function (obj) { return new Phaser_Tween(); };
Phaser_GameObjectCreator.prototype.bitmapData = function (width, height, key, addToCache) { return new Phaser_BitmapData(); };
Phaser_GameObjectCreator.prototype.sprite = function (x, y, key, frame) { return new Phaser_Sprite(); };
Phaser_GameObjectCreator.prototype.spriteBatch = function (parent, name, addToStage) { return new Phaser_SpriteBatch(); };
Phaser_GameObjectCreator.prototype.audio = function (key, volume, loop, connect) { return new Phaser_Sound(); };
Phaser_GameObjectCreator.prototype.text = function (x, y, text, style) { return new Phaser_Text(); };
Phaser_GameObjectCreator.prototype.tileSprite = function (x, y, width, height, key, frame) { return new Phaser_TileSprite(); };
Phaser_GameObjectCreator.prototype.emitter = function (x, y, maxParticles) { return new Phaser_Emitter(); };
Phaser_GameObjectCreator.prototype.group = function (parent, name, addToStage, enableBody, physicsBodyType) { return new Phaser_Group(); };
Phaser_GameObjectCreator.prototype.audioSprite = function (key) { return new Phaser_AudioSprite(); };

var Phaser_GameObjectFactory = function (game) {};
Phaser_GameObjectFactory.prototype.game = new Phaser_Game();
Phaser_GameObjectFactory.prototype.world = new Phaser_World();
Phaser_GameObjectFactory.prototype.renderTexture = function (width, height, key, addToCache) { return new Phaser_RenderTexture(); };
Phaser_GameObjectFactory.prototype.sound = function (key, volume, loop, connect) { return new Phaser_Sound(); };
Phaser_GameObjectFactory.prototype.rope = function (x, y, key, frame, points, group) { return new Phaser_Rope(); };
Phaser_GameObjectFactory.prototype.graphics = function (x, y, group) { return new Phaser_Graphics(); };
Phaser_GameObjectFactory.prototype.video = function (key, url) { return new Phaser_Video(); };
Phaser_GameObjectFactory.prototype.tilemap = function (key, tileWidth, tileHeight, width, height) { return new Phaser_Tilemap(); };
Phaser_GameObjectFactory.prototype.button = function (x, y, key, callback, callbackContext, overFrame, outFrame, downFrame, upFrame, group) { return new Phaser_Button(); };
Phaser_GameObjectFactory.prototype.sprite = function (x, y, key, frame, group) { return new Phaser_Sprite(); };
Phaser_GameObjectFactory.prototype.spriteBatch = function (parent, name, addToStage) { return new Phaser_SpriteBatch(); };
Phaser_GameObjectFactory.prototype.audio = function (key, volume, loop, connect) { return new Phaser_Sound(); };
Phaser_GameObjectFactory.prototype.text = function (x, y, text, style, group) { return new Phaser_Text(); };
Phaser_GameObjectFactory.prototype.group = function (parent, name, addToStage, enableBody, physicsBodyType) { return new Phaser_Group(); };
Phaser_GameObjectFactory.prototype.audioSprite = function (key) { return new Phaser_AudioSprite(); };
Phaser_GameObjectFactory.prototype.image = function (x, y, key, frame, group) { return new Phaser_Image(); };
Phaser_GameObjectFactory.prototype.retroFont = function (font, characterWidth, characterHeight, chars, charsPerRow, xSpacing, ySpacing, xOffset, yOffset) { return new Phaser_RetroFont(); };
Phaser_GameObjectFactory.prototype.bitmapText = function (x, y, font, text, size, group) { return new Phaser_BitmapText(); };
Phaser_GameObjectFactory.prototype.physicsGroup = function (physicsBodyType, parent, name, addToStage) { return new Phaser_Group(); };
Phaser_GameObjectFactory.prototype.filter = function (filter, _any) { return new Phaser_Filter(); };
Phaser_GameObjectFactory.prototype.existing = function (object) { return new Object(); };
Phaser_GameObjectFactory.prototype.tween = function (object) { return new Phaser_Tween(); };
Phaser_GameObjectFactory.prototype.plugin = function (plugin, parameter) { return new Phaser_Plugin(); };
Phaser_GameObjectFactory.prototype.bitmapData = function (width, height, key, addToCache) { return new Phaser_BitmapData(); };
Phaser_GameObjectFactory.prototype.tileSprite = function (x, y, width, height, key, frame, group) { return new Phaser_TileSprite(); };
Phaser_GameObjectFactory.prototype.emitter = function (x, y, maxParticles) { return new Phaser_Particles_Arcade_Emitter(); };
Phaser_GameObjectFactory.prototype.creature = function (x, y, key, group) { return new Phaser_Creature(); };

var CanvasGraphics = function () {};

var Phaser_State = function () {};
Phaser_State.prototype.game = new Phaser_Game();
Phaser_State.prototype.tweens = new Phaser_TweenManager();
Phaser_State.prototype.sound = new Phaser_SoundManager();
Phaser_State.prototype.scale = new Phaser_ScaleManager();
Phaser_State.prototype.world = new Phaser_World();
Phaser_State.prototype.load = new Phaser_Loader();
Phaser_State.prototype.physics = new Phaser_Physics();
Phaser_State.prototype.camera = new Phaser_Camera();
Phaser_State.prototype.particles = new Phaser_Particles();
Phaser_State.prototype.make = new Phaser_GameObjectCreator();
Phaser_State.prototype.key = new String();
Phaser_State.prototype.add = new Phaser_GameObjectFactory();
Phaser_State.prototype.cache = new Phaser_Cache();
Phaser_State.prototype.rnd = new Phaser_RandomDataGenerator();
Phaser_State.prototype.input = new Phaser_Input();
Phaser_State.prototype.stage = new Phaser_Stage();
Phaser_State.prototype.math = new Phaser_Math();
Phaser_State.prototype.time = new Phaser_Time();
Phaser_State.prototype.loadUpdate = function () {};
Phaser_State.prototype.paused = function () {};
Phaser_State.prototype.loadRender = function () {};
Phaser_State.prototype.update = function () {};
Phaser_State.prototype.preload = function () {};
Phaser_State.prototype.pauseUpdate = function () {};
Phaser_State.prototype.create = function () {};
Phaser_State.prototype.render = function () {};
Phaser_State.prototype.init = function () {};
Phaser_State.prototype.preRender = function () {};
Phaser_State.prototype.resize = function () {};
Phaser_State.prototype.resumed = function () {};
Phaser_State.prototype.shutdown = function () {};

var Phaser_StateManager = function (game, pendingState) {};
Phaser_StateManager.prototype.onLoadUpdateCallback = new Function();
Phaser_StateManager.prototype.game = new Phaser_Game();
Phaser_StateManager.prototype.onLoadRenderCallback = new Function();
Phaser_StateManager.prototype.onPreRenderCallback = new Function();
Phaser_StateManager.prototype.onResumedCallback = new Function();
Phaser_StateManager.prototype._clearCache = new Boolean();
Phaser_StateManager.prototype.onUpdateCallback = new Function();
Phaser_StateManager.prototype.onRenderCallback = new Function();
Phaser_StateManager.prototype.states = new Object();
Phaser_StateManager.prototype.current = new String();
Phaser_StateManager.prototype.onPreloadCallback = new Function();
Phaser_StateManager.prototype._args = new Array__any_();
Phaser_StateManager.prototype._clearWorld = new Boolean();
Phaser_StateManager.prototype.onPauseUpdateCallback = new Function();
Phaser_StateManager.prototype.onStateChange = new Phaser_Signal();
Phaser_StateManager.prototype.onPausedCallback = new Function();
Phaser_StateManager.prototype.created = new Boolean();
Phaser_StateManager.prototype.onCreateCallback = new Function();
Phaser_StateManager.prototype.onInitCallback = new Function();
Phaser_StateManager.prototype._pendingState = new Phaser_State();
Phaser_StateManager.prototype.onResizeCallback = new Function();
Phaser_StateManager.prototype._created = new Boolean();
Phaser_StateManager.prototype.onShutDownCallback = new Function();
Phaser_StateManager.prototype.link = function (key) {};
Phaser_StateManager.prototype.update = function () {};
Phaser_StateManager.prototype.remove = function (key) {};
Phaser_StateManager.prototype.dummy = function () {};
Phaser_StateManager.prototype.pauseUpdate = function () {};
Phaser_StateManager.prototype.clearCurrentState = function () {};
Phaser_StateManager.prototype.checkState = function (key) { return new Boolean(); };
Phaser_StateManager.prototype.getCurrentState = function () { return new Phaser_State(); };
Phaser_StateManager.prototype.boot = function () {};
Phaser_StateManager.prototype.render = function () {};
Phaser_StateManager.prototype.add = function (key, state, autoStart) {};
Phaser_StateManager.prototype.resume = function () {};
Phaser_StateManager.prototype.restart = function (clearWorld, clearCache, parameter) {};
Phaser_StateManager.prototype.preRender = function (elapsedTime) {};
Phaser_StateManager.prototype.start = function (key, clearWorld, clearCache, parameter) {};
Phaser_StateManager.prototype.destroy = function () {};
Phaser_StateManager.prototype.pause = function () {};
Phaser_StateManager.prototype.unlink = function (key) {};
Phaser_StateManager.prototype.loadComplete = function () {};
Phaser_StateManager.prototype.resize = function () {};
Phaser_StateManager.prototype.setCurrentState = function (key) {};
Phaser_StateManager.prototype.preUpdate = function () {};



PIXI = {};
Phaser = {};
Phaser.Easing = {};
Phaser.Component = {};
Phaser.Physics = {};
Phaser.Physics.Arcade = {};
Phaser.Physics.P2 = {};
Phaser.Particles = {};
module:PIXI = {};
Phaser.Physics.Ninja = {};
Phaser.Utils = {};
Phaser.Particles.Arcade = {};

// easing


Phaser.Easing = {};
Phaser.Easing.Linear = {};
Phaser.Easing.Linear.None = function (k) { return new Number(); };
Phaser.Easing.Quadratic = {};
Phaser.Easing.Quadratic.In = function (k) { return new Number(); };
Phaser.Easing.Quadratic.Out = function (k) { return new Number(); };
Phaser.Easing.Quadratic.InOut = function (k) { return new Number(); };
Phaser.Easing.Cubic = {};
Phaser.Easing.Cubic.In = function (k) { return new Number(); };
Phaser.Easing.Cubic.Out = function (k) { return new Number(); };
Phaser.Easing.Cubic.InOut = function (k) { return new Number(); };
Phaser.Easing.Quartic = {};
Phaser.Easing.Quartic.In = function (k) { return new Number(); };
Phaser.Easing.Quartic.Out = function (k) { return new Number(); };
Phaser.Easing.Quartic.InOut = function (k) { return new Number(); };
Phaser.Easing.Quintic = {};
Phaser.Easing.Quintic.In = function (k) { return new Number(); };
Phaser.Easing.Quintic.Out = function (k) { return new Number(); };
Phaser.Easing.Quintic.InOut = function (k) { return new Number(); };
Phaser.Easing.Sinusoidal = {};
Phaser.Easing.Sinusoidal.In = function (k) { return new Number(); };
Phaser.Easing.Sinusoidal.Out = function (k) { return new Number(); };
Phaser.Easing.Sinusoidal.InOut = function (k) { return new Number(); };
Phaser.Easing.Exponential = {};
Phaser.Easing.Exponential.In = function (k) { return new Number(); };
Phaser.Easing.Exponential.Out = function (k) { return new Number(); };
Phaser.Easing.Exponential.InOut = function (k) { return new Number(); };
Phaser.Easing.Circular = {};
Phaser.Easing.Circular.In = function (k) { return new Number(); };
Phaser.Easing.Circular.Out = function (k) { return new Number(); };
Phaser.Easing.Circular.InOut = function (k) { return new Number(); };
Phaser.Easing.Elastic = {};
Phaser.Easing.Elastic.In = function (k) { return new Number(); };
Phaser.Easing.Elastic.Out = function (k) { return new Number(); };
Phaser.Easing.Elastic.InOut = function (k) { return new Number(); };
Phaser.Easing.Back = {};
Phaser.Easing.Back.In = function (k) { return new Number(); };
Phaser.Easing.Back.Out = function (k) { return new Number(); };
Phaser.Easing.Back.InOut = function (k) { return new Number(); };
Phaser.Easing.Bounce = {};
Phaser.Easing.Bounce.In = function (k) { return new Number(); };
Phaser.Easing.Bounce.Out = function (k) { return new Number(); };
Phaser.Easing.Bounce.InOut = function (k) { return new Number(); };
Phaser_Easing.Default = Phaser_Easing.Linear.None;
Phaser_Easing.Power0 = Phaser_Easing.Linear.None;
Phaser_Easing.Power1 = Phaser_Easing.Quadratic.Out;
Phaser_Easing.Power2 = Phaser_Easing.Cubic.Out;
Phaser_Easing.Power3 = Phaser_Easing.Quartic.Out;
Phaser_Easing.Power4 = Phaser_Easing.Quintic.Out;

// alias

PIXI.Texture = PIXI_Texture;
PIXI.FilterTexture = PIXI_FilterTexture;
PIXI.CanvasBuffer = PIXI_CanvasBuffer;
PIXI.Graphics = PIXI_Graphics;
PIXI.Rope = PIXI_Rope;
PIXI.Sprite = PIXI_Sprite;
PIXI.PixiShader = PIXI_PixiShader;
PIXI.WebGLMaskManager = PIXI_WebGLMaskManager;
PIXI.Event = PIXI_Event;
PIXI.WebGLSpriteBatch = PIXI_WebGLSpriteBatch;
PIXI.ComplexPrimitiveShader = PIXI_ComplexPrimitiveShader;
PIXI.CanvasMaskManager = PIXI_CanvasMaskManager;
PIXI.WebGLFastSpriteBatch = PIXI_WebGLFastSpriteBatch;
PIXI.WebGLShaderManager = PIXI_WebGLShaderManager;
PIXI.SpriteBatch = PIXI_SpriteBatch;
PIXI.Stage = PIXI_Stage;
PIXI.BaseTexture = PIXI_BaseTexture;
PIXI.WebGLRenderer = PIXI_WebGLRenderer;
PIXI.Strip = PIXI_Strip;
PIXI.CanvasRenderer = PIXI_CanvasRenderer;
PIXI.WebGLBlendModeManager = PIXI_WebGLBlendModeManager;
PIXI.StripShader = PIXI_StripShader;
PIXI.WebGLFilterManager = PIXI_WebGLFilterManager;
PIXI.GraphicsData = PIXI_GraphicsData;
PIXI.PrimitiveShader = PIXI_PrimitiveShader;
PIXI.DisplayObject = PIXI_DisplayObject;
PIXI.AbstractFilter = PIXI_AbstractFilter;
PIXI.TilingSprite = PIXI_TilingSprite;
PIXI.RenderTexture = PIXI_RenderTexture;
PIXI.PixiFastShader = PIXI_PixiFastShader;
PIXI.DisplayObjectContainer = PIXI_DisplayObjectContainer;
PIXI.WebGLStencilManager = PIXI_WebGLStencilManager;
Phaser.Signal = Phaser_Signal;
Phaser.Events = Phaser_Events;
Phaser.Net = Phaser_Net;
Phaser.Easing.Exponential = Phaser_Easing_Exponential;
Phaser.Tileset = Phaser_Tileset;
Phaser.Particles = Phaser_Particles;
Phaser.Component.Reset = Phaser_Component_Reset;
Phaser.Stage = Phaser_Stage;
Phaser.Math = Phaser_Math;
Phaser.Easing.Quartic = Phaser_Easing_Quartic;
Phaser.Utils = Phaser_Utils;
Phaser.RandomDataGenerator = Phaser_RandomDataGenerator;
Phaser.Point = Phaser_Point;
Phaser.Device = Phaser_Device;
Phaser.Frame = Phaser_Frame;
Phaser.Game = Phaser_Game;
Phaser.Rectangle = Phaser_Rectangle;
Phaser.QuadTree = Phaser_QuadTree;
Phaser.Tween = Phaser_Tween;
Phaser.Time = Phaser_Time;
Phaser.RequestAnimationFrame = Phaser_RequestAnimationFrame;
Phaser.Physics.Arcade.Body = Phaser_Physics_Arcade_Body;
Phaser.Easing.Bounce = Phaser_Easing_Bounce;
Phaser.Circle = Phaser_Circle;
Phaser.RenderTexture = Phaser_RenderTexture;
Phaser.Tile = Phaser_Tile;
Phaser.FrameData = Phaser_FrameData;
Phaser.Touch = Phaser_Touch;
Phaser.Component.Smoothed = Phaser_Component_Smoothed;
Phaser.Timer = Phaser_Timer;
Phaser.AnimationParser = Phaser_AnimationParser;
Phaser.Line = Phaser_Line;
Phaser.Physics.P2.FixtureList = Phaser_Physics_P2_FixtureList;
Phaser.Component.BringToTop = Phaser_Component_BringToTop;
Phaser.Animation = Phaser_Animation;
Phaser.Physics.P2.InversePointProxy = Phaser_Physics_P2_InversePointProxy;
Phaser.Component.Crop = Phaser_Component_Crop;
Phaser.Easing.Circular = Phaser_Easing_Circular;
Phaser.Component.LifeSpan = Phaser_Component_LifeSpan;
Phaser.SinglePad = Phaser_SinglePad;
Phaser.ArraySet = Phaser_ArraySet;
WebGLGraphicsData = WebGLGraphicsData;
Phaser.Easing = Phaser_Easing;
Phaser.Easing.Linear = Phaser_Easing_Linear;
Phaser.Component.Delta = Phaser_Component_Delta;
Phaser.Pointer = Phaser_Pointer;
Phaser.Physics.P2.CollisionGroup = Phaser_Physics_P2_CollisionGroup;
Phaser.Physics.Arcade = Phaser_Physics_Arcade;
Phaser.ImageCollection = Phaser_ImageCollection;
Phaser.Component.InWorld = Phaser_Component_InWorld;
Phaser.Physics.Ninja = Phaser_Physics_Ninja;
Phaser.Physics = Phaser_Physics;
Phaser.Component.Animation = Phaser_Component_Animation;
Phaser.TilemapParser = Phaser_TilemapParser;
Phaser.LoaderParser = Phaser_LoaderParser;
Phaser.Matrix = Phaser_Matrix;
Phaser.Particles.Arcade = Phaser_Particles_Arcade;
Phaser.TweenManager = Phaser_TweenManager;
Phaser.Component.InCamera = Phaser_Component_InCamera;
Phaser.Easing.Sinusoidal = Phaser_Easing_Sinusoidal;
Phaser.Physics.P2.GearConstraint = Phaser_Physics_P2_GearConstraint;
Phaser.Group = Phaser_Group;
module:PIXI.PIXI = module_PIXI_PIXI;
Phaser.InputHandler = Phaser_InputHandler;
Phaser.Physics.P2.ContactMaterial = Phaser_Physics_P2_ContactMaterial;
WebGLGraphics = WebGLGraphics;
Phaser.Component.ScaleMinMax = Phaser_Component_ScaleMinMax;
Phaser.Gamepad = Phaser_Gamepad;
Phaser.BitmapData = Phaser_BitmapData;
Phaser.Component.FixedToCamera = Phaser_Component_FixedToCamera;
Phaser.TimerEvent = Phaser_TimerEvent;
Phaser.Key = Phaser_Key;
Phaser.Physics.P2 = Phaser_Physics_P2;
Phaser.Mouse = Phaser_Mouse;
Phaser.Easing.Cubic = Phaser_Easing_Cubic;
Phaser.Keyboard = Phaser_Keyboard;
Phaser.SignalBinding = Phaser_SignalBinding;
Phaser.Input = Phaser_Input;
Phaser.Video = Phaser_Video;
Phaser.Physics.P2.RevoluteConstraint = Phaser_Physics_P2_RevoluteConstraint;
Phaser.Physics.Ninja.Circle = Phaser_Physics_Ninja_Circle;
Phaser.DOM = Phaser_DOM;
Phaser.SpriteBatch = Phaser_SpriteBatch;
Phaser.Canvas = Phaser_Canvas;
Phaser.Physics.P2.DistanceConstraint = Phaser_Physics_P2_DistanceConstraint;
Phaser.Physics.P2.Spring = Phaser_Physics_P2_Spring;
Phaser.Physics.P2.Material = Phaser_Physics_P2_Material;
Phaser.AnimationManager = Phaser_AnimationManager;
Phaser.Create = Phaser_Create;
Phaser.Tilemap = Phaser_Tilemap;
Phaser.DeviceButton = Phaser_DeviceButton;
Phaser.Component.InputEnabled = Phaser_Component_InputEnabled;
Phaser.Physics.Ninja.Body = Phaser_Physics_Ninja_Body;
Phaser.LinkedList = Phaser_LinkedList;
Phaser.Image = Phaser_Image;
Phaser.Physics.Ninja.AABB = Phaser_Physics_Ninja_AABB;
Phaser.Sound = Phaser_Sound;
Phaser.Physics.P2.Body = Phaser_Physics_P2_Body;
Phaser.Component.Destroy = Phaser_Component_Destroy;
Phaser.Component.LoadTexture = Phaser_Component_LoadTexture;
Phaser.BitmapText = Phaser_BitmapText;
Phaser.Polygon = Phaser_Polygon;
Phaser.AudioSprite = Phaser_AudioSprite;
Phaser.Cache = Phaser_Cache;
Phaser.MSPointer = Phaser_MSPointer;
Phaser.Plugin = Phaser_Plugin;
Phaser.Component.Core = Phaser_Component_Core;
Phaser.Sprite = Phaser_Sprite;
Phaser.Color = Phaser_Color;
Phaser.World = Phaser_World;
CanvasPool = CanvasPool;
Phaser.FlexGrid = Phaser_FlexGrid;
Phaser.Component.Health = Phaser_Component_Health;
Phaser.Component.Angle = Phaser_Component_Angle;
Phaser.RoundedRectangle = Phaser_RoundedRectangle;
Phaser.Particle = Phaser_Particle;
Phaser.Creature = Phaser_Creature;
Phaser.Camera = Phaser_Camera;
Phaser.Ellipse = Phaser_Ellipse;
Phaser.Graphics = Phaser_Graphics;
Phaser.Physics.P2.LockConstraint = Phaser_Physics_P2_LockConstraint;
Phaser.ScaleManager = Phaser_ScaleManager;
Phaser.TilemapLayer = Phaser_TilemapLayer;
Phaser.Utils.Debug = Phaser_Utils_Debug;
Phaser.Easing.Back = Phaser_Easing_Back;
Phaser.ArrayUtils = Phaser_ArrayUtils;
Phaser.FlexLayer = Phaser_FlexLayer;
CanvasTinter = CanvasTinter;
Phaser.Physics.Ninja.Tile = Phaser_Physics_Ninja_Tile;
Phaser.Component.Bounds = Phaser_Component_Bounds;
Phaser.Component.PhysicsBody = Phaser_Component_PhysicsBody;
Phaser.Easing.Quintic = Phaser_Easing_Quintic;
Phaser.Rope = Phaser_Rope;
Phaser.Easing.Quadratic = Phaser_Easing_Quadratic;
Phaser.Filter = Phaser_Filter;
Phaser.Button = Phaser_Button;
Phaser.SoundManager = Phaser_SoundManager;
Phaser.Loader = Phaser_Loader;
Phaser.PluginManager = Phaser_PluginManager;
Phaser.TweenData = Phaser_TweenData;
Phaser.Text = Phaser_Text;
Phaser.Component.AutoCull = Phaser_Component_AutoCull;
Phaser.RetroFont = Phaser_RetroFont;
Phaser.Physics.P2.PrismaticConstraint = Phaser_Physics_P2_PrismaticConstraint;
Phaser.Easing.Elastic = Phaser_Easing_Elastic;
Phaser.Physics.Arcade.TilemapCollision = Phaser_Physics_Arcade_TilemapCollision;
Phaser.Component.Overlap = Phaser_Component_Overlap;
Phaser.Particles.Arcade.Emitter = Phaser_Particles_Arcade_Emitter;
Phaser.Physics.P2.RotationalSpring = Phaser_Physics_P2_RotationalSpring;
Phaser.TileSprite = Phaser_TileSprite;
Phaser.Physics.P2.BodyDebug = Phaser_Physics_P2_BodyDebug;
Phaser.Physics.P2.PointProxy = Phaser_Physics_P2_PointProxy;
Phaser.GameObjectCreator = Phaser_GameObjectCreator;
Phaser.GameObjectFactory = Phaser_GameObjectFactory;
CanvasGraphics = CanvasGraphics;
Phaser.State = Phaser_State;
Phaser.StateManager = Phaser_StateManager;

// Global constants

Phaser.VERSION = String;
Phaser.GAMES = Array;
Phaser.AUTO = Number;
Phaser.CANVAS = Number;
Phaser.WEBGL = Number;
Phaser.HEADLESS = Number;
Phaser.NONE = Number;
Phaser.LEFT = Number;
Phaser.RIGHT = Number;
Phaser.UP = Number;
Phaser.DOWN = Number;
Phaser.SPRITE = Number;
Phaser.BUTTON = Number;
Phaser.IMAGE = Number;
Phaser.GRAPHICS = Number;
Phaser.TEXT = Number;
Phaser.TILESPRITE = Number;
Phaser.BITMAPTEXT = Number;
Phaser.GROUP = Number;
Phaser.RENDERTEXTURE = Number;
Phaser.TILEMAP = Number;
Phaser.TILEMAPLAYER = Number;
Phaser.EMITTER = Number;
Phaser.POLYGON = Number;
Phaser.BITMAPDATA = Number;
Phaser.CANVAS_FILTER = Number;
Phaser.WEBGL_FILTER = Number;
Phaser.ELLIPSE = Number;
Phaser.SPRITEBATCH = Number;
Phaser.RETROFONT = Number;
Phaser.POINTER = Number;
Phaser.ROPE = Number;
Phaser.CIRCLE = Number;
Phaser.RECTANGLE = Number;
Phaser.LINE = Number;
Phaser.MATRIX = Number;
Phaser.POINT = Number;
Phaser.ROUNDEDRECTANGLE = Number;
Phaser.CREATURE = Number;
Phaser.VIDEO = Number;




// This API is manually added because for some reason it is not covered by the JSDoc JSON files.

// phaser globals

Phaser.blendModes = {
	NORMAL : 0,
	ADD : 1,
	MULTIPLY : 2,
	SCREEN : 3,
	OVERLAY : 4,
	DARKEN : 5,
	LIGHTEN : 6,
	COLOR_DODGE : 7,
	COLOR_BURN : 8,
	HARD_LIGHT : 9,
	SOFT_LIGHT : 10,
	DIFFERENCE : 11,
	EXCLUSION : 12,
	HUE : 13,
	SATURATION : 14,
	COLOR : 15,
	LUMINOSITY : 16
};
Phaser.scaleModes = {
	DEFAULT : 0,
	LINEAR : 0,
	NEAREST : 1
};

// Phaser.Physics constants

Phaser_Physics.ARCADE = 0;
Phaser_Physics.P2JS = 1;
Phaser_Physics.NINJA = 2;
Phaser_Physics.BOX2D = 3;
Phaser_Physics.CHIPMUNK = 4;

// Phaser_Keyboard constants

Phaser_Keyboard.A = 0;
Phaser_Keyboard.B = 0;
Phaser_Keyboard.C = 0;
Phaser_Keyboard.D = 0;
Phaser_Keyboard.E = 0;
Phaser_Keyboard.F = 0;
Phaser_Keyboard.G = 0;
Phaser_Keyboard.H = 0;
Phaser_Keyboard.I = 0;
Phaser_Keyboard.J = 0;
Phaser_Keyboard.K = 0;
Phaser_Keyboard.L = 0;
Phaser_Keyboard.M = 0;
Phaser_Keyboard.N = 0;
Phaser_Keyboard.O = 0;
Phaser_Keyboard.P = 0;
Phaser_Keyboard.Q = 0;
Phaser_Keyboard.R = 0;
Phaser_Keyboard.S = 0;
Phaser_Keyboard.T = 0;
Phaser_Keyboard.U = 0;
Phaser_Keyboard.V = 0;
Phaser_Keyboard.W = 0;
Phaser_Keyboard.X = 0;
Phaser_Keyboard.Y = 0;
Phaser_Keyboard.Z = 0;
Phaser_Keyboard.ZERO = 0;
Phaser_Keyboard.ONE = 0;
Phaser_Keyboard.TWO = 0;
Phaser_Keyboard.THREE = 0;
Phaser_Keyboard.FOUR = 0;
Phaser_Keyboard.FIVE = 0;
Phaser_Keyboard.SIX = 0;
Phaser_Keyboard.SEVEN = 0;
Phaser_Keyboard.EIGHT = 0;
Phaser_Keyboard.NINE = 0;
Phaser_Keyboard.NUMPAD_0 = 96;
Phaser_Keyboard.NUMPAD_1 = 97;
Phaser_Keyboard.NUMPAD_2 = 98;
Phaser_Keyboard.NUMPAD_3 = 99;
Phaser_Keyboard.NUMPAD_4 = 100;
Phaser_Keyboard.NUMPAD_5 = 101;
Phaser_Keyboard.NUMPAD_6 = 102;
Phaser_Keyboard.NUMPAD_7 = 103;
Phaser_Keyboard.NUMPAD_8 = 104;
Phaser_Keyboard.NUMPAD_9 = 105;
Phaser_Keyboard.NUMPAD_MULTIPLY = 106;
Phaser_Keyboard.NUMPAD_ADD = 107;
Phaser_Keyboard.NUMPAD_ENTER = 108;
Phaser_Keyboard.NUMPAD_SUBTRACT = 109;
Phaser_Keyboard.NUMPAD_DECIMAL = 110;
Phaser_Keyboard.NUMPAD_DIVIDE = 111;
Phaser_Keyboard.F1 = 112;
Phaser_Keyboard.F2 = 113;
Phaser_Keyboard.F3 = 114;
Phaser_Keyboard.F4 = 115;
Phaser_Keyboard.F5 = 116;
Phaser_Keyboard.F6 = 117;
Phaser_Keyboard.F7 = 118;
Phaser_Keyboard.F8 = 119;
Phaser_Keyboard.F9 = 120;
Phaser_Keyboard.F10 = 121;
Phaser_Keyboard.F11 = 122;
Phaser_Keyboard.F12 = 123;
Phaser_Keyboard.F13 = 124;
Phaser_Keyboard.F14 = 125;
Phaser_Keyboard.F15 = 126;
Phaser_Keyboard.COLON = 186;
Phaser_Keyboard.EQUALS = 187;
Phaser_Keyboard.UNDERSCORE = 189;
Phaser_Keyboard.QUESTION_MARK = 191;
Phaser_Keyboard.TILDE = 192;
Phaser_Keyboard.OPEN_BRACKET = 219;
Phaser_Keyboard.BACKWARD_SLASH = 220;
Phaser_Keyboard.CLOSED_BRACKET = 221;
Phaser_Keyboard.QUOTES = 222;
Phaser_Keyboard.BACKSPACE = 8;
Phaser_Keyboard.TAB = 9;
Phaser_Keyboard.CLEAR = 12;
Phaser_Keyboard.ENTER = 13;
Phaser_Keyboard.SHIFT = 16;
Phaser_Keyboard.CONTROL = 17;
Phaser_Keyboard.ALT = 18;
Phaser_Keyboard.CAPS_LOCK = 20;
Phaser_Keyboard.ESC = 27;
Phaser_Keyboard.SPACEBAR = 32;
Phaser_Keyboard.PAGE_UP = 33;
Phaser_Keyboard.PAGE_DOWN = 34;
Phaser_Keyboard.END = 35;
Phaser_Keyboard.HOME = 36;
Phaser_Keyboard.LEFT = 37;
Phaser_Keyboard.UP = 38;
Phaser_Keyboard.RIGHT = 39;
Phaser_Keyboard.DOWN = 40;
Phaser_Keyboard.INSERT = 45;
Phaser_Keyboard.DELETE = 46;
Phaser_Keyboard.HELP = 47;
Phaser_Keyboard.NUM_LOCK = 144;
Phaser_Keyboard.PLUS = 43;
Phaser_Keyboard.MINUS = 45;
