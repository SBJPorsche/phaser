/**
 * myGame
 */

function myGame(){
	Phaser.State.call(this);
}

var proto = Object.create(Phaser.State);

myGame.prototype = proto

myGame.prototype.preload = function(){
	this.load.image('tile', 'assets/images/ground_grass_broken.png'); 
    this.load.image('player', 'assets/images/boniatillo.png');
}


myGame.prototype.create = function(){
	this.tileWidth = this.game.cache.getImage('tile').width;
	this.tileHeight = this.game.cache.getImage('tile').height;	
    this.stage.backgroundColor = '479cde';
    this.physics.startSystem(Phaser.Physics.ARCADE);
    this.platforms = this.game.add.group();
    this.platforms.enableBody = true;
    this.platforms.createMultiple(250, 'tile');  
    this.time = this.time.events.loop(2000, this.addPlatform, this);
    this.spacing = 300;
    this.score = 0;     
    this.createScore();        
    this.initPlatforms();    
    this.createPlayer();  
    this.cursors = this.game.input.keyboard.createCursorKeys(); 
}

myGame.prototype.addTile = function(x, y){
    var tile = this.platforms.getFirstDead();
    tile.reset(x, y);
    tile.body.velocity.y = 150; 
    tile.body.immovable = true;
    tile.checkWorldBounds = true
    tile.outOfBoundsKill = true  
}

myGame.prototype.addPlatform = function(y){
    if(typeof(y) == "undefined"){
        y = -this.tileHeight;
        this.incrementScore();
    }    
    var tilesNeeded = Math.ceil(this.game.world.width / this.tileWidth);
    var hole = Math.floor(Math.random() * (tilesNeeded - 3)) + 1;
 
    //Keep creating tiles next to each other until we have an entire row
    //Don't add tiles where the random hole is
    for (var i = 0; i < tilesNeeded; i++){
        if (i != hole && i != hole + 1){
            this.addTile(i * this.tileWidth, y); 
        }           
    }
}

myGame.prototype.initPlatforms = function(){
    bottom = this.game.world.height - this.tileHeight,
    top = this.tileHeight;
    //Keep creating platforms until they reach (near) the top of the screen
    for(var y = bottom; y > top - this.tileHeight; y = y - this.spacing){
    	this.addPlatform(y);
    }
}


myGame.prototype.createPlayer = function(){
    //Add the player to the game by creating a new sprite
    this.player = this.game.add.sprite(this.game.world.centerX, this.game.world.height - (this.spacing * 2 + (3 * this.tileHeight)), 'player');
 
    //Set the players anchor point to be in the middle horizontally
    this.player.anchor.setTo(0.5, 1.0);
 
    //Enable physics on the player
    this.game.physics.arcade.enable(this.player);
 
    //Make the player fall by applying gravity
    this.player.body.gravity.y = 200;
 
    //Make the player collide with the game boundaries 
    this.player.body.collideWorldBounds = true;
 
    //Make the player bounce a little
    this.player.body.bounce.y = 0.1;
}

myGame.prototype.update = function(){
    //Make the sprite collide with the ground layer
    this.game.physics.arcade.collide(this.player, this.platforms);
 
 
    //Check if the player is touching the bottom
    if(this.player.body.position.y >= this.game.world.height - this.player.body.height){
    	this.gameOver();
    }
    
    //Make the sprite jump when the up key is pushed
    if(this.cursors.up.isDown && this.player.body.wasTouching.down) {
    	this.player.body.velocity.y = -1400;
    }
    //Make the player go left
    if(this.cursors.left.isDown){
    	this.player.body.velocity.x += -30;
    }
    //Make the player go right
    if(this.cursors.right.isDown){
    	this.player.body.velocity.x += 30;
    }
}

myGame.prototype.gameOver = function(){
    this.game.state.start('Main');
}

myGame.prototype.createScore = function(){
    var scoreFont = "100px Arial";
 
    this.scoreLabel = this.game.add.text((this.game.world.centerX), 100, "0", {font: scoreFont, fill: "#fff"}); 
    this.scoreLabel.anchor.setTo(0.5, 0.5);
    this.scoreLabel.align = 'center';
}

myGame.prototype.incrementScore = function(){
    this.score += 1;   
    this.scoreLabel.text = this.score;  
}



